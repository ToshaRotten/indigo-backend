// Code generated by ent, DO NOT EDIT.

package message

import (
	"main/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldText, v))
}

// SendedAt applies equality check predicate on the "sended_at" field. It's identical to SendedAtEQ.
func SendedAt(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSendedAt, v))
}

// FilePath applies equality check predicate on the "file_path" field. It's identical to FilePathEQ.
func FilePath(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldFilePath, v))
}

// FileType applies equality check predicate on the "file_type" field. It's identical to FileTypeEQ.
func FileType(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldFileType, v))
}

// ChatID applies equality check predicate on the "chat_id" field. It's identical to ChatIDEQ.
func ChatID(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldChatID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUserID, v))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldText, v))
}

// TextIsNil applies the IsNil predicate on the "text" field.
func TextIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldText))
}

// TextNotNil applies the NotNil predicate on the "text" field.
func TextNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldText))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldText, v))
}

// SendedAtEQ applies the EQ predicate on the "sended_at" field.
func SendedAtEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSendedAt, v))
}

// SendedAtNEQ applies the NEQ predicate on the "sended_at" field.
func SendedAtNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldSendedAt, v))
}

// SendedAtIn applies the In predicate on the "sended_at" field.
func SendedAtIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldSendedAt, vs...))
}

// SendedAtNotIn applies the NotIn predicate on the "sended_at" field.
func SendedAtNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldSendedAt, vs...))
}

// SendedAtGT applies the GT predicate on the "sended_at" field.
func SendedAtGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldSendedAt, v))
}

// SendedAtGTE applies the GTE predicate on the "sended_at" field.
func SendedAtGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldSendedAt, v))
}

// SendedAtLT applies the LT predicate on the "sended_at" field.
func SendedAtLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldSendedAt, v))
}

// SendedAtLTE applies the LTE predicate on the "sended_at" field.
func SendedAtLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldSendedAt, v))
}

// SendedAtContains applies the Contains predicate on the "sended_at" field.
func SendedAtContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldSendedAt, v))
}

// SendedAtHasPrefix applies the HasPrefix predicate on the "sended_at" field.
func SendedAtHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldSendedAt, v))
}

// SendedAtHasSuffix applies the HasSuffix predicate on the "sended_at" field.
func SendedAtHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldSendedAt, v))
}

// SendedAtIsNil applies the IsNil predicate on the "sended_at" field.
func SendedAtIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldSendedAt))
}

// SendedAtNotNil applies the NotNil predicate on the "sended_at" field.
func SendedAtNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldSendedAt))
}

// SendedAtEqualFold applies the EqualFold predicate on the "sended_at" field.
func SendedAtEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldSendedAt, v))
}

// SendedAtContainsFold applies the ContainsFold predicate on the "sended_at" field.
func SendedAtContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldSendedAt, v))
}

// FilePathEQ applies the EQ predicate on the "file_path" field.
func FilePathEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldFilePath, v))
}

// FilePathNEQ applies the NEQ predicate on the "file_path" field.
func FilePathNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldFilePath, v))
}

// FilePathIn applies the In predicate on the "file_path" field.
func FilePathIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldFilePath, vs...))
}

// FilePathNotIn applies the NotIn predicate on the "file_path" field.
func FilePathNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldFilePath, vs...))
}

// FilePathGT applies the GT predicate on the "file_path" field.
func FilePathGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldFilePath, v))
}

// FilePathGTE applies the GTE predicate on the "file_path" field.
func FilePathGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldFilePath, v))
}

// FilePathLT applies the LT predicate on the "file_path" field.
func FilePathLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldFilePath, v))
}

// FilePathLTE applies the LTE predicate on the "file_path" field.
func FilePathLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldFilePath, v))
}

// FilePathContains applies the Contains predicate on the "file_path" field.
func FilePathContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldFilePath, v))
}

// FilePathHasPrefix applies the HasPrefix predicate on the "file_path" field.
func FilePathHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldFilePath, v))
}

// FilePathHasSuffix applies the HasSuffix predicate on the "file_path" field.
func FilePathHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldFilePath, v))
}

// FilePathIsNil applies the IsNil predicate on the "file_path" field.
func FilePathIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldFilePath))
}

// FilePathNotNil applies the NotNil predicate on the "file_path" field.
func FilePathNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldFilePath))
}

// FilePathEqualFold applies the EqualFold predicate on the "file_path" field.
func FilePathEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldFilePath, v))
}

// FilePathContainsFold applies the ContainsFold predicate on the "file_path" field.
func FilePathContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldFilePath, v))
}

// FileTypeEQ applies the EQ predicate on the "file_type" field.
func FileTypeEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldFileType, v))
}

// FileTypeNEQ applies the NEQ predicate on the "file_type" field.
func FileTypeNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldFileType, v))
}

// FileTypeIn applies the In predicate on the "file_type" field.
func FileTypeIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldFileType, vs...))
}

// FileTypeNotIn applies the NotIn predicate on the "file_type" field.
func FileTypeNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldFileType, vs...))
}

// FileTypeGT applies the GT predicate on the "file_type" field.
func FileTypeGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldFileType, v))
}

// FileTypeGTE applies the GTE predicate on the "file_type" field.
func FileTypeGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldFileType, v))
}

// FileTypeLT applies the LT predicate on the "file_type" field.
func FileTypeLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldFileType, v))
}

// FileTypeLTE applies the LTE predicate on the "file_type" field.
func FileTypeLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldFileType, v))
}

// FileTypeContains applies the Contains predicate on the "file_type" field.
func FileTypeContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldFileType, v))
}

// FileTypeHasPrefix applies the HasPrefix predicate on the "file_type" field.
func FileTypeHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldFileType, v))
}

// FileTypeHasSuffix applies the HasSuffix predicate on the "file_type" field.
func FileTypeHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldFileType, v))
}

// FileTypeIsNil applies the IsNil predicate on the "file_type" field.
func FileTypeIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldFileType))
}

// FileTypeNotNil applies the NotNil predicate on the "file_type" field.
func FileTypeNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldFileType))
}

// FileTypeEqualFold applies the EqualFold predicate on the "file_type" field.
func FileTypeEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldFileType, v))
}

// FileTypeContainsFold applies the ContainsFold predicate on the "file_type" field.
func FileTypeContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldFileType, v))
}

// ChatIDEQ applies the EQ predicate on the "chat_id" field.
func ChatIDEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldChatID, v))
}

// ChatIDNEQ applies the NEQ predicate on the "chat_id" field.
func ChatIDNEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldChatID, v))
}

// ChatIDIn applies the In predicate on the "chat_id" field.
func ChatIDIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldChatID, vs...))
}

// ChatIDNotIn applies the NotIn predicate on the "chat_id" field.
func ChatIDNotIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldChatID, vs...))
}

// ChatIDIsNil applies the IsNil predicate on the "chat_id" field.
func ChatIDIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldChatID))
}

// ChatIDNotNil applies the NotNil predicate on the "chat_id" field.
func ChatIDNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldChatID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldUserID))
}

// HasChat applies the HasEdge predicate on the "chat" edge.
func HasChat() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChatTable, ChatColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChatWith applies the HasEdge predicate on the "chat" edge with a given conditions (other predicates).
func HasChatWith(preds ...predicate.Chat) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newChatStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(sql.NotPredicates(p))
}
