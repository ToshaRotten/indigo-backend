// Code generated by ent, DO NOT EDIT.

package typeofpackaging

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the typeofpackaging type in the database.
	Label = "type_of_packaging"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeTypeOfPackaging holds the string denoting the type_of_packaging edge name in mutations.
	EdgeTypeOfPackaging = "type_of_packaging"
	// Table holds the table name of the typeofpackaging in the database.
	Table = "type_of_packagings"
	// TypeOfPackagingTable is the table that holds the type_of_packaging relation/edge.
	TypeOfPackagingTable = "products"
	// TypeOfPackagingInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	TypeOfPackagingInverseTable = "products"
	// TypeOfPackagingColumn is the table column denoting the type_of_packaging relation/edge.
	TypeOfPackagingColumn = "type_of_packaging_id"
)

// Columns holds all SQL columns for typeofpackaging fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the TypeOfPackaging queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTypeOfPackagingCount orders the results by type_of_packaging count.
func ByTypeOfPackagingCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTypeOfPackagingStep(), opts...)
	}
}

// ByTypeOfPackaging orders the results by type_of_packaging terms.
func ByTypeOfPackaging(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTypeOfPackagingStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTypeOfPackagingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TypeOfPackagingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TypeOfPackagingTable, TypeOfPackagingColumn),
	)
}
