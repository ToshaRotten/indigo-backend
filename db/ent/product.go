// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"main/db/ent/product"
	"main/db/ent/productcategory"
	"main/db/ent/typeofpackaging"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight float64 `json:"weight,omitempty"`
	// ProductComposition holds the value of the "product_composition" field.
	ProductComposition string `json:"product_composition,omitempty"`
	// MinStorageTemp holds the value of the "min_storage_temp" field.
	MinStorageTemp int `json:"min_storage_temp,omitempty"`
	// MaxStorageTemp holds the value of the "max_storage_temp" field.
	MaxStorageTemp int `json:"max_storage_temp,omitempty"`
	// ShelfLife holds the value of the "shelf_life" field.
	ShelfLife string `json:"shelf_life,omitempty"`
	// Picture holds the value of the "picture" field.
	Picture string `json:"picture,omitempty"`
	// ProductCategoryID holds the value of the "product_category_id" field.
	ProductCategoryID int `json:"product_category_id,omitempty"`
	// TypeOfPackagingID holds the value of the "type_of_packaging_id" field.
	TypeOfPackagingID int `json:"type_of_packaging_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuery when eager-loading is set.
	Edges        ProductEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProductEdges holds the relations/edges for other nodes in the graph.
type ProductEdges struct {
	// OrderDetailProduct holds the value of the order_detail_product edge.
	OrderDetailProduct []*OrderDetail `json:"order_detail_product,omitempty"`
	// ShoppingCartProduct holds the value of the shopping_cart_product edge.
	ShoppingCartProduct []*ShoppingCart `json:"shopping_cart_product,omitempty"`
	// ProductPriceProduct holds the value of the product_price_product edge.
	ProductPriceProduct []*ProductPrice `json:"product_price_product,omitempty"`
	// ProductCategory holds the value of the product_category edge.
	ProductCategory *ProductCategory `json:"product_category,omitempty"`
	// TypeOfPackagingProduct holds the value of the type_of_packaging_product edge.
	TypeOfPackagingProduct *TypeOfPackaging `json:"type_of_packaging_product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// OrderDetailProductOrErr returns the OrderDetailProduct value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) OrderDetailProductOrErr() ([]*OrderDetail, error) {
	if e.loadedTypes[0] {
		return e.OrderDetailProduct, nil
	}
	return nil, &NotLoadedError{edge: "order_detail_product"}
}

// ShoppingCartProductOrErr returns the ShoppingCartProduct value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) ShoppingCartProductOrErr() ([]*ShoppingCart, error) {
	if e.loadedTypes[1] {
		return e.ShoppingCartProduct, nil
	}
	return nil, &NotLoadedError{edge: "shopping_cart_product"}
}

// ProductPriceProductOrErr returns the ProductPriceProduct value or an error if the edge
// was not loaded in eager-loading.
func (e ProductEdges) ProductPriceProductOrErr() ([]*ProductPrice, error) {
	if e.loadedTypes[2] {
		return e.ProductPriceProduct, nil
	}
	return nil, &NotLoadedError{edge: "product_price_product"}
}

// ProductCategoryOrErr returns the ProductCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) ProductCategoryOrErr() (*ProductCategory, error) {
	if e.ProductCategory != nil {
		return e.ProductCategory, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: productcategory.Label}
	}
	return nil, &NotLoadedError{edge: "product_category"}
}

// TypeOfPackagingProductOrErr returns the TypeOfPackagingProduct value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) TypeOfPackagingProductOrErr() (*TypeOfPackaging, error) {
	if e.TypeOfPackagingProduct != nil {
		return e.TypeOfPackagingProduct, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: typeofpackaging.Label}
	}
	return nil, &NotLoadedError{edge: "type_of_packaging_product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldWeight:
			values[i] = new(sql.NullFloat64)
		case product.FieldID, product.FieldMinStorageTemp, product.FieldMaxStorageTemp, product.FieldProductCategoryID, product.FieldTypeOfPackagingID:
			values[i] = new(sql.NullInt64)
		case product.FieldName, product.FieldProductComposition, product.FieldShelfLife, product.FieldPicture:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case product.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case product.FieldWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				pr.Weight = value.Float64
			}
		case product.FieldProductComposition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_composition", values[i])
			} else if value.Valid {
				pr.ProductComposition = value.String
			}
		case product.FieldMinStorageTemp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field min_storage_temp", values[i])
			} else if value.Valid {
				pr.MinStorageTemp = int(value.Int64)
			}
		case product.FieldMaxStorageTemp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_storage_temp", values[i])
			} else if value.Valid {
				pr.MaxStorageTemp = int(value.Int64)
			}
		case product.FieldShelfLife:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shelf_life", values[i])
			} else if value.Valid {
				pr.ShelfLife = value.String
			}
		case product.FieldPicture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field picture", values[i])
			} else if value.Valid {
				pr.Picture = value.String
			}
		case product.FieldProductCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_category_id", values[i])
			} else if value.Valid {
				pr.ProductCategoryID = int(value.Int64)
			}
		case product.FieldTypeOfPackagingID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type_of_packaging_id", values[i])
			} else if value.Valid {
				pr.TypeOfPackagingID = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Product.
// This includes values selected through modifiers, order, etc.
func (pr *Product) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryOrderDetailProduct queries the "order_detail_product" edge of the Product entity.
func (pr *Product) QueryOrderDetailProduct() *OrderDetailQuery {
	return NewProductClient(pr.config).QueryOrderDetailProduct(pr)
}

// QueryShoppingCartProduct queries the "shopping_cart_product" edge of the Product entity.
func (pr *Product) QueryShoppingCartProduct() *ShoppingCartQuery {
	return NewProductClient(pr.config).QueryShoppingCartProduct(pr)
}

// QueryProductPriceProduct queries the "product_price_product" edge of the Product entity.
func (pr *Product) QueryProductPriceProduct() *ProductPriceQuery {
	return NewProductClient(pr.config).QueryProductPriceProduct(pr)
}

// QueryProductCategory queries the "product_category" edge of the Product entity.
func (pr *Product) QueryProductCategory() *ProductCategoryQuery {
	return NewProductClient(pr.config).QueryProductCategory(pr)
}

// QueryTypeOfPackagingProduct queries the "type_of_packaging_product" edge of the Product entity.
func (pr *Product) QueryTypeOfPackagingProduct() *TypeOfPackagingQuery {
	return NewProductClient(pr.config).QueryTypeOfPackagingProduct(pr)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return NewProductClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", pr.Weight))
	builder.WriteString(", ")
	builder.WriteString("product_composition=")
	builder.WriteString(pr.ProductComposition)
	builder.WriteString(", ")
	builder.WriteString("min_storage_temp=")
	builder.WriteString(fmt.Sprintf("%v", pr.MinStorageTemp))
	builder.WriteString(", ")
	builder.WriteString("max_storage_temp=")
	builder.WriteString(fmt.Sprintf("%v", pr.MaxStorageTemp))
	builder.WriteString(", ")
	builder.WriteString("shelf_life=")
	builder.WriteString(pr.ShelfLife)
	builder.WriteString(", ")
	builder.WriteString("picture=")
	builder.WriteString(pr.Picture)
	builder.WriteString(", ")
	builder.WriteString("product_category_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProductCategoryID))
	builder.WriteString(", ")
	builder.WriteString("type_of_packaging_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.TypeOfPackagingID))
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product
