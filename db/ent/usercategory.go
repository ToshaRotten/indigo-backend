// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"main/db/ent/usercategory"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserCategory is the model entity for the UserCategory schema.
type UserCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserCategoryQuery when eager-loading is set.
	Edges        UserCategoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserCategoryEdges holds the relations/edges for other nodes in the graph.
type UserCategoryEdges struct {
	// UserCategoryUser holds the value of the user_category_user edge.
	UserCategoryUser []*User `json:"user_category_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserCategoryUserOrErr returns the UserCategoryUser value or an error if the edge
// was not loaded in eager-loading.
func (e UserCategoryEdges) UserCategoryUserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.UserCategoryUser, nil
	}
	return nil, &NotLoadedError{edge: "user_category_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usercategory.FieldID:
			values[i] = new(sql.NullInt64)
		case usercategory.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserCategory fields.
func (uc *UserCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usercategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uc.ID = int(value.Int64)
		case usercategory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				uc.Name = value.String
			}
		default:
			uc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserCategory.
// This includes values selected through modifiers, order, etc.
func (uc *UserCategory) Value(name string) (ent.Value, error) {
	return uc.selectValues.Get(name)
}

// QueryUserCategoryUser queries the "user_category_user" edge of the UserCategory entity.
func (uc *UserCategory) QueryUserCategoryUser() *UserQuery {
	return NewUserCategoryClient(uc.config).QueryUserCategoryUser(uc)
}

// Update returns a builder for updating this UserCategory.
// Note that you need to call UserCategory.Unwrap() before calling this method if this UserCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (uc *UserCategory) Update() *UserCategoryUpdateOne {
	return NewUserCategoryClient(uc.config).UpdateOne(uc)
}

// Unwrap unwraps the UserCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uc *UserCategory) Unwrap() *UserCategory {
	_tx, ok := uc.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserCategory is not a transactional entity")
	}
	uc.config.driver = _tx.drv
	return uc
}

// String implements the fmt.Stringer.
func (uc *UserCategory) String() string {
	var builder strings.Builder
	builder.WriteString("UserCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uc.ID))
	builder.WriteString("name=")
	builder.WriteString(uc.Name)
	builder.WriteByte(')')
	return builder.String()
}

// UserCategories is a parsable slice of UserCategory.
type UserCategories []*UserCategory
