// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"main/db/ent/user"
	"main/db/ent/usercategory"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FullName holds the value of the "full_name" field.
	FullName string `json:"full_name,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// PasswordHash holds the value of the "password_hash" field.
	PasswordHash string `json:"password_hash,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phone_number,omitempty"`
	// UserCategoryID holds the value of the "user_category_id" field.
	UserCategoryID int `json:"user_category_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// UserCategory holds the value of the user_category edge.
	UserCategory *UserCategory `json:"user_category,omitempty"`
	// ShoppingCartUser holds the value of the shopping_cart_user edge.
	ShoppingCartUser []*ShoppingCart `json:"shopping_cart_user,omitempty"`
	// UserTokenUser holds the value of the user_token_user edge.
	UserTokenUser []*UserToken `json:"user_token_user,omitempty"`
	// OrderUser holds the value of the order_user edge.
	OrderUser []*Order `json:"order_user,omitempty"`
	// Addresses holds the value of the addresses edge.
	Addresses []*Address `json:"addresses,omitempty"`
	// UserChat holds the value of the user_chat edge.
	UserChat []*Chat `json:"user_chat,omitempty"`
	// UserCard holds the value of the user_card edge.
	UserCard []*Card `json:"user_card,omitempty"`
	// UserMessage holds the value of the user_message edge.
	UserMessage []*Message `json:"user_message,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// UserCategoryOrErr returns the UserCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) UserCategoryOrErr() (*UserCategory, error) {
	if e.UserCategory != nil {
		return e.UserCategory, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: usercategory.Label}
	}
	return nil, &NotLoadedError{edge: "user_category"}
}

// ShoppingCartUserOrErr returns the ShoppingCartUser value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ShoppingCartUserOrErr() ([]*ShoppingCart, error) {
	if e.loadedTypes[1] {
		return e.ShoppingCartUser, nil
	}
	return nil, &NotLoadedError{edge: "shopping_cart_user"}
}

// UserTokenUserOrErr returns the UserTokenUser value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserTokenUserOrErr() ([]*UserToken, error) {
	if e.loadedTypes[2] {
		return e.UserTokenUser, nil
	}
	return nil, &NotLoadedError{edge: "user_token_user"}
}

// OrderUserOrErr returns the OrderUser value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OrderUserOrErr() ([]*Order, error) {
	if e.loadedTypes[3] {
		return e.OrderUser, nil
	}
	return nil, &NotLoadedError{edge: "order_user"}
}

// AddressesOrErr returns the Addresses value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AddressesOrErr() ([]*Address, error) {
	if e.loadedTypes[4] {
		return e.Addresses, nil
	}
	return nil, &NotLoadedError{edge: "addresses"}
}

// UserChatOrErr returns the UserChat value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserChatOrErr() ([]*Chat, error) {
	if e.loadedTypes[5] {
		return e.UserChat, nil
	}
	return nil, &NotLoadedError{edge: "user_chat"}
}

// UserCardOrErr returns the UserCard value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserCardOrErr() ([]*Card, error) {
	if e.loadedTypes[6] {
		return e.UserCard, nil
	}
	return nil, &NotLoadedError{edge: "user_card"}
}

// UserMessageOrErr returns the UserMessage value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserMessageOrErr() ([]*Message, error) {
	if e.loadedTypes[7] {
		return e.UserMessage, nil
	}
	return nil, &NotLoadedError{edge: "user_message"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldUserCategoryID:
			values[i] = new(sql.NullInt64)
		case user.FieldFullName, user.FieldUsername, user.FieldEmail, user.FieldPasswordHash, user.FieldPhoneNumber:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldFullName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_name", values[i])
			} else if value.Valid {
				u.FullName = value.String
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPasswordHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_hash", values[i])
			} else if value.Valid {
				u.PasswordHash = value.String
			}
		case user.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				u.PhoneNumber = value.String
			}
		case user.FieldUserCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_category_id", values[i])
			} else if value.Valid {
				u.UserCategoryID = int(value.Int64)
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryUserCategory queries the "user_category" edge of the User entity.
func (u *User) QueryUserCategory() *UserCategoryQuery {
	return NewUserClient(u.config).QueryUserCategory(u)
}

// QueryShoppingCartUser queries the "shopping_cart_user" edge of the User entity.
func (u *User) QueryShoppingCartUser() *ShoppingCartQuery {
	return NewUserClient(u.config).QueryShoppingCartUser(u)
}

// QueryUserTokenUser queries the "user_token_user" edge of the User entity.
func (u *User) QueryUserTokenUser() *UserTokenQuery {
	return NewUserClient(u.config).QueryUserTokenUser(u)
}

// QueryOrderUser queries the "order_user" edge of the User entity.
func (u *User) QueryOrderUser() *OrderQuery {
	return NewUserClient(u.config).QueryOrderUser(u)
}

// QueryAddresses queries the "addresses" edge of the User entity.
func (u *User) QueryAddresses() *AddressQuery {
	return NewUserClient(u.config).QueryAddresses(u)
}

// QueryUserChat queries the "user_chat" edge of the User entity.
func (u *User) QueryUserChat() *ChatQuery {
	return NewUserClient(u.config).QueryUserChat(u)
}

// QueryUserCard queries the "user_card" edge of the User entity.
func (u *User) QueryUserCard() *CardQuery {
	return NewUserClient(u.config).QueryUserCard(u)
}

// QueryUserMessage queries the "user_message" edge of the User entity.
func (u *User) QueryUserMessage() *MessageQuery {
	return NewUserClient(u.config).QueryUserMessage(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("full_name=")
	builder.WriteString(u.FullName)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("password_hash=")
	builder.WriteString(u.PasswordHash)
	builder.WriteString(", ")
	builder.WriteString("phone_number=")
	builder.WriteString(u.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("user_category_id=")
	builder.WriteString(fmt.Sprintf("%v", u.UserCategoryID))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
