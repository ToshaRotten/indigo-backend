// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/db/ent/orderdetail"
	"main/db/ent/predicate"
	"main/db/ent/product"
	"main/db/ent/productcategory"
	"main/db/ent/productprice"
	"main/db/ent/shoppingcart"
	"main/db/ent/typeofpackaging"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProductUpdate) SetName(s string) *ProductUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// ClearName clears the value of the "name" field.
func (pu *ProductUpdate) ClearName() *ProductUpdate {
	pu.mutation.ClearName()
	return pu
}

// SetWeight sets the "weight" field.
func (pu *ProductUpdate) SetWeight(f float64) *ProductUpdate {
	pu.mutation.ResetWeight()
	pu.mutation.SetWeight(f)
	return pu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableWeight(f *float64) *ProductUpdate {
	if f != nil {
		pu.SetWeight(*f)
	}
	return pu
}

// AddWeight adds f to the "weight" field.
func (pu *ProductUpdate) AddWeight(f float64) *ProductUpdate {
	pu.mutation.AddWeight(f)
	return pu
}

// ClearWeight clears the value of the "weight" field.
func (pu *ProductUpdate) ClearWeight() *ProductUpdate {
	pu.mutation.ClearWeight()
	return pu
}

// SetProductComposition sets the "product_composition" field.
func (pu *ProductUpdate) SetProductComposition(s string) *ProductUpdate {
	pu.mutation.SetProductComposition(s)
	return pu
}

// SetNillableProductComposition sets the "product_composition" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductComposition(s *string) *ProductUpdate {
	if s != nil {
		pu.SetProductComposition(*s)
	}
	return pu
}

// ClearProductComposition clears the value of the "product_composition" field.
func (pu *ProductUpdate) ClearProductComposition() *ProductUpdate {
	pu.mutation.ClearProductComposition()
	return pu
}

// SetMinStorageTemp sets the "min_storage_temp" field.
func (pu *ProductUpdate) SetMinStorageTemp(i int) *ProductUpdate {
	pu.mutation.ResetMinStorageTemp()
	pu.mutation.SetMinStorageTemp(i)
	return pu
}

// SetNillableMinStorageTemp sets the "min_storage_temp" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableMinStorageTemp(i *int) *ProductUpdate {
	if i != nil {
		pu.SetMinStorageTemp(*i)
	}
	return pu
}

// AddMinStorageTemp adds i to the "min_storage_temp" field.
func (pu *ProductUpdate) AddMinStorageTemp(i int) *ProductUpdate {
	pu.mutation.AddMinStorageTemp(i)
	return pu
}

// ClearMinStorageTemp clears the value of the "min_storage_temp" field.
func (pu *ProductUpdate) ClearMinStorageTemp() *ProductUpdate {
	pu.mutation.ClearMinStorageTemp()
	return pu
}

// SetMaxStorageTemp sets the "max_storage_temp" field.
func (pu *ProductUpdate) SetMaxStorageTemp(i int) *ProductUpdate {
	pu.mutation.ResetMaxStorageTemp()
	pu.mutation.SetMaxStorageTemp(i)
	return pu
}

// SetNillableMaxStorageTemp sets the "max_storage_temp" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableMaxStorageTemp(i *int) *ProductUpdate {
	if i != nil {
		pu.SetMaxStorageTemp(*i)
	}
	return pu
}

// AddMaxStorageTemp adds i to the "max_storage_temp" field.
func (pu *ProductUpdate) AddMaxStorageTemp(i int) *ProductUpdate {
	pu.mutation.AddMaxStorageTemp(i)
	return pu
}

// ClearMaxStorageTemp clears the value of the "max_storage_temp" field.
func (pu *ProductUpdate) ClearMaxStorageTemp() *ProductUpdate {
	pu.mutation.ClearMaxStorageTemp()
	return pu
}

// SetShelfLife sets the "shelf_life" field.
func (pu *ProductUpdate) SetShelfLife(s string) *ProductUpdate {
	pu.mutation.SetShelfLife(s)
	return pu
}

// SetNillableShelfLife sets the "shelf_life" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableShelfLife(s *string) *ProductUpdate {
	if s != nil {
		pu.SetShelfLife(*s)
	}
	return pu
}

// ClearShelfLife clears the value of the "shelf_life" field.
func (pu *ProductUpdate) ClearShelfLife() *ProductUpdate {
	pu.mutation.ClearShelfLife()
	return pu
}

// SetPicture sets the "picture" field.
func (pu *ProductUpdate) SetPicture(s string) *ProductUpdate {
	pu.mutation.SetPicture(s)
	return pu
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePicture(s *string) *ProductUpdate {
	if s != nil {
		pu.SetPicture(*s)
	}
	return pu
}

// ClearPicture clears the value of the "picture" field.
func (pu *ProductUpdate) ClearPicture() *ProductUpdate {
	pu.mutation.ClearPicture()
	return pu
}

// SetProductCategoryID sets the "product_category_id" field.
func (pu *ProductUpdate) SetProductCategoryID(i int) *ProductUpdate {
	pu.mutation.SetProductCategoryID(i)
	return pu
}

// SetNillableProductCategoryID sets the "product_category_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductCategoryID(i *int) *ProductUpdate {
	if i != nil {
		pu.SetProductCategoryID(*i)
	}
	return pu
}

// ClearProductCategoryID clears the value of the "product_category_id" field.
func (pu *ProductUpdate) ClearProductCategoryID() *ProductUpdate {
	pu.mutation.ClearProductCategoryID()
	return pu
}

// SetTypeOfPackagingID sets the "type_of_packaging_id" field.
func (pu *ProductUpdate) SetTypeOfPackagingID(i int) *ProductUpdate {
	pu.mutation.SetTypeOfPackagingID(i)
	return pu
}

// SetNillableTypeOfPackagingID sets the "type_of_packaging_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableTypeOfPackagingID(i *int) *ProductUpdate {
	if i != nil {
		pu.SetTypeOfPackagingID(*i)
	}
	return pu
}

// ClearTypeOfPackagingID clears the value of the "type_of_packaging_id" field.
func (pu *ProductUpdate) ClearTypeOfPackagingID() *ProductUpdate {
	pu.mutation.ClearTypeOfPackagingID()
	return pu
}

// AddOrderDetailProductIDs adds the "order_detail_product" edge to the OrderDetail entity by IDs.
func (pu *ProductUpdate) AddOrderDetailProductIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddOrderDetailProductIDs(ids...)
	return pu
}

// AddOrderDetailProduct adds the "order_detail_product" edges to the OrderDetail entity.
func (pu *ProductUpdate) AddOrderDetailProduct(o ...*OrderDetail) *ProductUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddOrderDetailProductIDs(ids...)
}

// AddShoppingCartProductIDs adds the "shopping_cart_product" edge to the ShoppingCart entity by IDs.
func (pu *ProductUpdate) AddShoppingCartProductIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddShoppingCartProductIDs(ids...)
	return pu
}

// AddShoppingCartProduct adds the "shopping_cart_product" edges to the ShoppingCart entity.
func (pu *ProductUpdate) AddShoppingCartProduct(s ...*ShoppingCart) *ProductUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddShoppingCartProductIDs(ids...)
}

// AddProductPriceProductIDs adds the "product_price_product" edge to the ProductPrice entity by IDs.
func (pu *ProductUpdate) AddProductPriceProductIDs(ids ...int) *ProductUpdate {
	pu.mutation.AddProductPriceProductIDs(ids...)
	return pu
}

// AddProductPriceProduct adds the "product_price_product" edges to the ProductPrice entity.
func (pu *ProductUpdate) AddProductPriceProduct(p ...*ProductPrice) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddProductPriceProductIDs(ids...)
}

// SetProductCategory sets the "product_category" edge to the ProductCategory entity.
func (pu *ProductUpdate) SetProductCategory(p *ProductCategory) *ProductUpdate {
	return pu.SetProductCategoryID(p.ID)
}

// SetTypeOfPackagingProductID sets the "type_of_packaging_product" edge to the TypeOfPackaging entity by ID.
func (pu *ProductUpdate) SetTypeOfPackagingProductID(id int) *ProductUpdate {
	pu.mutation.SetTypeOfPackagingProductID(id)
	return pu
}

// SetNillableTypeOfPackagingProductID sets the "type_of_packaging_product" edge to the TypeOfPackaging entity by ID if the given value is not nil.
func (pu *ProductUpdate) SetNillableTypeOfPackagingProductID(id *int) *ProductUpdate {
	if id != nil {
		pu = pu.SetTypeOfPackagingProductID(*id)
	}
	return pu
}

// SetTypeOfPackagingProduct sets the "type_of_packaging_product" edge to the TypeOfPackaging entity.
func (pu *ProductUpdate) SetTypeOfPackagingProduct(t *TypeOfPackaging) *ProductUpdate {
	return pu.SetTypeOfPackagingProductID(t.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearOrderDetailProduct clears all "order_detail_product" edges to the OrderDetail entity.
func (pu *ProductUpdate) ClearOrderDetailProduct() *ProductUpdate {
	pu.mutation.ClearOrderDetailProduct()
	return pu
}

// RemoveOrderDetailProductIDs removes the "order_detail_product" edge to OrderDetail entities by IDs.
func (pu *ProductUpdate) RemoveOrderDetailProductIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveOrderDetailProductIDs(ids...)
	return pu
}

// RemoveOrderDetailProduct removes "order_detail_product" edges to OrderDetail entities.
func (pu *ProductUpdate) RemoveOrderDetailProduct(o ...*OrderDetail) *ProductUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemoveOrderDetailProductIDs(ids...)
}

// ClearShoppingCartProduct clears all "shopping_cart_product" edges to the ShoppingCart entity.
func (pu *ProductUpdate) ClearShoppingCartProduct() *ProductUpdate {
	pu.mutation.ClearShoppingCartProduct()
	return pu
}

// RemoveShoppingCartProductIDs removes the "shopping_cart_product" edge to ShoppingCart entities by IDs.
func (pu *ProductUpdate) RemoveShoppingCartProductIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveShoppingCartProductIDs(ids...)
	return pu
}

// RemoveShoppingCartProduct removes "shopping_cart_product" edges to ShoppingCart entities.
func (pu *ProductUpdate) RemoveShoppingCartProduct(s ...*ShoppingCart) *ProductUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveShoppingCartProductIDs(ids...)
}

// ClearProductPriceProduct clears all "product_price_product" edges to the ProductPrice entity.
func (pu *ProductUpdate) ClearProductPriceProduct() *ProductUpdate {
	pu.mutation.ClearProductPriceProduct()
	return pu
}

// RemoveProductPriceProductIDs removes the "product_price_product" edge to ProductPrice entities by IDs.
func (pu *ProductUpdate) RemoveProductPriceProductIDs(ids ...int) *ProductUpdate {
	pu.mutation.RemoveProductPriceProductIDs(ids...)
	return pu
}

// RemoveProductPriceProduct removes "product_price_product" edges to ProductPrice entities.
func (pu *ProductUpdate) RemoveProductPriceProduct(p ...*ProductPrice) *ProductUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveProductPriceProductIDs(ids...)
}

// ClearProductCategory clears the "product_category" edge to the ProductCategory entity.
func (pu *ProductUpdate) ClearProductCategory() *ProductUpdate {
	pu.mutation.ClearProductCategory()
	return pu
}

// ClearTypeOfPackagingProduct clears the "type_of_packaging_product" edge to the TypeOfPackaging entity.
func (pu *ProductUpdate) ClearTypeOfPackagingProduct() *ProductUpdate {
	pu.mutation.ClearTypeOfPackagingProduct()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ProductComposition(); ok {
		if err := product.ProductCompositionValidator(v); err != nil {
			return &ValidationError{Name: "product_composition", err: fmt.Errorf(`ent: validator failed for field "Product.product_composition": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ShelfLife(); ok {
		if err := product.ShelfLifeValidator(v); err != nil {
			return &ValidationError{Name: "shelf_life", err: fmt.Errorf(`ent: validator failed for field "Product.shelf_life": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Picture(); ok {
		if err := product.PictureValidator(v); err != nil {
			return &ValidationError{Name: "picture", err: fmt.Errorf(`ent: validator failed for field "Product.picture": %w`, err)}
		}
	}
	return nil
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if pu.mutation.NameCleared() {
		_spec.ClearField(product.FieldName, field.TypeString)
	}
	if value, ok := pu.mutation.Weight(); ok {
		_spec.SetField(product.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedWeight(); ok {
		_spec.AddField(product.FieldWeight, field.TypeFloat64, value)
	}
	if pu.mutation.WeightCleared() {
		_spec.ClearField(product.FieldWeight, field.TypeFloat64)
	}
	if value, ok := pu.mutation.ProductComposition(); ok {
		_spec.SetField(product.FieldProductComposition, field.TypeString, value)
	}
	if pu.mutation.ProductCompositionCleared() {
		_spec.ClearField(product.FieldProductComposition, field.TypeString)
	}
	if value, ok := pu.mutation.MinStorageTemp(); ok {
		_spec.SetField(product.FieldMinStorageTemp, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedMinStorageTemp(); ok {
		_spec.AddField(product.FieldMinStorageTemp, field.TypeInt, value)
	}
	if pu.mutation.MinStorageTempCleared() {
		_spec.ClearField(product.FieldMinStorageTemp, field.TypeInt)
	}
	if value, ok := pu.mutation.MaxStorageTemp(); ok {
		_spec.SetField(product.FieldMaxStorageTemp, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedMaxStorageTemp(); ok {
		_spec.AddField(product.FieldMaxStorageTemp, field.TypeInt, value)
	}
	if pu.mutation.MaxStorageTempCleared() {
		_spec.ClearField(product.FieldMaxStorageTemp, field.TypeInt)
	}
	if value, ok := pu.mutation.ShelfLife(); ok {
		_spec.SetField(product.FieldShelfLife, field.TypeString, value)
	}
	if pu.mutation.ShelfLifeCleared() {
		_spec.ClearField(product.FieldShelfLife, field.TypeString)
	}
	if value, ok := pu.mutation.Picture(); ok {
		_spec.SetField(product.FieldPicture, field.TypeString, value)
	}
	if pu.mutation.PictureCleared() {
		_spec.ClearField(product.FieldPicture, field.TypeString)
	}
	if pu.mutation.OrderDetailProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderDetailProductTable,
			Columns: []string{product.OrderDetailProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOrderDetailProductIDs(); len(nodes) > 0 && !pu.mutation.OrderDetailProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderDetailProductTable,
			Columns: []string{product.OrderDetailProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OrderDetailProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderDetailProductTable,
			Columns: []string{product.OrderDetailProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ShoppingCartProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ShoppingCartProductTable,
			Columns: []string{product.ShoppingCartProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedShoppingCartProductIDs(); len(nodes) > 0 && !pu.mutation.ShoppingCartProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ShoppingCartProductTable,
			Columns: []string{product.ShoppingCartProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ShoppingCartProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ShoppingCartProductTable,
			Columns: []string{product.ShoppingCartProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProductPriceProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPriceProductTable,
			Columns: []string{product.ProductPriceProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productprice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedProductPriceProductIDs(); len(nodes) > 0 && !pu.mutation.ProductPriceProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPriceProductTable,
			Columns: []string{product.ProductPriceProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productprice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProductPriceProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPriceProductTable,
			Columns: []string{product.ProductPriceProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productprice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProductCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.ProductCategoryTable,
			Columns: []string{product.ProductCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProductCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.ProductCategoryTable,
			Columns: []string{product.ProductCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TypeOfPackagingProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.TypeOfPackagingProductTable,
			Columns: []string{product.TypeOfPackagingProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(typeofpackaging.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TypeOfPackagingProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.TypeOfPackagingProductTable,
			Columns: []string{product.TypeOfPackagingProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(typeofpackaging.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetName sets the "name" field.
func (puo *ProductUpdateOne) SetName(s string) *ProductUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// ClearName clears the value of the "name" field.
func (puo *ProductUpdateOne) ClearName() *ProductUpdateOne {
	puo.mutation.ClearName()
	return puo
}

// SetWeight sets the "weight" field.
func (puo *ProductUpdateOne) SetWeight(f float64) *ProductUpdateOne {
	puo.mutation.ResetWeight()
	puo.mutation.SetWeight(f)
	return puo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableWeight(f *float64) *ProductUpdateOne {
	if f != nil {
		puo.SetWeight(*f)
	}
	return puo
}

// AddWeight adds f to the "weight" field.
func (puo *ProductUpdateOne) AddWeight(f float64) *ProductUpdateOne {
	puo.mutation.AddWeight(f)
	return puo
}

// ClearWeight clears the value of the "weight" field.
func (puo *ProductUpdateOne) ClearWeight() *ProductUpdateOne {
	puo.mutation.ClearWeight()
	return puo
}

// SetProductComposition sets the "product_composition" field.
func (puo *ProductUpdateOne) SetProductComposition(s string) *ProductUpdateOne {
	puo.mutation.SetProductComposition(s)
	return puo
}

// SetNillableProductComposition sets the "product_composition" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductComposition(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetProductComposition(*s)
	}
	return puo
}

// ClearProductComposition clears the value of the "product_composition" field.
func (puo *ProductUpdateOne) ClearProductComposition() *ProductUpdateOne {
	puo.mutation.ClearProductComposition()
	return puo
}

// SetMinStorageTemp sets the "min_storage_temp" field.
func (puo *ProductUpdateOne) SetMinStorageTemp(i int) *ProductUpdateOne {
	puo.mutation.ResetMinStorageTemp()
	puo.mutation.SetMinStorageTemp(i)
	return puo
}

// SetNillableMinStorageTemp sets the "min_storage_temp" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableMinStorageTemp(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetMinStorageTemp(*i)
	}
	return puo
}

// AddMinStorageTemp adds i to the "min_storage_temp" field.
func (puo *ProductUpdateOne) AddMinStorageTemp(i int) *ProductUpdateOne {
	puo.mutation.AddMinStorageTemp(i)
	return puo
}

// ClearMinStorageTemp clears the value of the "min_storage_temp" field.
func (puo *ProductUpdateOne) ClearMinStorageTemp() *ProductUpdateOne {
	puo.mutation.ClearMinStorageTemp()
	return puo
}

// SetMaxStorageTemp sets the "max_storage_temp" field.
func (puo *ProductUpdateOne) SetMaxStorageTemp(i int) *ProductUpdateOne {
	puo.mutation.ResetMaxStorageTemp()
	puo.mutation.SetMaxStorageTemp(i)
	return puo
}

// SetNillableMaxStorageTemp sets the "max_storage_temp" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableMaxStorageTemp(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetMaxStorageTemp(*i)
	}
	return puo
}

// AddMaxStorageTemp adds i to the "max_storage_temp" field.
func (puo *ProductUpdateOne) AddMaxStorageTemp(i int) *ProductUpdateOne {
	puo.mutation.AddMaxStorageTemp(i)
	return puo
}

// ClearMaxStorageTemp clears the value of the "max_storage_temp" field.
func (puo *ProductUpdateOne) ClearMaxStorageTemp() *ProductUpdateOne {
	puo.mutation.ClearMaxStorageTemp()
	return puo
}

// SetShelfLife sets the "shelf_life" field.
func (puo *ProductUpdateOne) SetShelfLife(s string) *ProductUpdateOne {
	puo.mutation.SetShelfLife(s)
	return puo
}

// SetNillableShelfLife sets the "shelf_life" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableShelfLife(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetShelfLife(*s)
	}
	return puo
}

// ClearShelfLife clears the value of the "shelf_life" field.
func (puo *ProductUpdateOne) ClearShelfLife() *ProductUpdateOne {
	puo.mutation.ClearShelfLife()
	return puo
}

// SetPicture sets the "picture" field.
func (puo *ProductUpdateOne) SetPicture(s string) *ProductUpdateOne {
	puo.mutation.SetPicture(s)
	return puo
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePicture(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetPicture(*s)
	}
	return puo
}

// ClearPicture clears the value of the "picture" field.
func (puo *ProductUpdateOne) ClearPicture() *ProductUpdateOne {
	puo.mutation.ClearPicture()
	return puo
}

// SetProductCategoryID sets the "product_category_id" field.
func (puo *ProductUpdateOne) SetProductCategoryID(i int) *ProductUpdateOne {
	puo.mutation.SetProductCategoryID(i)
	return puo
}

// SetNillableProductCategoryID sets the "product_category_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductCategoryID(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetProductCategoryID(*i)
	}
	return puo
}

// ClearProductCategoryID clears the value of the "product_category_id" field.
func (puo *ProductUpdateOne) ClearProductCategoryID() *ProductUpdateOne {
	puo.mutation.ClearProductCategoryID()
	return puo
}

// SetTypeOfPackagingID sets the "type_of_packaging_id" field.
func (puo *ProductUpdateOne) SetTypeOfPackagingID(i int) *ProductUpdateOne {
	puo.mutation.SetTypeOfPackagingID(i)
	return puo
}

// SetNillableTypeOfPackagingID sets the "type_of_packaging_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableTypeOfPackagingID(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetTypeOfPackagingID(*i)
	}
	return puo
}

// ClearTypeOfPackagingID clears the value of the "type_of_packaging_id" field.
func (puo *ProductUpdateOne) ClearTypeOfPackagingID() *ProductUpdateOne {
	puo.mutation.ClearTypeOfPackagingID()
	return puo
}

// AddOrderDetailProductIDs adds the "order_detail_product" edge to the OrderDetail entity by IDs.
func (puo *ProductUpdateOne) AddOrderDetailProductIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddOrderDetailProductIDs(ids...)
	return puo
}

// AddOrderDetailProduct adds the "order_detail_product" edges to the OrderDetail entity.
func (puo *ProductUpdateOne) AddOrderDetailProduct(o ...*OrderDetail) *ProductUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddOrderDetailProductIDs(ids...)
}

// AddShoppingCartProductIDs adds the "shopping_cart_product" edge to the ShoppingCart entity by IDs.
func (puo *ProductUpdateOne) AddShoppingCartProductIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddShoppingCartProductIDs(ids...)
	return puo
}

// AddShoppingCartProduct adds the "shopping_cart_product" edges to the ShoppingCart entity.
func (puo *ProductUpdateOne) AddShoppingCartProduct(s ...*ShoppingCart) *ProductUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddShoppingCartProductIDs(ids...)
}

// AddProductPriceProductIDs adds the "product_price_product" edge to the ProductPrice entity by IDs.
func (puo *ProductUpdateOne) AddProductPriceProductIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.AddProductPriceProductIDs(ids...)
	return puo
}

// AddProductPriceProduct adds the "product_price_product" edges to the ProductPrice entity.
func (puo *ProductUpdateOne) AddProductPriceProduct(p ...*ProductPrice) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddProductPriceProductIDs(ids...)
}

// SetProductCategory sets the "product_category" edge to the ProductCategory entity.
func (puo *ProductUpdateOne) SetProductCategory(p *ProductCategory) *ProductUpdateOne {
	return puo.SetProductCategoryID(p.ID)
}

// SetTypeOfPackagingProductID sets the "type_of_packaging_product" edge to the TypeOfPackaging entity by ID.
func (puo *ProductUpdateOne) SetTypeOfPackagingProductID(id int) *ProductUpdateOne {
	puo.mutation.SetTypeOfPackagingProductID(id)
	return puo
}

// SetNillableTypeOfPackagingProductID sets the "type_of_packaging_product" edge to the TypeOfPackaging entity by ID if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableTypeOfPackagingProductID(id *int) *ProductUpdateOne {
	if id != nil {
		puo = puo.SetTypeOfPackagingProductID(*id)
	}
	return puo
}

// SetTypeOfPackagingProduct sets the "type_of_packaging_product" edge to the TypeOfPackaging entity.
func (puo *ProductUpdateOne) SetTypeOfPackagingProduct(t *TypeOfPackaging) *ProductUpdateOne {
	return puo.SetTypeOfPackagingProductID(t.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearOrderDetailProduct clears all "order_detail_product" edges to the OrderDetail entity.
func (puo *ProductUpdateOne) ClearOrderDetailProduct() *ProductUpdateOne {
	puo.mutation.ClearOrderDetailProduct()
	return puo
}

// RemoveOrderDetailProductIDs removes the "order_detail_product" edge to OrderDetail entities by IDs.
func (puo *ProductUpdateOne) RemoveOrderDetailProductIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveOrderDetailProductIDs(ids...)
	return puo
}

// RemoveOrderDetailProduct removes "order_detail_product" edges to OrderDetail entities.
func (puo *ProductUpdateOne) RemoveOrderDetailProduct(o ...*OrderDetail) *ProductUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemoveOrderDetailProductIDs(ids...)
}

// ClearShoppingCartProduct clears all "shopping_cart_product" edges to the ShoppingCart entity.
func (puo *ProductUpdateOne) ClearShoppingCartProduct() *ProductUpdateOne {
	puo.mutation.ClearShoppingCartProduct()
	return puo
}

// RemoveShoppingCartProductIDs removes the "shopping_cart_product" edge to ShoppingCart entities by IDs.
func (puo *ProductUpdateOne) RemoveShoppingCartProductIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveShoppingCartProductIDs(ids...)
	return puo
}

// RemoveShoppingCartProduct removes "shopping_cart_product" edges to ShoppingCart entities.
func (puo *ProductUpdateOne) RemoveShoppingCartProduct(s ...*ShoppingCart) *ProductUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveShoppingCartProductIDs(ids...)
}

// ClearProductPriceProduct clears all "product_price_product" edges to the ProductPrice entity.
func (puo *ProductUpdateOne) ClearProductPriceProduct() *ProductUpdateOne {
	puo.mutation.ClearProductPriceProduct()
	return puo
}

// RemoveProductPriceProductIDs removes the "product_price_product" edge to ProductPrice entities by IDs.
func (puo *ProductUpdateOne) RemoveProductPriceProductIDs(ids ...int) *ProductUpdateOne {
	puo.mutation.RemoveProductPriceProductIDs(ids...)
	return puo
}

// RemoveProductPriceProduct removes "product_price_product" edges to ProductPrice entities.
func (puo *ProductUpdateOne) RemoveProductPriceProduct(p ...*ProductPrice) *ProductUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveProductPriceProductIDs(ids...)
}

// ClearProductCategory clears the "product_category" edge to the ProductCategory entity.
func (puo *ProductUpdateOne) ClearProductCategory() *ProductUpdateOne {
	puo.mutation.ClearProductCategory()
	return puo
}

// ClearTypeOfPackagingProduct clears the "type_of_packaging_product" edge to the TypeOfPackaging entity.
func (puo *ProductUpdateOne) ClearTypeOfPackagingProduct() *ProductUpdateOne {
	puo.mutation.ClearTypeOfPackagingProduct()
	return puo
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ProductComposition(); ok {
		if err := product.ProductCompositionValidator(v); err != nil {
			return &ValidationError{Name: "product_composition", err: fmt.Errorf(`ent: validator failed for field "Product.product_composition": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ShelfLife(); ok {
		if err := product.ShelfLifeValidator(v); err != nil {
			return &ValidationError{Name: "shelf_life", err: fmt.Errorf(`ent: validator failed for field "Product.shelf_life": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Picture(); ok {
		if err := product.PictureValidator(v); err != nil {
			return &ValidationError{Name: "picture", err: fmt.Errorf(`ent: validator failed for field "Product.picture": %w`, err)}
		}
	}
	return nil
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
	}
	if puo.mutation.NameCleared() {
		_spec.ClearField(product.FieldName, field.TypeString)
	}
	if value, ok := puo.mutation.Weight(); ok {
		_spec.SetField(product.FieldWeight, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedWeight(); ok {
		_spec.AddField(product.FieldWeight, field.TypeFloat64, value)
	}
	if puo.mutation.WeightCleared() {
		_spec.ClearField(product.FieldWeight, field.TypeFloat64)
	}
	if value, ok := puo.mutation.ProductComposition(); ok {
		_spec.SetField(product.FieldProductComposition, field.TypeString, value)
	}
	if puo.mutation.ProductCompositionCleared() {
		_spec.ClearField(product.FieldProductComposition, field.TypeString)
	}
	if value, ok := puo.mutation.MinStorageTemp(); ok {
		_spec.SetField(product.FieldMinStorageTemp, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedMinStorageTemp(); ok {
		_spec.AddField(product.FieldMinStorageTemp, field.TypeInt, value)
	}
	if puo.mutation.MinStorageTempCleared() {
		_spec.ClearField(product.FieldMinStorageTemp, field.TypeInt)
	}
	if value, ok := puo.mutation.MaxStorageTemp(); ok {
		_spec.SetField(product.FieldMaxStorageTemp, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedMaxStorageTemp(); ok {
		_spec.AddField(product.FieldMaxStorageTemp, field.TypeInt, value)
	}
	if puo.mutation.MaxStorageTempCleared() {
		_spec.ClearField(product.FieldMaxStorageTemp, field.TypeInt)
	}
	if value, ok := puo.mutation.ShelfLife(); ok {
		_spec.SetField(product.FieldShelfLife, field.TypeString, value)
	}
	if puo.mutation.ShelfLifeCleared() {
		_spec.ClearField(product.FieldShelfLife, field.TypeString)
	}
	if value, ok := puo.mutation.Picture(); ok {
		_spec.SetField(product.FieldPicture, field.TypeString, value)
	}
	if puo.mutation.PictureCleared() {
		_spec.ClearField(product.FieldPicture, field.TypeString)
	}
	if puo.mutation.OrderDetailProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderDetailProductTable,
			Columns: []string{product.OrderDetailProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOrderDetailProductIDs(); len(nodes) > 0 && !puo.mutation.OrderDetailProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderDetailProductTable,
			Columns: []string{product.OrderDetailProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OrderDetailProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderDetailProductTable,
			Columns: []string{product.OrderDetailProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ShoppingCartProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ShoppingCartProductTable,
			Columns: []string{product.ShoppingCartProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedShoppingCartProductIDs(); len(nodes) > 0 && !puo.mutation.ShoppingCartProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ShoppingCartProductTable,
			Columns: []string{product.ShoppingCartProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ShoppingCartProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ShoppingCartProductTable,
			Columns: []string{product.ShoppingCartProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProductPriceProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPriceProductTable,
			Columns: []string{product.ProductPriceProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productprice.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedProductPriceProductIDs(); len(nodes) > 0 && !puo.mutation.ProductPriceProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPriceProductTable,
			Columns: []string{product.ProductPriceProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productprice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProductPriceProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPriceProductTable,
			Columns: []string{product.ProductPriceProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productprice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProductCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.ProductCategoryTable,
			Columns: []string{product.ProductCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProductCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.ProductCategoryTable,
			Columns: []string{product.ProductCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TypeOfPackagingProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.TypeOfPackagingProductTable,
			Columns: []string{product.TypeOfPackagingProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(typeofpackaging.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TypeOfPackagingProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.TypeOfPackagingProductTable,
			Columns: []string{product.TypeOfPackagingProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(typeofpackaging.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
