// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"main/db/ent/product"
	"main/db/ent/productprice"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProductPrice is the model entity for the ProductPrice schema.
type ProductPrice struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ModificationDate holds the value of the "modification_date" field.
	ModificationDate time.Time `json:"modification_date,omitempty"`
	// NewPrice holds the value of the "new_price" field.
	NewPrice float64 `json:"new_price,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID int `json:"product_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductPriceQuery when eager-loading is set.
	Edges        ProductPriceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProductPriceEdges holds the relations/edges for other nodes in the graph.
type ProductPriceEdges struct {
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductPriceEdges) ProductOrErr() (*Product, error) {
	if e.Product != nil {
		return e.Product, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: product.Label}
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProductPrice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case productprice.FieldNewPrice:
			values[i] = new(sql.NullFloat64)
		case productprice.FieldID, productprice.FieldProductID:
			values[i] = new(sql.NullInt64)
		case productprice.FieldModificationDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProductPrice fields.
func (pp *ProductPrice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case productprice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pp.ID = int(value.Int64)
		case productprice.FieldModificationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modification_date", values[i])
			} else if value.Valid {
				pp.ModificationDate = value.Time
			}
		case productprice.FieldNewPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field new_price", values[i])
			} else if value.Valid {
				pp.NewPrice = value.Float64
			}
		case productprice.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				pp.ProductID = int(value.Int64)
			}
		default:
			pp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProductPrice.
// This includes values selected through modifiers, order, etc.
func (pp *ProductPrice) Value(name string) (ent.Value, error) {
	return pp.selectValues.Get(name)
}

// QueryProduct queries the "product" edge of the ProductPrice entity.
func (pp *ProductPrice) QueryProduct() *ProductQuery {
	return NewProductPriceClient(pp.config).QueryProduct(pp)
}

// Update returns a builder for updating this ProductPrice.
// Note that you need to call ProductPrice.Unwrap() before calling this method if this ProductPrice
// was returned from a transaction, and the transaction was committed or rolled back.
func (pp *ProductPrice) Update() *ProductPriceUpdateOne {
	return NewProductPriceClient(pp.config).UpdateOne(pp)
}

// Unwrap unwraps the ProductPrice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pp *ProductPrice) Unwrap() *ProductPrice {
	_tx, ok := pp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProductPrice is not a transactional entity")
	}
	pp.config.driver = _tx.drv
	return pp
}

// String implements the fmt.Stringer.
func (pp *ProductPrice) String() string {
	var builder strings.Builder
	builder.WriteString("ProductPrice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pp.ID))
	builder.WriteString("modification_date=")
	builder.WriteString(pp.ModificationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("new_price=")
	builder.WriteString(fmt.Sprintf("%v", pp.NewPrice))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", pp.ProductID))
	builder.WriteByte(')')
	return builder.String()
}

// ProductPrices is a parsable slice of ProductPrice.
type ProductPrices []*ProductPrice
