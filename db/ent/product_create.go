// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"main/db/ent/orderdetail"
	"main/db/ent/product"
	"main/db/ent/productcategory"
	"main/db/ent/productprice"
	"main/db/ent/shoppingcart"
	"main/db/ent/typeofpackaging"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *ProductCreate) SetName(s string) *ProductCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pc *ProductCreate) SetNillableName(s *string) *ProductCreate {
	if s != nil {
		pc.SetName(*s)
	}
	return pc
}

// SetWeight sets the "weight" field.
func (pc *ProductCreate) SetWeight(f float64) *ProductCreate {
	pc.mutation.SetWeight(f)
	return pc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (pc *ProductCreate) SetNillableWeight(f *float64) *ProductCreate {
	if f != nil {
		pc.SetWeight(*f)
	}
	return pc
}

// SetProductComposition sets the "product_composition" field.
func (pc *ProductCreate) SetProductComposition(s string) *ProductCreate {
	pc.mutation.SetProductComposition(s)
	return pc
}

// SetNillableProductComposition sets the "product_composition" field if the given value is not nil.
func (pc *ProductCreate) SetNillableProductComposition(s *string) *ProductCreate {
	if s != nil {
		pc.SetProductComposition(*s)
	}
	return pc
}

// SetMinStorageTemp sets the "min_storage_temp" field.
func (pc *ProductCreate) SetMinStorageTemp(i int) *ProductCreate {
	pc.mutation.SetMinStorageTemp(i)
	return pc
}

// SetNillableMinStorageTemp sets the "min_storage_temp" field if the given value is not nil.
func (pc *ProductCreate) SetNillableMinStorageTemp(i *int) *ProductCreate {
	if i != nil {
		pc.SetMinStorageTemp(*i)
	}
	return pc
}

// SetMaxStorageTemp sets the "max_storage_temp" field.
func (pc *ProductCreate) SetMaxStorageTemp(i int) *ProductCreate {
	pc.mutation.SetMaxStorageTemp(i)
	return pc
}

// SetNillableMaxStorageTemp sets the "max_storage_temp" field if the given value is not nil.
func (pc *ProductCreate) SetNillableMaxStorageTemp(i *int) *ProductCreate {
	if i != nil {
		pc.SetMaxStorageTemp(*i)
	}
	return pc
}

// SetShelfLife sets the "shelf_life" field.
func (pc *ProductCreate) SetShelfLife(s string) *ProductCreate {
	pc.mutation.SetShelfLife(s)
	return pc
}

// SetNillableShelfLife sets the "shelf_life" field if the given value is not nil.
func (pc *ProductCreate) SetNillableShelfLife(s *string) *ProductCreate {
	if s != nil {
		pc.SetShelfLife(*s)
	}
	return pc
}

// SetPicture sets the "picture" field.
func (pc *ProductCreate) SetPicture(s string) *ProductCreate {
	pc.mutation.SetPicture(s)
	return pc
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (pc *ProductCreate) SetNillablePicture(s *string) *ProductCreate {
	if s != nil {
		pc.SetPicture(*s)
	}
	return pc
}

// SetProductCategoryID sets the "product_category_id" field.
func (pc *ProductCreate) SetProductCategoryID(i int) *ProductCreate {
	pc.mutation.SetProductCategoryID(i)
	return pc
}

// SetNillableProductCategoryID sets the "product_category_id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableProductCategoryID(i *int) *ProductCreate {
	if i != nil {
		pc.SetProductCategoryID(*i)
	}
	return pc
}

// SetTypeOfPackagingID sets the "type_of_packaging_id" field.
func (pc *ProductCreate) SetTypeOfPackagingID(i int) *ProductCreate {
	pc.mutation.SetTypeOfPackagingID(i)
	return pc
}

// SetNillableTypeOfPackagingID sets the "type_of_packaging_id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableTypeOfPackagingID(i *int) *ProductCreate {
	if i != nil {
		pc.SetTypeOfPackagingID(*i)
	}
	return pc
}

// AddOrderDetailProductIDs adds the "order_detail_product" edge to the OrderDetail entity by IDs.
func (pc *ProductCreate) AddOrderDetailProductIDs(ids ...int) *ProductCreate {
	pc.mutation.AddOrderDetailProductIDs(ids...)
	return pc
}

// AddOrderDetailProduct adds the "order_detail_product" edges to the OrderDetail entity.
func (pc *ProductCreate) AddOrderDetailProduct(o ...*OrderDetail) *ProductCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pc.AddOrderDetailProductIDs(ids...)
}

// AddShoppingCartProductIDs adds the "shopping_cart_product" edge to the ShoppingCart entity by IDs.
func (pc *ProductCreate) AddShoppingCartProductIDs(ids ...int) *ProductCreate {
	pc.mutation.AddShoppingCartProductIDs(ids...)
	return pc
}

// AddShoppingCartProduct adds the "shopping_cart_product" edges to the ShoppingCart entity.
func (pc *ProductCreate) AddShoppingCartProduct(s ...*ShoppingCart) *ProductCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddShoppingCartProductIDs(ids...)
}

// AddProductPriceProductIDs adds the "product_price_product" edge to the ProductPrice entity by IDs.
func (pc *ProductCreate) AddProductPriceProductIDs(ids ...int) *ProductCreate {
	pc.mutation.AddProductPriceProductIDs(ids...)
	return pc
}

// AddProductPriceProduct adds the "product_price_product" edges to the ProductPrice entity.
func (pc *ProductCreate) AddProductPriceProduct(p ...*ProductPrice) *ProductCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddProductPriceProductIDs(ids...)
}

// SetProductCategory sets the "product_category" edge to the ProductCategory entity.
func (pc *ProductCreate) SetProductCategory(p *ProductCategory) *ProductCreate {
	return pc.SetProductCategoryID(p.ID)
}

// SetTypeOfPackagingProductID sets the "type_of_packaging_product" edge to the TypeOfPackaging entity by ID.
func (pc *ProductCreate) SetTypeOfPackagingProductID(id int) *ProductCreate {
	pc.mutation.SetTypeOfPackagingProductID(id)
	return pc
}

// SetNillableTypeOfPackagingProductID sets the "type_of_packaging_product" edge to the TypeOfPackaging entity by ID if the given value is not nil.
func (pc *ProductCreate) SetNillableTypeOfPackagingProductID(id *int) *ProductCreate {
	if id != nil {
		pc = pc.SetTypeOfPackagingProductID(*id)
	}
	return pc
}

// SetTypeOfPackagingProduct sets the "type_of_packaging_product" edge to the TypeOfPackaging entity.
func (pc *ProductCreate) SetTypeOfPackagingProduct(t *TypeOfPackaging) *ProductCreate {
	return pc.SetTypeOfPackagingProductID(t.ID)
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProductCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProductCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProductCreate) check() error {
	if v, ok := pc.mutation.Name(); ok {
		if err := product.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Product.name": %w`, err)}
		}
	}
	if v, ok := pc.mutation.ProductComposition(); ok {
		if err := product.ProductCompositionValidator(v); err != nil {
			return &ValidationError{Name: "product_composition", err: fmt.Errorf(`ent: validator failed for field "Product.product_composition": %w`, err)}
		}
	}
	if v, ok := pc.mutation.ShelfLife(); ok {
		if err := product.ShelfLifeValidator(v); err != nil {
			return &ValidationError{Name: "shelf_life", err: fmt.Errorf(`ent: validator failed for field "Product.shelf_life": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Picture(); ok {
		if err := product.PictureValidator(v); err != nil {
			return &ValidationError{Name: "picture", err: fmt.Errorf(`ent: validator failed for field "Product.picture": %w`, err)}
		}
	}
	return nil
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		_node = &Product{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(product.Table, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(product.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Weight(); ok {
		_spec.SetField(product.FieldWeight, field.TypeFloat64, value)
		_node.Weight = value
	}
	if value, ok := pc.mutation.ProductComposition(); ok {
		_spec.SetField(product.FieldProductComposition, field.TypeString, value)
		_node.ProductComposition = value
	}
	if value, ok := pc.mutation.MinStorageTemp(); ok {
		_spec.SetField(product.FieldMinStorageTemp, field.TypeInt, value)
		_node.MinStorageTemp = value
	}
	if value, ok := pc.mutation.MaxStorageTemp(); ok {
		_spec.SetField(product.FieldMaxStorageTemp, field.TypeInt, value)
		_node.MaxStorageTemp = value
	}
	if value, ok := pc.mutation.ShelfLife(); ok {
		_spec.SetField(product.FieldShelfLife, field.TypeString, value)
		_node.ShelfLife = value
	}
	if value, ok := pc.mutation.Picture(); ok {
		_spec.SetField(product.FieldPicture, field.TypeString, value)
		_node.Picture = value
	}
	if nodes := pc.mutation.OrderDetailProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrderDetailProductTable,
			Columns: []string{product.OrderDetailProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ShoppingCartProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ShoppingCartProductTable,
			Columns: []string{product.ShoppingCartProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProductPriceProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductPriceProductTable,
			Columns: []string{product.ProductPriceProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productprice.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProductCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.ProductCategoryTable,
			Columns: []string{product.ProductCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(productcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductCategoryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TypeOfPackagingProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   product.TypeOfPackagingProductTable,
			Columns: []string{product.TypeOfPackagingProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(typeofpackaging.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TypeOfPackagingID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductCreateBulk is the builder for creating many Product entities in bulk.
type ProductCreateBulk struct {
	config
	err      error
	builders []*ProductCreate
}

// Save creates the Product entities in the database.
func (pcb *ProductCreateBulk) Save(ctx context.Context) ([]*Product, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Product, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProductCreateBulk) SaveX(ctx context.Context) []*Product {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProductCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProductCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
