// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"main/db/ent/predicate"
	"main/db/ent/usercategory"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCategoryDelete is the builder for deleting a UserCategory entity.
type UserCategoryDelete struct {
	config
	hooks    []Hook
	mutation *UserCategoryMutation
}

// Where appends a list predicates to the UserCategoryDelete builder.
func (ucd *UserCategoryDelete) Where(ps ...predicate.UserCategory) *UserCategoryDelete {
	ucd.mutation.Where(ps...)
	return ucd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ucd *UserCategoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ucd.sqlExec, ucd.mutation, ucd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ucd *UserCategoryDelete) ExecX(ctx context.Context) int {
	n, err := ucd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ucd *UserCategoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(usercategory.Table, sqlgraph.NewFieldSpec(usercategory.FieldID, field.TypeInt))
	if ps := ucd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ucd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ucd.mutation.done = true
	return affected, err
}

// UserCategoryDeleteOne is the builder for deleting a single UserCategory entity.
type UserCategoryDeleteOne struct {
	ucd *UserCategoryDelete
}

// Where appends a list predicates to the UserCategoryDelete builder.
func (ucdo *UserCategoryDeleteOne) Where(ps ...predicate.UserCategory) *UserCategoryDeleteOne {
	ucdo.ucd.mutation.Where(ps...)
	return ucdo
}

// Exec executes the deletion query.
func (ucdo *UserCategoryDeleteOne) Exec(ctx context.Context) error {
	n, err := ucdo.ucd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{usercategory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ucdo *UserCategoryDeleteOne) ExecX(ctx context.Context) {
	if err := ucdo.Exec(ctx); err != nil {
		panic(err)
	}
}
