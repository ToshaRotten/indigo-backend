// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"main/db/ent/migrate"

	"main/db/ent/address"
	"main/db/ent/card"
	"main/db/ent/chat"
	"main/db/ent/message"
	"main/db/ent/order"
	"main/db/ent/orderdetail"
	"main/db/ent/orderstatus"
	"main/db/ent/product"
	"main/db/ent/productcategory"
	"main/db/ent/productprice"
	"main/db/ent/shoppingcart"
	"main/db/ent/typeofpackaging"
	"main/db/ent/user"
	"main/db/ent/usercategory"
	"main/db/ent/usertoken"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Address is the client for interacting with the Address builders.
	Address *AddressClient
	// Card is the client for interacting with the Card builders.
	Card *CardClient
	// Chat is the client for interacting with the Chat builders.
	Chat *ChatClient
	// Message is the client for interacting with the Message builders.
	Message *MessageClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// OrderDetail is the client for interacting with the OrderDetail builders.
	OrderDetail *OrderDetailClient
	// OrderStatus is the client for interacting with the OrderStatus builders.
	OrderStatus *OrderStatusClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// ProductCategory is the client for interacting with the ProductCategory builders.
	ProductCategory *ProductCategoryClient
	// ProductPrice is the client for interacting with the ProductPrice builders.
	ProductPrice *ProductPriceClient
	// ShoppingCart is the client for interacting with the ShoppingCart builders.
	ShoppingCart *ShoppingCartClient
	// TypeOfPackaging is the client for interacting with the TypeOfPackaging builders.
	TypeOfPackaging *TypeOfPackagingClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserCategory is the client for interacting with the UserCategory builders.
	UserCategory *UserCategoryClient
	// UserToken is the client for interacting with the UserToken builders.
	UserToken *UserTokenClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Address = NewAddressClient(c.config)
	c.Card = NewCardClient(c.config)
	c.Chat = NewChatClient(c.config)
	c.Message = NewMessageClient(c.config)
	c.Order = NewOrderClient(c.config)
	c.OrderDetail = NewOrderDetailClient(c.config)
	c.OrderStatus = NewOrderStatusClient(c.config)
	c.Product = NewProductClient(c.config)
	c.ProductCategory = NewProductCategoryClient(c.config)
	c.ProductPrice = NewProductPriceClient(c.config)
	c.ShoppingCart = NewShoppingCartClient(c.config)
	c.TypeOfPackaging = NewTypeOfPackagingClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserCategory = NewUserCategoryClient(c.config)
	c.UserToken = NewUserTokenClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Address:         NewAddressClient(cfg),
		Card:            NewCardClient(cfg),
		Chat:            NewChatClient(cfg),
		Message:         NewMessageClient(cfg),
		Order:           NewOrderClient(cfg),
		OrderDetail:     NewOrderDetailClient(cfg),
		OrderStatus:     NewOrderStatusClient(cfg),
		Product:         NewProductClient(cfg),
		ProductCategory: NewProductCategoryClient(cfg),
		ProductPrice:    NewProductPriceClient(cfg),
		ShoppingCart:    NewShoppingCartClient(cfg),
		TypeOfPackaging: NewTypeOfPackagingClient(cfg),
		User:            NewUserClient(cfg),
		UserCategory:    NewUserCategoryClient(cfg),
		UserToken:       NewUserTokenClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Address:         NewAddressClient(cfg),
		Card:            NewCardClient(cfg),
		Chat:            NewChatClient(cfg),
		Message:         NewMessageClient(cfg),
		Order:           NewOrderClient(cfg),
		OrderDetail:     NewOrderDetailClient(cfg),
		OrderStatus:     NewOrderStatusClient(cfg),
		Product:         NewProductClient(cfg),
		ProductCategory: NewProductCategoryClient(cfg),
		ProductPrice:    NewProductPriceClient(cfg),
		ShoppingCart:    NewShoppingCartClient(cfg),
		TypeOfPackaging: NewTypeOfPackagingClient(cfg),
		User:            NewUserClient(cfg),
		UserCategory:    NewUserCategoryClient(cfg),
		UserToken:       NewUserTokenClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Address.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Address, c.Card, c.Chat, c.Message, c.Order, c.OrderDetail, c.OrderStatus,
		c.Product, c.ProductCategory, c.ProductPrice, c.ShoppingCart,
		c.TypeOfPackaging, c.User, c.UserCategory, c.UserToken,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Address, c.Card, c.Chat, c.Message, c.Order, c.OrderDetail, c.OrderStatus,
		c.Product, c.ProductCategory, c.ProductPrice, c.ShoppingCart,
		c.TypeOfPackaging, c.User, c.UserCategory, c.UserToken,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AddressMutation:
		return c.Address.mutate(ctx, m)
	case *CardMutation:
		return c.Card.mutate(ctx, m)
	case *ChatMutation:
		return c.Chat.mutate(ctx, m)
	case *MessageMutation:
		return c.Message.mutate(ctx, m)
	case *OrderMutation:
		return c.Order.mutate(ctx, m)
	case *OrderDetailMutation:
		return c.OrderDetail.mutate(ctx, m)
	case *OrderStatusMutation:
		return c.OrderStatus.mutate(ctx, m)
	case *ProductMutation:
		return c.Product.mutate(ctx, m)
	case *ProductCategoryMutation:
		return c.ProductCategory.mutate(ctx, m)
	case *ProductPriceMutation:
		return c.ProductPrice.mutate(ctx, m)
	case *ShoppingCartMutation:
		return c.ShoppingCart.mutate(ctx, m)
	case *TypeOfPackagingMutation:
		return c.TypeOfPackaging.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserCategoryMutation:
		return c.UserCategory.mutate(ctx, m)
	case *UserTokenMutation:
		return c.UserToken.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AddressClient is a client for the Address schema.
type AddressClient struct {
	config
}

// NewAddressClient returns a client for the Address from the given config.
func NewAddressClient(c config) *AddressClient {
	return &AddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `address.Hooks(f(g(h())))`.
func (c *AddressClient) Use(hooks ...Hook) {
	c.hooks.Address = append(c.hooks.Address, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `address.Intercept(f(g(h())))`.
func (c *AddressClient) Intercept(interceptors ...Interceptor) {
	c.inters.Address = append(c.inters.Address, interceptors...)
}

// Create returns a builder for creating a Address entity.
func (c *AddressClient) Create() *AddressCreate {
	mutation := newAddressMutation(c.config, OpCreate)
	return &AddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Address entities.
func (c *AddressClient) CreateBulk(builders ...*AddressCreate) *AddressCreateBulk {
	return &AddressCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AddressClient) MapCreateBulk(slice any, setFunc func(*AddressCreate, int)) *AddressCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AddressCreateBulk{err: fmt.Errorf("calling to AddressClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AddressCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Address.
func (c *AddressClient) Update() *AddressUpdate {
	mutation := newAddressMutation(c.config, OpUpdate)
	return &AddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AddressClient) UpdateOne(a *Address) *AddressUpdateOne {
	mutation := newAddressMutation(c.config, OpUpdateOne, withAddress(a))
	return &AddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AddressClient) UpdateOneID(id int) *AddressUpdateOne {
	mutation := newAddressMutation(c.config, OpUpdateOne, withAddressID(id))
	return &AddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Address.
func (c *AddressClient) Delete() *AddressDelete {
	mutation := newAddressMutation(c.config, OpDelete)
	return &AddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AddressClient) DeleteOne(a *Address) *AddressDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AddressClient) DeleteOneID(id int) *AddressDeleteOne {
	builder := c.Delete().Where(address.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AddressDeleteOne{builder}
}

// Query returns a query builder for Address.
func (c *AddressClient) Query() *AddressQuery {
	return &AddressQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAddress},
		inters: c.Interceptors(),
	}
}

// Get returns a Address entity by its id.
func (c *AddressClient) Get(ctx context.Context, id int) (*Address, error) {
	return c.Query().Where(address.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AddressClient) GetX(ctx context.Context, id int) *Address {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Address.
func (c *AddressClient) QueryUser(a *Address) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, address.UserTable, address.UserPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddress queries the address edge of a Address.
func (c *AddressClient) QueryAddress(a *Address) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(address.Table, address.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, address.AddressTable, address.AddressColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AddressClient) Hooks() []Hook {
	return c.hooks.Address
}

// Interceptors returns the client interceptors.
func (c *AddressClient) Interceptors() []Interceptor {
	return c.inters.Address
}

func (c *AddressClient) mutate(ctx context.Context, m *AddressMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AddressCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AddressUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AddressDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Address mutation op: %q", m.Op())
	}
}

// CardClient is a client for the Card schema.
type CardClient struct {
	config
}

// NewCardClient returns a client for the Card from the given config.
func NewCardClient(c config) *CardClient {
	return &CardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `card.Hooks(f(g(h())))`.
func (c *CardClient) Use(hooks ...Hook) {
	c.hooks.Card = append(c.hooks.Card, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `card.Intercept(f(g(h())))`.
func (c *CardClient) Intercept(interceptors ...Interceptor) {
	c.inters.Card = append(c.inters.Card, interceptors...)
}

// Create returns a builder for creating a Card entity.
func (c *CardClient) Create() *CardCreate {
	mutation := newCardMutation(c.config, OpCreate)
	return &CardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Card entities.
func (c *CardClient) CreateBulk(builders ...*CardCreate) *CardCreateBulk {
	return &CardCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CardClient) MapCreateBulk(slice any, setFunc func(*CardCreate, int)) *CardCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CardCreateBulk{err: fmt.Errorf("calling to CardClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CardCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Card.
func (c *CardClient) Update() *CardUpdate {
	mutation := newCardMutation(c.config, OpUpdate)
	return &CardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CardClient) UpdateOne(ca *Card) *CardUpdateOne {
	mutation := newCardMutation(c.config, OpUpdateOne, withCard(ca))
	return &CardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CardClient) UpdateOneID(id int) *CardUpdateOne {
	mutation := newCardMutation(c.config, OpUpdateOne, withCardID(id))
	return &CardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Card.
func (c *CardClient) Delete() *CardDelete {
	mutation := newCardMutation(c.config, OpDelete)
	return &CardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CardClient) DeleteOne(ca *Card) *CardDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CardClient) DeleteOneID(id int) *CardDeleteOne {
	builder := c.Delete().Where(card.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CardDeleteOne{builder}
}

// Query returns a query builder for Card.
func (c *CardClient) Query() *CardQuery {
	return &CardQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCard},
		inters: c.Interceptors(),
	}
}

// Get returns a Card entity by its id.
func (c *CardClient) Get(ctx context.Context, id int) (*Card, error) {
	return c.Query().Where(card.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CardClient) GetX(ctx context.Context, id int) *Card {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Card.
func (c *CardClient) QueryUser(ca *Card) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(card.Table, card.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, card.UserTable, card.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CardClient) Hooks() []Hook {
	return c.hooks.Card
}

// Interceptors returns the client interceptors.
func (c *CardClient) Interceptors() []Interceptor {
	return c.inters.Card
}

func (c *CardClient) mutate(ctx context.Context, m *CardMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CardCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CardUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CardDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Card mutation op: %q", m.Op())
	}
}

// ChatClient is a client for the Chat schema.
type ChatClient struct {
	config
}

// NewChatClient returns a client for the Chat from the given config.
func NewChatClient(c config) *ChatClient {
	return &ChatClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chat.Hooks(f(g(h())))`.
func (c *ChatClient) Use(hooks ...Hook) {
	c.hooks.Chat = append(c.hooks.Chat, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `chat.Intercept(f(g(h())))`.
func (c *ChatClient) Intercept(interceptors ...Interceptor) {
	c.inters.Chat = append(c.inters.Chat, interceptors...)
}

// Create returns a builder for creating a Chat entity.
func (c *ChatClient) Create() *ChatCreate {
	mutation := newChatMutation(c.config, OpCreate)
	return &ChatCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Chat entities.
func (c *ChatClient) CreateBulk(builders ...*ChatCreate) *ChatCreateBulk {
	return &ChatCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChatClient) MapCreateBulk(slice any, setFunc func(*ChatCreate, int)) *ChatCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChatCreateBulk{err: fmt.Errorf("calling to ChatClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChatCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChatCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Chat.
func (c *ChatClient) Update() *ChatUpdate {
	mutation := newChatMutation(c.config, OpUpdate)
	return &ChatUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChatClient) UpdateOne(ch *Chat) *ChatUpdateOne {
	mutation := newChatMutation(c.config, OpUpdateOne, withChat(ch))
	return &ChatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChatClient) UpdateOneID(id int) *ChatUpdateOne {
	mutation := newChatMutation(c.config, OpUpdateOne, withChatID(id))
	return &ChatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Chat.
func (c *ChatClient) Delete() *ChatDelete {
	mutation := newChatMutation(c.config, OpDelete)
	return &ChatDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChatClient) DeleteOne(ch *Chat) *ChatDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChatClient) DeleteOneID(id int) *ChatDeleteOne {
	builder := c.Delete().Where(chat.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChatDeleteOne{builder}
}

// Query returns a query builder for Chat.
func (c *ChatClient) Query() *ChatQuery {
	return &ChatQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChat},
		inters: c.Interceptors(),
	}
}

// Get returns a Chat entity by its id.
func (c *ChatClient) Get(ctx context.Context, id int) (*Chat, error) {
	return c.Query().Where(chat.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChatClient) GetX(ctx context.Context, id int) *Chat {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Chat.
func (c *ChatClient) QueryUser(ch *Chat) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chat.Table, chat.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, chat.UserTable, chat.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChatMessage queries the chat_message edge of a Chat.
func (c *ChatClient) QueryChatMessage(ch *Chat) *MessageQuery {
	query := (&MessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chat.Table, chat.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, chat.ChatMessageTable, chat.ChatMessageColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChatClient) Hooks() []Hook {
	return c.hooks.Chat
}

// Interceptors returns the client interceptors.
func (c *ChatClient) Interceptors() []Interceptor {
	return c.inters.Chat
}

func (c *ChatClient) mutate(ctx context.Context, m *ChatMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChatCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChatUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChatDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Chat mutation op: %q", m.Op())
	}
}

// MessageClient is a client for the Message schema.
type MessageClient struct {
	config
}

// NewMessageClient returns a client for the Message from the given config.
func NewMessageClient(c config) *MessageClient {
	return &MessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `message.Hooks(f(g(h())))`.
func (c *MessageClient) Use(hooks ...Hook) {
	c.hooks.Message = append(c.hooks.Message, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `message.Intercept(f(g(h())))`.
func (c *MessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Message = append(c.inters.Message, interceptors...)
}

// Create returns a builder for creating a Message entity.
func (c *MessageClient) Create() *MessageCreate {
	mutation := newMessageMutation(c.config, OpCreate)
	return &MessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Message entities.
func (c *MessageClient) CreateBulk(builders ...*MessageCreate) *MessageCreateBulk {
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MessageClient) MapCreateBulk(slice any, setFunc func(*MessageCreate, int)) *MessageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MessageCreateBulk{err: fmt.Errorf("calling to MessageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MessageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Message.
func (c *MessageClient) Update() *MessageUpdate {
	mutation := newMessageMutation(c.config, OpUpdate)
	return &MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageClient) UpdateOne(m *Message) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessage(m))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageClient) UpdateOneID(id int) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessageID(id))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Message.
func (c *MessageClient) Delete() *MessageDelete {
	mutation := newMessageMutation(c.config, OpDelete)
	return &MessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessageClient) DeleteOne(m *Message) *MessageDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MessageClient) DeleteOneID(id int) *MessageDeleteOne {
	builder := c.Delete().Where(message.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageDeleteOne{builder}
}

// Query returns a query builder for Message.
func (c *MessageClient) Query() *MessageQuery {
	return &MessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a Message entity by its id.
func (c *MessageClient) Get(ctx context.Context, id int) (*Message, error) {
	return c.Query().Where(message.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageClient) GetX(ctx context.Context, id int) *Message {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChat queries the chat edge of a Message.
func (c *MessageClient) QueryChat(m *Message) *ChatQuery {
	query := (&ChatClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(chat.Table, chat.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, message.ChatTable, message.ChatColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Message.
func (c *MessageClient) QueryUser(m *Message) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, message.UserTable, message.UserColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MessageClient) Hooks() []Hook {
	return c.hooks.Message
}

// Interceptors returns the client interceptors.
func (c *MessageClient) Interceptors() []Interceptor {
	return c.inters.Message
}

func (c *MessageClient) mutate(ctx context.Context, m *MessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Message mutation op: %q", m.Op())
	}
}

// OrderClient is a client for the Order schema.
type OrderClient struct {
	config
}

// NewOrderClient returns a client for the Order from the given config.
func NewOrderClient(c config) *OrderClient {
	return &OrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `order.Hooks(f(g(h())))`.
func (c *OrderClient) Use(hooks ...Hook) {
	c.hooks.Order = append(c.hooks.Order, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `order.Intercept(f(g(h())))`.
func (c *OrderClient) Intercept(interceptors ...Interceptor) {
	c.inters.Order = append(c.inters.Order, interceptors...)
}

// Create returns a builder for creating a Order entity.
func (c *OrderClient) Create() *OrderCreate {
	mutation := newOrderMutation(c.config, OpCreate)
	return &OrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Order entities.
func (c *OrderClient) CreateBulk(builders ...*OrderCreate) *OrderCreateBulk {
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderClient) MapCreateBulk(slice any, setFunc func(*OrderCreate, int)) *OrderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderCreateBulk{err: fmt.Errorf("calling to OrderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Order.
func (c *OrderClient) Update() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderClient) UpdateOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderClient) UpdateOneID(id int) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Order.
func (c *OrderClient) Delete() *OrderDelete {
	mutation := newOrderMutation(c.config, OpDelete)
	return &OrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderClient) DeleteOne(o *Order) *OrderDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderClient) DeleteOneID(id int) *OrderDeleteOne {
	builder := c.Delete().Where(order.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDeleteOne{builder}
}

// Query returns a query builder for Order.
func (c *OrderClient) Query() *OrderQuery {
	return &OrderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrder},
		inters: c.Interceptors(),
	}
}

// Get returns a Order entity by its id.
func (c *OrderClient) Get(ctx context.Context, id int) (*Order, error) {
	return c.Query().Where(order.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderClient) GetX(ctx context.Context, id int) *Order {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderStatus queries the order_status edge of a Order.
func (c *OrderClient) QueryOrderStatus(o *Order) *OrderStatusQuery {
	query := (&OrderStatusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(orderstatus.Table, orderstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.OrderStatusTable, order.OrderStatusColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Order.
func (c *OrderClient) QueryUser(o *Order) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.UserTable, order.UserColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddresOrder queries the addres_order edge of a Order.
func (c *OrderClient) QueryAddresOrder(o *Order) *AddressQuery {
	query := (&AddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.AddresOrderTable, order.AddresOrderColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrder queries the order edge of a Order.
func (c *OrderClient) QueryOrder(o *Order) *OrderDetailQuery {
	query := (&OrderDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(orderdetail.Table, orderdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.OrderTable, order.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderClient) Hooks() []Hook {
	return c.hooks.Order
}

// Interceptors returns the client interceptors.
func (c *OrderClient) Interceptors() []Interceptor {
	return c.inters.Order
}

func (c *OrderClient) mutate(ctx context.Context, m *OrderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Order mutation op: %q", m.Op())
	}
}

// OrderDetailClient is a client for the OrderDetail schema.
type OrderDetailClient struct {
	config
}

// NewOrderDetailClient returns a client for the OrderDetail from the given config.
func NewOrderDetailClient(c config) *OrderDetailClient {
	return &OrderDetailClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderdetail.Hooks(f(g(h())))`.
func (c *OrderDetailClient) Use(hooks ...Hook) {
	c.hooks.OrderDetail = append(c.hooks.OrderDetail, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderdetail.Intercept(f(g(h())))`.
func (c *OrderDetailClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderDetail = append(c.inters.OrderDetail, interceptors...)
}

// Create returns a builder for creating a OrderDetail entity.
func (c *OrderDetailClient) Create() *OrderDetailCreate {
	mutation := newOrderDetailMutation(c.config, OpCreate)
	return &OrderDetailCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderDetail entities.
func (c *OrderDetailClient) CreateBulk(builders ...*OrderDetailCreate) *OrderDetailCreateBulk {
	return &OrderDetailCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderDetailClient) MapCreateBulk(slice any, setFunc func(*OrderDetailCreate, int)) *OrderDetailCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderDetailCreateBulk{err: fmt.Errorf("calling to OrderDetailClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderDetailCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderDetailCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderDetail.
func (c *OrderDetailClient) Update() *OrderDetailUpdate {
	mutation := newOrderDetailMutation(c.config, OpUpdate)
	return &OrderDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderDetailClient) UpdateOne(od *OrderDetail) *OrderDetailUpdateOne {
	mutation := newOrderDetailMutation(c.config, OpUpdateOne, withOrderDetail(od))
	return &OrderDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderDetailClient) UpdateOneID(id int) *OrderDetailUpdateOne {
	mutation := newOrderDetailMutation(c.config, OpUpdateOne, withOrderDetailID(id))
	return &OrderDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderDetail.
func (c *OrderDetailClient) Delete() *OrderDetailDelete {
	mutation := newOrderDetailMutation(c.config, OpDelete)
	return &OrderDetailDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderDetailClient) DeleteOne(od *OrderDetail) *OrderDetailDeleteOne {
	return c.DeleteOneID(od.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderDetailClient) DeleteOneID(id int) *OrderDetailDeleteOne {
	builder := c.Delete().Where(orderdetail.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDetailDeleteOne{builder}
}

// Query returns a query builder for OrderDetail.
func (c *OrderDetailClient) Query() *OrderDetailQuery {
	return &OrderDetailQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderDetail},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderDetail entity by its id.
func (c *OrderDetailClient) Get(ctx context.Context, id int) (*OrderDetail, error) {
	return c.Query().Where(orderdetail.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderDetailClient) GetX(ctx context.Context, id int) *OrderDetail {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the order edge of a OrderDetail.
func (c *OrderDetailClient) QueryOrder(od *OrderDetail) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := od.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderdetail.Table, orderdetail.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderdetail.OrderTable, orderdetail.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(od.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProducts queries the products edge of a OrderDetail.
func (c *OrderDetailClient) QueryProducts(od *OrderDetail) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := od.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderdetail.Table, orderdetail.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderdetail.ProductsTable, orderdetail.ProductsColumn),
		)
		fromV = sqlgraph.Neighbors(od.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderDetailClient) Hooks() []Hook {
	return c.hooks.OrderDetail
}

// Interceptors returns the client interceptors.
func (c *OrderDetailClient) Interceptors() []Interceptor {
	return c.inters.OrderDetail
}

func (c *OrderDetailClient) mutate(ctx context.Context, m *OrderDetailMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderDetailCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderDetailUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderDetailUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderDetailDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrderDetail mutation op: %q", m.Op())
	}
}

// OrderStatusClient is a client for the OrderStatus schema.
type OrderStatusClient struct {
	config
}

// NewOrderStatusClient returns a client for the OrderStatus from the given config.
func NewOrderStatusClient(c config) *OrderStatusClient {
	return &OrderStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderstatus.Hooks(f(g(h())))`.
func (c *OrderStatusClient) Use(hooks ...Hook) {
	c.hooks.OrderStatus = append(c.hooks.OrderStatus, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderstatus.Intercept(f(g(h())))`.
func (c *OrderStatusClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderStatus = append(c.inters.OrderStatus, interceptors...)
}

// Create returns a builder for creating a OrderStatus entity.
func (c *OrderStatusClient) Create() *OrderStatusCreate {
	mutation := newOrderStatusMutation(c.config, OpCreate)
	return &OrderStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderStatus entities.
func (c *OrderStatusClient) CreateBulk(builders ...*OrderStatusCreate) *OrderStatusCreateBulk {
	return &OrderStatusCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderStatusClient) MapCreateBulk(slice any, setFunc func(*OrderStatusCreate, int)) *OrderStatusCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderStatusCreateBulk{err: fmt.Errorf("calling to OrderStatusClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderStatusCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderStatus.
func (c *OrderStatusClient) Update() *OrderStatusUpdate {
	mutation := newOrderStatusMutation(c.config, OpUpdate)
	return &OrderStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderStatusClient) UpdateOne(os *OrderStatus) *OrderStatusUpdateOne {
	mutation := newOrderStatusMutation(c.config, OpUpdateOne, withOrderStatus(os))
	return &OrderStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderStatusClient) UpdateOneID(id int) *OrderStatusUpdateOne {
	mutation := newOrderStatusMutation(c.config, OpUpdateOne, withOrderStatusID(id))
	return &OrderStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderStatus.
func (c *OrderStatusClient) Delete() *OrderStatusDelete {
	mutation := newOrderStatusMutation(c.config, OpDelete)
	return &OrderStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderStatusClient) DeleteOne(os *OrderStatus) *OrderStatusDeleteOne {
	return c.DeleteOneID(os.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderStatusClient) DeleteOneID(id int) *OrderStatusDeleteOne {
	builder := c.Delete().Where(orderstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderStatusDeleteOne{builder}
}

// Query returns a query builder for OrderStatus.
func (c *OrderStatusClient) Query() *OrderStatusQuery {
	return &OrderStatusQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderStatus},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderStatus entity by its id.
func (c *OrderStatusClient) Get(ctx context.Context, id int) (*OrderStatus, error) {
	return c.Query().Where(orderstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderStatusClient) GetX(ctx context.Context, id int) *OrderStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStatus queries the status edge of a OrderStatus.
func (c *OrderStatusClient) QueryStatus(os *OrderStatus) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := os.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderstatus.Table, orderstatus.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orderstatus.StatusTable, orderstatus.StatusColumn),
		)
		fromV = sqlgraph.Neighbors(os.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderStatusClient) Hooks() []Hook {
	return c.hooks.OrderStatus
}

// Interceptors returns the client interceptors.
func (c *OrderStatusClient) Interceptors() []Interceptor {
	return c.inters.OrderStatus
}

func (c *OrderStatusClient) mutate(ctx context.Context, m *OrderStatusMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderStatusCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderStatusDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrderStatus mutation op: %q", m.Op())
	}
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `product.Intercept(f(g(h())))`.
func (c *ProductClient) Intercept(interceptors ...Interceptor) {
	c.inters.Product = append(c.inters.Product, interceptors...)
}

// Create returns a builder for creating a Product entity.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductClient) MapCreateBulk(slice any, setFunc func(*ProductCreate, int)) *ProductCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductCreateBulk{err: fmt.Errorf("calling to ProductClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id int) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductClient) DeleteOneID(id int) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProduct},
		inters: c.Interceptors(),
	}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id int) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id int) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrderDetailProduct queries the order_detail_product edge of a Product.
func (c *ProductClient) QueryOrderDetailProduct(pr *Product) *OrderDetailQuery {
	query := (&OrderDetailClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(orderdetail.Table, orderdetail.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.OrderDetailProductTable, product.OrderDetailProductColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShoppingCartProduct queries the shopping_cart_product edge of a Product.
func (c *ProductClient) QueryShoppingCartProduct(pr *Product) *ShoppingCartQuery {
	query := (&ShoppingCartClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(shoppingcart.Table, shoppingcart.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.ShoppingCartProductTable, product.ShoppingCartProductColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductPriceProduct queries the product_price_product edge of a Product.
func (c *ProductClient) QueryProductPriceProduct(pr *Product) *ProductPriceQuery {
	query := (&ProductPriceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(productprice.Table, productprice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, product.ProductPriceProductTable, product.ProductPriceProductColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductCategory queries the product_category edge of a Product.
func (c *ProductClient) QueryProductCategory(pr *Product) *ProductCategoryQuery {
	query := (&ProductCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(productcategory.Table, productcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, product.ProductCategoryTable, product.ProductCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTypeOfPackagingProduct queries the type_of_packaging_product edge of a Product.
func (c *ProductClient) QueryTypeOfPackagingProduct(pr *Product) *TypeOfPackagingQuery {
	query := (&TypeOfPackagingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(typeofpackaging.Table, typeofpackaging.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, product.TypeOfPackagingProductTable, product.TypeOfPackagingProductColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	return c.hooks.Product
}

// Interceptors returns the client interceptors.
func (c *ProductClient) Interceptors() []Interceptor {
	return c.inters.Product
}

func (c *ProductClient) mutate(ctx context.Context, m *ProductMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Product mutation op: %q", m.Op())
	}
}

// ProductCategoryClient is a client for the ProductCategory schema.
type ProductCategoryClient struct {
	config
}

// NewProductCategoryClient returns a client for the ProductCategory from the given config.
func NewProductCategoryClient(c config) *ProductCategoryClient {
	return &ProductCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productcategory.Hooks(f(g(h())))`.
func (c *ProductCategoryClient) Use(hooks ...Hook) {
	c.hooks.ProductCategory = append(c.hooks.ProductCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `productcategory.Intercept(f(g(h())))`.
func (c *ProductCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProductCategory = append(c.inters.ProductCategory, interceptors...)
}

// Create returns a builder for creating a ProductCategory entity.
func (c *ProductCategoryClient) Create() *ProductCategoryCreate {
	mutation := newProductCategoryMutation(c.config, OpCreate)
	return &ProductCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductCategory entities.
func (c *ProductCategoryClient) CreateBulk(builders ...*ProductCategoryCreate) *ProductCategoryCreateBulk {
	return &ProductCategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductCategoryClient) MapCreateBulk(slice any, setFunc func(*ProductCategoryCreate, int)) *ProductCategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductCategoryCreateBulk{err: fmt.Errorf("calling to ProductCategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductCategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductCategory.
func (c *ProductCategoryClient) Update() *ProductCategoryUpdate {
	mutation := newProductCategoryMutation(c.config, OpUpdate)
	return &ProductCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductCategoryClient) UpdateOne(pc *ProductCategory) *ProductCategoryUpdateOne {
	mutation := newProductCategoryMutation(c.config, OpUpdateOne, withProductCategory(pc))
	return &ProductCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductCategoryClient) UpdateOneID(id int) *ProductCategoryUpdateOne {
	mutation := newProductCategoryMutation(c.config, OpUpdateOne, withProductCategoryID(id))
	return &ProductCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductCategory.
func (c *ProductCategoryClient) Delete() *ProductCategoryDelete {
	mutation := newProductCategoryMutation(c.config, OpDelete)
	return &ProductCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductCategoryClient) DeleteOne(pc *ProductCategory) *ProductCategoryDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductCategoryClient) DeleteOneID(id int) *ProductCategoryDeleteOne {
	builder := c.Delete().Where(productcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductCategoryDeleteOne{builder}
}

// Query returns a query builder for ProductCategory.
func (c *ProductCategoryClient) Query() *ProductCategoryQuery {
	return &ProductCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProductCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a ProductCategory entity by its id.
func (c *ProductCategoryClient) Get(ctx context.Context, id int) (*ProductCategory, error) {
	return c.Query().Where(productcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductCategoryClient) GetX(ctx context.Context, id int) *ProductCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCategory queries the category edge of a ProductCategory.
func (c *ProductCategoryClient) QueryCategory(pc *ProductCategory) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productcategory.Table, productcategory.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, productcategory.CategoryTable, productcategory.CategoryColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductCategoryClient) Hooks() []Hook {
	return c.hooks.ProductCategory
}

// Interceptors returns the client interceptors.
func (c *ProductCategoryClient) Interceptors() []Interceptor {
	return c.inters.ProductCategory
}

func (c *ProductCategoryClient) mutate(ctx context.Context, m *ProductCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProductCategory mutation op: %q", m.Op())
	}
}

// ProductPriceClient is a client for the ProductPrice schema.
type ProductPriceClient struct {
	config
}

// NewProductPriceClient returns a client for the ProductPrice from the given config.
func NewProductPriceClient(c config) *ProductPriceClient {
	return &ProductPriceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `productprice.Hooks(f(g(h())))`.
func (c *ProductPriceClient) Use(hooks ...Hook) {
	c.hooks.ProductPrice = append(c.hooks.ProductPrice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `productprice.Intercept(f(g(h())))`.
func (c *ProductPriceClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProductPrice = append(c.inters.ProductPrice, interceptors...)
}

// Create returns a builder for creating a ProductPrice entity.
func (c *ProductPriceClient) Create() *ProductPriceCreate {
	mutation := newProductPriceMutation(c.config, OpCreate)
	return &ProductPriceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProductPrice entities.
func (c *ProductPriceClient) CreateBulk(builders ...*ProductPriceCreate) *ProductPriceCreateBulk {
	return &ProductPriceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProductPriceClient) MapCreateBulk(slice any, setFunc func(*ProductPriceCreate, int)) *ProductPriceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProductPriceCreateBulk{err: fmt.Errorf("calling to ProductPriceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProductPriceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProductPriceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProductPrice.
func (c *ProductPriceClient) Update() *ProductPriceUpdate {
	mutation := newProductPriceMutation(c.config, OpUpdate)
	return &ProductPriceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductPriceClient) UpdateOne(pp *ProductPrice) *ProductPriceUpdateOne {
	mutation := newProductPriceMutation(c.config, OpUpdateOne, withProductPrice(pp))
	return &ProductPriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductPriceClient) UpdateOneID(id int) *ProductPriceUpdateOne {
	mutation := newProductPriceMutation(c.config, OpUpdateOne, withProductPriceID(id))
	return &ProductPriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProductPrice.
func (c *ProductPriceClient) Delete() *ProductPriceDelete {
	mutation := newProductPriceMutation(c.config, OpDelete)
	return &ProductPriceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProductPriceClient) DeleteOne(pp *ProductPrice) *ProductPriceDeleteOne {
	return c.DeleteOneID(pp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProductPriceClient) DeleteOneID(id int) *ProductPriceDeleteOne {
	builder := c.Delete().Where(productprice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductPriceDeleteOne{builder}
}

// Query returns a query builder for ProductPrice.
func (c *ProductPriceClient) Query() *ProductPriceQuery {
	return &ProductPriceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProductPrice},
		inters: c.Interceptors(),
	}
}

// Get returns a ProductPrice entity by its id.
func (c *ProductPriceClient) Get(ctx context.Context, id int) (*ProductPrice, error) {
	return c.Query().Where(productprice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductPriceClient) GetX(ctx context.Context, id int) *ProductPrice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProduct queries the product edge of a ProductPrice.
func (c *ProductPriceClient) QueryProduct(pp *ProductPrice) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(productprice.Table, productprice.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, productprice.ProductTable, productprice.ProductColumn),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductPriceClient) Hooks() []Hook {
	return c.hooks.ProductPrice
}

// Interceptors returns the client interceptors.
func (c *ProductPriceClient) Interceptors() []Interceptor {
	return c.inters.ProductPrice
}

func (c *ProductPriceClient) mutate(ctx context.Context, m *ProductPriceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProductPriceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProductPriceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProductPriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProductPriceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProductPrice mutation op: %q", m.Op())
	}
}

// ShoppingCartClient is a client for the ShoppingCart schema.
type ShoppingCartClient struct {
	config
}

// NewShoppingCartClient returns a client for the ShoppingCart from the given config.
func NewShoppingCartClient(c config) *ShoppingCartClient {
	return &ShoppingCartClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shoppingcart.Hooks(f(g(h())))`.
func (c *ShoppingCartClient) Use(hooks ...Hook) {
	c.hooks.ShoppingCart = append(c.hooks.ShoppingCart, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `shoppingcart.Intercept(f(g(h())))`.
func (c *ShoppingCartClient) Intercept(interceptors ...Interceptor) {
	c.inters.ShoppingCart = append(c.inters.ShoppingCart, interceptors...)
}

// Create returns a builder for creating a ShoppingCart entity.
func (c *ShoppingCartClient) Create() *ShoppingCartCreate {
	mutation := newShoppingCartMutation(c.config, OpCreate)
	return &ShoppingCartCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShoppingCart entities.
func (c *ShoppingCartClient) CreateBulk(builders ...*ShoppingCartCreate) *ShoppingCartCreateBulk {
	return &ShoppingCartCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ShoppingCartClient) MapCreateBulk(slice any, setFunc func(*ShoppingCartCreate, int)) *ShoppingCartCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ShoppingCartCreateBulk{err: fmt.Errorf("calling to ShoppingCartClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ShoppingCartCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ShoppingCartCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShoppingCart.
func (c *ShoppingCartClient) Update() *ShoppingCartUpdate {
	mutation := newShoppingCartMutation(c.config, OpUpdate)
	return &ShoppingCartUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShoppingCartClient) UpdateOne(sc *ShoppingCart) *ShoppingCartUpdateOne {
	mutation := newShoppingCartMutation(c.config, OpUpdateOne, withShoppingCart(sc))
	return &ShoppingCartUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShoppingCartClient) UpdateOneID(id int) *ShoppingCartUpdateOne {
	mutation := newShoppingCartMutation(c.config, OpUpdateOne, withShoppingCartID(id))
	return &ShoppingCartUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShoppingCart.
func (c *ShoppingCartClient) Delete() *ShoppingCartDelete {
	mutation := newShoppingCartMutation(c.config, OpDelete)
	return &ShoppingCartDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ShoppingCartClient) DeleteOne(sc *ShoppingCart) *ShoppingCartDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ShoppingCartClient) DeleteOneID(id int) *ShoppingCartDeleteOne {
	builder := c.Delete().Where(shoppingcart.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShoppingCartDeleteOne{builder}
}

// Query returns a query builder for ShoppingCart.
func (c *ShoppingCartClient) Query() *ShoppingCartQuery {
	return &ShoppingCartQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeShoppingCart},
		inters: c.Interceptors(),
	}
}

// Get returns a ShoppingCart entity by its id.
func (c *ShoppingCartClient) Get(ctx context.Context, id int) (*ShoppingCart, error) {
	return c.Query().Where(shoppingcart.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShoppingCartClient) GetX(ctx context.Context, id int) *ShoppingCart {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProducts queries the products edge of a ShoppingCart.
func (c *ShoppingCartClient) QueryProducts(sc *ShoppingCart) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shoppingcart.Table, shoppingcart.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shoppingcart.ProductsTable, shoppingcart.ProductsColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a ShoppingCart.
func (c *ShoppingCartClient) QueryUsers(sc *ShoppingCart) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shoppingcart.Table, shoppingcart.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shoppingcart.UsersTable, shoppingcart.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShoppingCartClient) Hooks() []Hook {
	return c.hooks.ShoppingCart
}

// Interceptors returns the client interceptors.
func (c *ShoppingCartClient) Interceptors() []Interceptor {
	return c.inters.ShoppingCart
}

func (c *ShoppingCartClient) mutate(ctx context.Context, m *ShoppingCartMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ShoppingCartCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ShoppingCartUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ShoppingCartUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ShoppingCartDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ShoppingCart mutation op: %q", m.Op())
	}
}

// TypeOfPackagingClient is a client for the TypeOfPackaging schema.
type TypeOfPackagingClient struct {
	config
}

// NewTypeOfPackagingClient returns a client for the TypeOfPackaging from the given config.
func NewTypeOfPackagingClient(c config) *TypeOfPackagingClient {
	return &TypeOfPackagingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `typeofpackaging.Hooks(f(g(h())))`.
func (c *TypeOfPackagingClient) Use(hooks ...Hook) {
	c.hooks.TypeOfPackaging = append(c.hooks.TypeOfPackaging, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `typeofpackaging.Intercept(f(g(h())))`.
func (c *TypeOfPackagingClient) Intercept(interceptors ...Interceptor) {
	c.inters.TypeOfPackaging = append(c.inters.TypeOfPackaging, interceptors...)
}

// Create returns a builder for creating a TypeOfPackaging entity.
func (c *TypeOfPackagingClient) Create() *TypeOfPackagingCreate {
	mutation := newTypeOfPackagingMutation(c.config, OpCreate)
	return &TypeOfPackagingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TypeOfPackaging entities.
func (c *TypeOfPackagingClient) CreateBulk(builders ...*TypeOfPackagingCreate) *TypeOfPackagingCreateBulk {
	return &TypeOfPackagingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TypeOfPackagingClient) MapCreateBulk(slice any, setFunc func(*TypeOfPackagingCreate, int)) *TypeOfPackagingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TypeOfPackagingCreateBulk{err: fmt.Errorf("calling to TypeOfPackagingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TypeOfPackagingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TypeOfPackagingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TypeOfPackaging.
func (c *TypeOfPackagingClient) Update() *TypeOfPackagingUpdate {
	mutation := newTypeOfPackagingMutation(c.config, OpUpdate)
	return &TypeOfPackagingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TypeOfPackagingClient) UpdateOne(top *TypeOfPackaging) *TypeOfPackagingUpdateOne {
	mutation := newTypeOfPackagingMutation(c.config, OpUpdateOne, withTypeOfPackaging(top))
	return &TypeOfPackagingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TypeOfPackagingClient) UpdateOneID(id int) *TypeOfPackagingUpdateOne {
	mutation := newTypeOfPackagingMutation(c.config, OpUpdateOne, withTypeOfPackagingID(id))
	return &TypeOfPackagingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TypeOfPackaging.
func (c *TypeOfPackagingClient) Delete() *TypeOfPackagingDelete {
	mutation := newTypeOfPackagingMutation(c.config, OpDelete)
	return &TypeOfPackagingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TypeOfPackagingClient) DeleteOne(top *TypeOfPackaging) *TypeOfPackagingDeleteOne {
	return c.DeleteOneID(top.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TypeOfPackagingClient) DeleteOneID(id int) *TypeOfPackagingDeleteOne {
	builder := c.Delete().Where(typeofpackaging.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TypeOfPackagingDeleteOne{builder}
}

// Query returns a query builder for TypeOfPackaging.
func (c *TypeOfPackagingClient) Query() *TypeOfPackagingQuery {
	return &TypeOfPackagingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTypeOfPackaging},
		inters: c.Interceptors(),
	}
}

// Get returns a TypeOfPackaging entity by its id.
func (c *TypeOfPackagingClient) Get(ctx context.Context, id int) (*TypeOfPackaging, error) {
	return c.Query().Where(typeofpackaging.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TypeOfPackagingClient) GetX(ctx context.Context, id int) *TypeOfPackaging {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTypeOfPackaging queries the type_of_packaging edge of a TypeOfPackaging.
func (c *TypeOfPackagingClient) QueryTypeOfPackaging(top *TypeOfPackaging) *ProductQuery {
	query := (&ProductClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := top.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(typeofpackaging.Table, typeofpackaging.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, typeofpackaging.TypeOfPackagingTable, typeofpackaging.TypeOfPackagingColumn),
		)
		fromV = sqlgraph.Neighbors(top.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TypeOfPackagingClient) Hooks() []Hook {
	return c.hooks.TypeOfPackaging
}

// Interceptors returns the client interceptors.
func (c *TypeOfPackagingClient) Interceptors() []Interceptor {
	return c.inters.TypeOfPackaging
}

func (c *TypeOfPackagingClient) mutate(ctx context.Context, m *TypeOfPackagingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TypeOfPackagingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TypeOfPackagingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TypeOfPackagingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TypeOfPackagingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TypeOfPackaging mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserCategory queries the user_category edge of a User.
func (c *UserClient) QueryUserCategory(u *User) *UserCategoryQuery {
	query := (&UserCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usercategory.Table, usercategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.UserCategoryTable, user.UserCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShoppingCartUser queries the shopping_cart_user edge of a User.
func (c *UserClient) QueryShoppingCartUser(u *User) *ShoppingCartQuery {
	query := (&ShoppingCartClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(shoppingcart.Table, shoppingcart.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ShoppingCartUserTable, user.ShoppingCartUserColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserTokenUser queries the user_token_user edge of a User.
func (c *UserClient) QueryUserTokenUser(u *User) *UserTokenQuery {
	query := (&UserTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usertoken.Table, usertoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserTokenUserTable, user.UserTokenUserColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrderUser queries the order_user edge of a User.
func (c *UserClient) QueryOrderUser(u *User) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.OrderUserTable, user.OrderUserColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAddresses queries the addresses edge of a User.
func (c *UserClient) QueryAddresses(u *User) *AddressQuery {
	query := (&AddressClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.AddressesTable, user.AddressesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserChat queries the user_chat edge of a User.
func (c *UserClient) QueryUserChat(u *User) *ChatQuery {
	query := (&ChatClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(chat.Table, chat.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserChatTable, user.UserChatColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserCard queries the user_card edge of a User.
func (c *UserClient) QueryUserCard(u *User) *CardQuery {
	query := (&CardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(card.Table, card.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserCardTable, user.UserCardColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserMessage queries the user_message edge of a User.
func (c *UserClient) QueryUserMessage(u *User) *MessageQuery {
	query := (&MessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserMessageTable, user.UserMessageColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserCategoryClient is a client for the UserCategory schema.
type UserCategoryClient struct {
	config
}

// NewUserCategoryClient returns a client for the UserCategory from the given config.
func NewUserCategoryClient(c config) *UserCategoryClient {
	return &UserCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usercategory.Hooks(f(g(h())))`.
func (c *UserCategoryClient) Use(hooks ...Hook) {
	c.hooks.UserCategory = append(c.hooks.UserCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usercategory.Intercept(f(g(h())))`.
func (c *UserCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserCategory = append(c.inters.UserCategory, interceptors...)
}

// Create returns a builder for creating a UserCategory entity.
func (c *UserCategoryClient) Create() *UserCategoryCreate {
	mutation := newUserCategoryMutation(c.config, OpCreate)
	return &UserCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserCategory entities.
func (c *UserCategoryClient) CreateBulk(builders ...*UserCategoryCreate) *UserCategoryCreateBulk {
	return &UserCategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserCategoryClient) MapCreateBulk(slice any, setFunc func(*UserCategoryCreate, int)) *UserCategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCategoryCreateBulk{err: fmt.Errorf("calling to UserCategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserCategory.
func (c *UserCategoryClient) Update() *UserCategoryUpdate {
	mutation := newUserCategoryMutation(c.config, OpUpdate)
	return &UserCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserCategoryClient) UpdateOne(uc *UserCategory) *UserCategoryUpdateOne {
	mutation := newUserCategoryMutation(c.config, OpUpdateOne, withUserCategory(uc))
	return &UserCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserCategoryClient) UpdateOneID(id int) *UserCategoryUpdateOne {
	mutation := newUserCategoryMutation(c.config, OpUpdateOne, withUserCategoryID(id))
	return &UserCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserCategory.
func (c *UserCategoryClient) Delete() *UserCategoryDelete {
	mutation := newUserCategoryMutation(c.config, OpDelete)
	return &UserCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserCategoryClient) DeleteOne(uc *UserCategory) *UserCategoryDeleteOne {
	return c.DeleteOneID(uc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserCategoryClient) DeleteOneID(id int) *UserCategoryDeleteOne {
	builder := c.Delete().Where(usercategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserCategoryDeleteOne{builder}
}

// Query returns a query builder for UserCategory.
func (c *UserCategoryClient) Query() *UserCategoryQuery {
	return &UserCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a UserCategory entity by its id.
func (c *UserCategoryClient) Get(ctx context.Context, id int) (*UserCategory, error) {
	return c.Query().Where(usercategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserCategoryClient) GetX(ctx context.Context, id int) *UserCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserCategoryUser queries the user_category_user edge of a UserCategory.
func (c *UserCategoryClient) QueryUserCategoryUser(uc *UserCategory) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usercategory.Table, usercategory.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usercategory.UserCategoryUserTable, usercategory.UserCategoryUserColumn),
		)
		fromV = sqlgraph.Neighbors(uc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserCategoryClient) Hooks() []Hook {
	return c.hooks.UserCategory
}

// Interceptors returns the client interceptors.
func (c *UserCategoryClient) Interceptors() []Interceptor {
	return c.inters.UserCategory
}

func (c *UserCategoryClient) mutate(ctx context.Context, m *UserCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserCategory mutation op: %q", m.Op())
	}
}

// UserTokenClient is a client for the UserToken schema.
type UserTokenClient struct {
	config
}

// NewUserTokenClient returns a client for the UserToken from the given config.
func NewUserTokenClient(c config) *UserTokenClient {
	return &UserTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usertoken.Hooks(f(g(h())))`.
func (c *UserTokenClient) Use(hooks ...Hook) {
	c.hooks.UserToken = append(c.hooks.UserToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usertoken.Intercept(f(g(h())))`.
func (c *UserTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserToken = append(c.inters.UserToken, interceptors...)
}

// Create returns a builder for creating a UserToken entity.
func (c *UserTokenClient) Create() *UserTokenCreate {
	mutation := newUserTokenMutation(c.config, OpCreate)
	return &UserTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserToken entities.
func (c *UserTokenClient) CreateBulk(builders ...*UserTokenCreate) *UserTokenCreateBulk {
	return &UserTokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserTokenClient) MapCreateBulk(slice any, setFunc func(*UserTokenCreate, int)) *UserTokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserTokenCreateBulk{err: fmt.Errorf("calling to UserTokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserTokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserToken.
func (c *UserTokenClient) Update() *UserTokenUpdate {
	mutation := newUserTokenMutation(c.config, OpUpdate)
	return &UserTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserTokenClient) UpdateOne(ut *UserToken) *UserTokenUpdateOne {
	mutation := newUserTokenMutation(c.config, OpUpdateOne, withUserToken(ut))
	return &UserTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserTokenClient) UpdateOneID(id int) *UserTokenUpdateOne {
	mutation := newUserTokenMutation(c.config, OpUpdateOne, withUserTokenID(id))
	return &UserTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserToken.
func (c *UserTokenClient) Delete() *UserTokenDelete {
	mutation := newUserTokenMutation(c.config, OpDelete)
	return &UserTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserTokenClient) DeleteOne(ut *UserToken) *UserTokenDeleteOne {
	return c.DeleteOneID(ut.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserTokenClient) DeleteOneID(id int) *UserTokenDeleteOne {
	builder := c.Delete().Where(usertoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserTokenDeleteOne{builder}
}

// Query returns a query builder for UserToken.
func (c *UserTokenClient) Query() *UserTokenQuery {
	return &UserTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserToken},
		inters: c.Interceptors(),
	}
}

// Get returns a UserToken entity by its id.
func (c *UserTokenClient) Get(ctx context.Context, id int) (*UserToken, error) {
	return c.Query().Where(usertoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserTokenClient) GetX(ctx context.Context, id int) *UserToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserToken.
func (c *UserTokenClient) QueryUser(ut *UserToken) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ut.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usertoken.Table, usertoken.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, usertoken.UserTable, usertoken.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ut.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserTokenClient) Hooks() []Hook {
	return c.hooks.UserToken
}

// Interceptors returns the client interceptors.
func (c *UserTokenClient) Interceptors() []Interceptor {
	return c.inters.UserToken
}

func (c *UserTokenClient) mutate(ctx context.Context, m *UserTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserToken mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Address, Card, Chat, Message, Order, OrderDetail, OrderStatus, Product,
		ProductCategory, ProductPrice, ShoppingCart, TypeOfPackaging, User,
		UserCategory, UserToken []ent.Hook
	}
	inters struct {
		Address, Card, Chat, Message, Order, OrderDetail, OrderStatus, Product,
		ProductCategory, ProductPrice, ShoppingCart, TypeOfPackaging, User,
		UserCategory, UserToken []ent.Interceptor
	}
)
