// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"main/db/ent/predicate"
	"main/db/ent/product"
	"main/db/ent/typeofpackaging"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TypeOfPackagingQuery is the builder for querying TypeOfPackaging entities.
type TypeOfPackagingQuery struct {
	config
	ctx                 *QueryContext
	order               []typeofpackaging.OrderOption
	inters              []Interceptor
	predicates          []predicate.TypeOfPackaging
	withTypeOfPackaging *ProductQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TypeOfPackagingQuery builder.
func (topq *TypeOfPackagingQuery) Where(ps ...predicate.TypeOfPackaging) *TypeOfPackagingQuery {
	topq.predicates = append(topq.predicates, ps...)
	return topq
}

// Limit the number of records to be returned by this query.
func (topq *TypeOfPackagingQuery) Limit(limit int) *TypeOfPackagingQuery {
	topq.ctx.Limit = &limit
	return topq
}

// Offset to start from.
func (topq *TypeOfPackagingQuery) Offset(offset int) *TypeOfPackagingQuery {
	topq.ctx.Offset = &offset
	return topq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (topq *TypeOfPackagingQuery) Unique(unique bool) *TypeOfPackagingQuery {
	topq.ctx.Unique = &unique
	return topq
}

// Order specifies how the records should be ordered.
func (topq *TypeOfPackagingQuery) Order(o ...typeofpackaging.OrderOption) *TypeOfPackagingQuery {
	topq.order = append(topq.order, o...)
	return topq
}

// QueryTypeOfPackaging chains the current query on the "type_of_packaging" edge.
func (topq *TypeOfPackagingQuery) QueryTypeOfPackaging() *ProductQuery {
	query := (&ProductClient{config: topq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := topq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := topq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(typeofpackaging.Table, typeofpackaging.FieldID, selector),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, typeofpackaging.TypeOfPackagingTable, typeofpackaging.TypeOfPackagingColumn),
		)
		fromU = sqlgraph.SetNeighbors(topq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TypeOfPackaging entity from the query.
// Returns a *NotFoundError when no TypeOfPackaging was found.
func (topq *TypeOfPackagingQuery) First(ctx context.Context) (*TypeOfPackaging, error) {
	nodes, err := topq.Limit(1).All(setContextOp(ctx, topq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{typeofpackaging.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (topq *TypeOfPackagingQuery) FirstX(ctx context.Context) *TypeOfPackaging {
	node, err := topq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TypeOfPackaging ID from the query.
// Returns a *NotFoundError when no TypeOfPackaging ID was found.
func (topq *TypeOfPackagingQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = topq.Limit(1).IDs(setContextOp(ctx, topq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{typeofpackaging.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (topq *TypeOfPackagingQuery) FirstIDX(ctx context.Context) int {
	id, err := topq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TypeOfPackaging entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TypeOfPackaging entity is found.
// Returns a *NotFoundError when no TypeOfPackaging entities are found.
func (topq *TypeOfPackagingQuery) Only(ctx context.Context) (*TypeOfPackaging, error) {
	nodes, err := topq.Limit(2).All(setContextOp(ctx, topq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{typeofpackaging.Label}
	default:
		return nil, &NotSingularError{typeofpackaging.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (topq *TypeOfPackagingQuery) OnlyX(ctx context.Context) *TypeOfPackaging {
	node, err := topq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TypeOfPackaging ID in the query.
// Returns a *NotSingularError when more than one TypeOfPackaging ID is found.
// Returns a *NotFoundError when no entities are found.
func (topq *TypeOfPackagingQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = topq.Limit(2).IDs(setContextOp(ctx, topq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{typeofpackaging.Label}
	default:
		err = &NotSingularError{typeofpackaging.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (topq *TypeOfPackagingQuery) OnlyIDX(ctx context.Context) int {
	id, err := topq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TypeOfPackagings.
func (topq *TypeOfPackagingQuery) All(ctx context.Context) ([]*TypeOfPackaging, error) {
	ctx = setContextOp(ctx, topq.ctx, ent.OpQueryAll)
	if err := topq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TypeOfPackaging, *TypeOfPackagingQuery]()
	return withInterceptors[[]*TypeOfPackaging](ctx, topq, qr, topq.inters)
}

// AllX is like All, but panics if an error occurs.
func (topq *TypeOfPackagingQuery) AllX(ctx context.Context) []*TypeOfPackaging {
	nodes, err := topq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TypeOfPackaging IDs.
func (topq *TypeOfPackagingQuery) IDs(ctx context.Context) (ids []int, err error) {
	if topq.ctx.Unique == nil && topq.path != nil {
		topq.Unique(true)
	}
	ctx = setContextOp(ctx, topq.ctx, ent.OpQueryIDs)
	if err = topq.Select(typeofpackaging.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (topq *TypeOfPackagingQuery) IDsX(ctx context.Context) []int {
	ids, err := topq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (topq *TypeOfPackagingQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, topq.ctx, ent.OpQueryCount)
	if err := topq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, topq, querierCount[*TypeOfPackagingQuery](), topq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (topq *TypeOfPackagingQuery) CountX(ctx context.Context) int {
	count, err := topq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (topq *TypeOfPackagingQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, topq.ctx, ent.OpQueryExist)
	switch _, err := topq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (topq *TypeOfPackagingQuery) ExistX(ctx context.Context) bool {
	exist, err := topq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TypeOfPackagingQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (topq *TypeOfPackagingQuery) Clone() *TypeOfPackagingQuery {
	if topq == nil {
		return nil
	}
	return &TypeOfPackagingQuery{
		config:              topq.config,
		ctx:                 topq.ctx.Clone(),
		order:               append([]typeofpackaging.OrderOption{}, topq.order...),
		inters:              append([]Interceptor{}, topq.inters...),
		predicates:          append([]predicate.TypeOfPackaging{}, topq.predicates...),
		withTypeOfPackaging: topq.withTypeOfPackaging.Clone(),
		// clone intermediate query.
		sql:  topq.sql.Clone(),
		path: topq.path,
	}
}

// WithTypeOfPackaging tells the query-builder to eager-load the nodes that are connected to
// the "type_of_packaging" edge. The optional arguments are used to configure the query builder of the edge.
func (topq *TypeOfPackagingQuery) WithTypeOfPackaging(opts ...func(*ProductQuery)) *TypeOfPackagingQuery {
	query := (&ProductClient{config: topq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	topq.withTypeOfPackaging = query
	return topq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TypeOfPackaging.Query().
//		GroupBy(typeofpackaging.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (topq *TypeOfPackagingQuery) GroupBy(field string, fields ...string) *TypeOfPackagingGroupBy {
	topq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TypeOfPackagingGroupBy{build: topq}
	grbuild.flds = &topq.ctx.Fields
	grbuild.label = typeofpackaging.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.TypeOfPackaging.Query().
//		Select(typeofpackaging.FieldName).
//		Scan(ctx, &v)
func (topq *TypeOfPackagingQuery) Select(fields ...string) *TypeOfPackagingSelect {
	topq.ctx.Fields = append(topq.ctx.Fields, fields...)
	sbuild := &TypeOfPackagingSelect{TypeOfPackagingQuery: topq}
	sbuild.label = typeofpackaging.Label
	sbuild.flds, sbuild.scan = &topq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TypeOfPackagingSelect configured with the given aggregations.
func (topq *TypeOfPackagingQuery) Aggregate(fns ...AggregateFunc) *TypeOfPackagingSelect {
	return topq.Select().Aggregate(fns...)
}

func (topq *TypeOfPackagingQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range topq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, topq); err != nil {
				return err
			}
		}
	}
	for _, f := range topq.ctx.Fields {
		if !typeofpackaging.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if topq.path != nil {
		prev, err := topq.path(ctx)
		if err != nil {
			return err
		}
		topq.sql = prev
	}
	return nil
}

func (topq *TypeOfPackagingQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TypeOfPackaging, error) {
	var (
		nodes       = []*TypeOfPackaging{}
		_spec       = topq.querySpec()
		loadedTypes = [1]bool{
			topq.withTypeOfPackaging != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TypeOfPackaging).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TypeOfPackaging{config: topq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, topq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := topq.withTypeOfPackaging; query != nil {
		if err := topq.loadTypeOfPackaging(ctx, query, nodes,
			func(n *TypeOfPackaging) { n.Edges.TypeOfPackaging = []*Product{} },
			func(n *TypeOfPackaging, e *Product) { n.Edges.TypeOfPackaging = append(n.Edges.TypeOfPackaging, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (topq *TypeOfPackagingQuery) loadTypeOfPackaging(ctx context.Context, query *ProductQuery, nodes []*TypeOfPackaging, init func(*TypeOfPackaging), assign func(*TypeOfPackaging, *Product)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*TypeOfPackaging)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(product.FieldTypeOfPackagingID)
	}
	query.Where(predicate.Product(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(typeofpackaging.TypeOfPackagingColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TypeOfPackagingID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "type_of_packaging_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (topq *TypeOfPackagingQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := topq.querySpec()
	_spec.Node.Columns = topq.ctx.Fields
	if len(topq.ctx.Fields) > 0 {
		_spec.Unique = topq.ctx.Unique != nil && *topq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, topq.driver, _spec)
}

func (topq *TypeOfPackagingQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(typeofpackaging.Table, typeofpackaging.Columns, sqlgraph.NewFieldSpec(typeofpackaging.FieldID, field.TypeInt))
	_spec.From = topq.sql
	if unique := topq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if topq.path != nil {
		_spec.Unique = true
	}
	if fields := topq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, typeofpackaging.FieldID)
		for i := range fields {
			if fields[i] != typeofpackaging.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := topq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := topq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := topq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := topq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (topq *TypeOfPackagingQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(topq.driver.Dialect())
	t1 := builder.Table(typeofpackaging.Table)
	columns := topq.ctx.Fields
	if len(columns) == 0 {
		columns = typeofpackaging.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if topq.sql != nil {
		selector = topq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if topq.ctx.Unique != nil && *topq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range topq.predicates {
		p(selector)
	}
	for _, p := range topq.order {
		p(selector)
	}
	if offset := topq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := topq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TypeOfPackagingGroupBy is the group-by builder for TypeOfPackaging entities.
type TypeOfPackagingGroupBy struct {
	selector
	build *TypeOfPackagingQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (topgb *TypeOfPackagingGroupBy) Aggregate(fns ...AggregateFunc) *TypeOfPackagingGroupBy {
	topgb.fns = append(topgb.fns, fns...)
	return topgb
}

// Scan applies the selector query and scans the result into the given value.
func (topgb *TypeOfPackagingGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, topgb.build.ctx, ent.OpQueryGroupBy)
	if err := topgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TypeOfPackagingQuery, *TypeOfPackagingGroupBy](ctx, topgb.build, topgb, topgb.build.inters, v)
}

func (topgb *TypeOfPackagingGroupBy) sqlScan(ctx context.Context, root *TypeOfPackagingQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(topgb.fns))
	for _, fn := range topgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*topgb.flds)+len(topgb.fns))
		for _, f := range *topgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*topgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := topgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TypeOfPackagingSelect is the builder for selecting fields of TypeOfPackaging entities.
type TypeOfPackagingSelect struct {
	*TypeOfPackagingQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tops *TypeOfPackagingSelect) Aggregate(fns ...AggregateFunc) *TypeOfPackagingSelect {
	tops.fns = append(tops.fns, fns...)
	return tops
}

// Scan applies the selector query and scans the result into the given value.
func (tops *TypeOfPackagingSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tops.ctx, ent.OpQuerySelect)
	if err := tops.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TypeOfPackagingQuery, *TypeOfPackagingSelect](ctx, tops.TypeOfPackagingQuery, tops, tops.inters, v)
}

func (tops *TypeOfPackagingSelect) sqlScan(ctx context.Context, root *TypeOfPackagingQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tops.fns))
	for _, fn := range tops.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tops.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tops.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
