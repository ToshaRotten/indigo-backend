// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"main/db/ent/user"
	"main/db/ent/usertoken"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserToken is the model entity for the UserToken schema.
type UserToken struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// ExpirationDate holds the value of the "expiration_date" field.
	ExpirationDate time.Time `json:"expiration_date,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// LastUsed holds the value of the "last_used" field.
	LastUsed string `json:"last_used,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserTokenQuery when eager-loading is set.
	Edges        UserTokenEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserTokenEdges holds the relations/edges for other nodes in the graph.
type UserTokenEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserTokenEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usertoken.FieldID, usertoken.FieldUserID:
			values[i] = new(sql.NullInt64)
		case usertoken.FieldToken, usertoken.FieldType, usertoken.FieldStatus, usertoken.FieldLastUsed:
			values[i] = new(sql.NullString)
		case usertoken.FieldExpirationDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserToken fields.
func (ut *UserToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usertoken.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ut.ID = int(value.Int64)
		case usertoken.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				ut.Token = value.String
			}
		case usertoken.FieldExpirationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiration_date", values[i])
			} else if value.Valid {
				ut.ExpirationDate = value.Time
			}
		case usertoken.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ut.Type = value.String
			}
		case usertoken.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ut.Status = value.String
			}
		case usertoken.FieldLastUsed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_used", values[i])
			} else if value.Valid {
				ut.LastUsed = value.String
			}
		case usertoken.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ut.UserID = int(value.Int64)
			}
		default:
			ut.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserToken.
// This includes values selected through modifiers, order, etc.
func (ut *UserToken) Value(name string) (ent.Value, error) {
	return ut.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserToken entity.
func (ut *UserToken) QueryUser() *UserQuery {
	return NewUserTokenClient(ut.config).QueryUser(ut)
}

// Update returns a builder for updating this UserToken.
// Note that you need to call UserToken.Unwrap() before calling this method if this UserToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (ut *UserToken) Update() *UserTokenUpdateOne {
	return NewUserTokenClient(ut.config).UpdateOne(ut)
}

// Unwrap unwraps the UserToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ut *UserToken) Unwrap() *UserToken {
	_tx, ok := ut.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserToken is not a transactional entity")
	}
	ut.config.driver = _tx.drv
	return ut
}

// String implements the fmt.Stringer.
func (ut *UserToken) String() string {
	var builder strings.Builder
	builder.WriteString("UserToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ut.ID))
	builder.WriteString("token=")
	builder.WriteString(ut.Token)
	builder.WriteString(", ")
	builder.WriteString("expiration_date=")
	builder.WriteString(ut.ExpirationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(ut.Type)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ut.Status)
	builder.WriteString(", ")
	builder.WriteString("last_used=")
	builder.WriteString(ut.LastUsed)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ut.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// UserTokens is a parsable slice of UserToken.
type UserTokens []*UserToken
