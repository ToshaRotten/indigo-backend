// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/db/ent/chat"
	"main/db/ent/message"
	"main/db/ent/predicate"
	"main/db/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageUpdate is the builder for updating Message entities.
type MessageUpdate struct {
	config
	hooks    []Hook
	mutation *MessageMutation
}

// Where appends a list predicates to the MessageUpdate builder.
func (mu *MessageUpdate) Where(ps ...predicate.Message) *MessageUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetText sets the "text" field.
func (mu *MessageUpdate) SetText(s string) *MessageUpdate {
	mu.mutation.SetText(s)
	return mu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableText(s *string) *MessageUpdate {
	if s != nil {
		mu.SetText(*s)
	}
	return mu
}

// ClearText clears the value of the "text" field.
func (mu *MessageUpdate) ClearText() *MessageUpdate {
	mu.mutation.ClearText()
	return mu
}

// SetSendedAt sets the "sended_at" field.
func (mu *MessageUpdate) SetSendedAt(s string) *MessageUpdate {
	mu.mutation.SetSendedAt(s)
	return mu
}

// SetNillableSendedAt sets the "sended_at" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableSendedAt(s *string) *MessageUpdate {
	if s != nil {
		mu.SetSendedAt(*s)
	}
	return mu
}

// ClearSendedAt clears the value of the "sended_at" field.
func (mu *MessageUpdate) ClearSendedAt() *MessageUpdate {
	mu.mutation.ClearSendedAt()
	return mu
}

// SetFilePath sets the "file_path" field.
func (mu *MessageUpdate) SetFilePath(s string) *MessageUpdate {
	mu.mutation.SetFilePath(s)
	return mu
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableFilePath(s *string) *MessageUpdate {
	if s != nil {
		mu.SetFilePath(*s)
	}
	return mu
}

// ClearFilePath clears the value of the "file_path" field.
func (mu *MessageUpdate) ClearFilePath() *MessageUpdate {
	mu.mutation.ClearFilePath()
	return mu
}

// SetFileType sets the "file_type" field.
func (mu *MessageUpdate) SetFileType(s string) *MessageUpdate {
	mu.mutation.SetFileType(s)
	return mu
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableFileType(s *string) *MessageUpdate {
	if s != nil {
		mu.SetFileType(*s)
	}
	return mu
}

// ClearFileType clears the value of the "file_type" field.
func (mu *MessageUpdate) ClearFileType() *MessageUpdate {
	mu.mutation.ClearFileType()
	return mu
}

// SetChatID sets the "chat_id" field.
func (mu *MessageUpdate) SetChatID(i int) *MessageUpdate {
	mu.mutation.SetChatID(i)
	return mu
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableChatID(i *int) *MessageUpdate {
	if i != nil {
		mu.SetChatID(*i)
	}
	return mu
}

// ClearChatID clears the value of the "chat_id" field.
func (mu *MessageUpdate) ClearChatID() *MessageUpdate {
	mu.mutation.ClearChatID()
	return mu
}

// SetUserID sets the "user_id" field.
func (mu *MessageUpdate) SetUserID(i int) *MessageUpdate {
	mu.mutation.SetUserID(i)
	return mu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableUserID(i *int) *MessageUpdate {
	if i != nil {
		mu.SetUserID(*i)
	}
	return mu
}

// ClearUserID clears the value of the "user_id" field.
func (mu *MessageUpdate) ClearUserID() *MessageUpdate {
	mu.mutation.ClearUserID()
	return mu
}

// SetChat sets the "chat" edge to the Chat entity.
func (mu *MessageUpdate) SetChat(c *Chat) *MessageUpdate {
	return mu.SetChatID(c.ID)
}

// SetUser sets the "user" edge to the User entity.
func (mu *MessageUpdate) SetUser(u *User) *MessageUpdate {
	return mu.SetUserID(u.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (mu *MessageUpdate) Mutation() *MessageMutation {
	return mu.mutation
}

// ClearChat clears the "chat" edge to the Chat entity.
func (mu *MessageUpdate) ClearChat() *MessageUpdate {
	mu.mutation.ClearChat()
	return mu
}

// ClearUser clears the "user" edge to the User entity.
func (mu *MessageUpdate) ClearUser() *MessageUpdate {
	mu.mutation.ClearUser()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MessageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MessageUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MessageUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MessageUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MessageUpdate) check() error {
	if v, ok := mu.mutation.Text(); ok {
		if err := message.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Message.text": %w`, err)}
		}
	}
	if v, ok := mu.mutation.SendedAt(); ok {
		if err := message.SendedAtValidator(v); err != nil {
			return &ValidationError{Name: "sended_at", err: fmt.Errorf(`ent: validator failed for field "Message.sended_at": %w`, err)}
		}
	}
	if v, ok := mu.mutation.FilePath(); ok {
		if err := message.FilePathValidator(v); err != nil {
			return &ValidationError{Name: "file_path", err: fmt.Errorf(`ent: validator failed for field "Message.file_path": %w`, err)}
		}
	}
	if v, ok := mu.mutation.FileType(); ok {
		if err := message.FileTypeValidator(v); err != nil {
			return &ValidationError{Name: "file_type", err: fmt.Errorf(`ent: validator failed for field "Message.file_type": %w`, err)}
		}
	}
	return nil
}

func (mu *MessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Text(); ok {
		_spec.SetField(message.FieldText, field.TypeString, value)
	}
	if mu.mutation.TextCleared() {
		_spec.ClearField(message.FieldText, field.TypeString)
	}
	if value, ok := mu.mutation.SendedAt(); ok {
		_spec.SetField(message.FieldSendedAt, field.TypeString, value)
	}
	if mu.mutation.SendedAtCleared() {
		_spec.ClearField(message.FieldSendedAt, field.TypeString)
	}
	if value, ok := mu.mutation.FilePath(); ok {
		_spec.SetField(message.FieldFilePath, field.TypeString, value)
	}
	if mu.mutation.FilePathCleared() {
		_spec.ClearField(message.FieldFilePath, field.TypeString)
	}
	if value, ok := mu.mutation.FileType(); ok {
		_spec.SetField(message.FieldFileType, field.TypeString, value)
	}
	if mu.mutation.FileTypeCleared() {
		_spec.ClearField(message.FieldFileType, field.TypeString)
	}
	if mu.mutation.ChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.ChatTable,
			Columns: []string{message.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.ChatTable,
			Columns: []string{message.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.UserTable,
			Columns: []string{message.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.UserTable,
			Columns: []string{message.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MessageUpdateOne is the builder for updating a single Message entity.
type MessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageMutation
}

// SetText sets the "text" field.
func (muo *MessageUpdateOne) SetText(s string) *MessageUpdateOne {
	muo.mutation.SetText(s)
	return muo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableText(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetText(*s)
	}
	return muo
}

// ClearText clears the value of the "text" field.
func (muo *MessageUpdateOne) ClearText() *MessageUpdateOne {
	muo.mutation.ClearText()
	return muo
}

// SetSendedAt sets the "sended_at" field.
func (muo *MessageUpdateOne) SetSendedAt(s string) *MessageUpdateOne {
	muo.mutation.SetSendedAt(s)
	return muo
}

// SetNillableSendedAt sets the "sended_at" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableSendedAt(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetSendedAt(*s)
	}
	return muo
}

// ClearSendedAt clears the value of the "sended_at" field.
func (muo *MessageUpdateOne) ClearSendedAt() *MessageUpdateOne {
	muo.mutation.ClearSendedAt()
	return muo
}

// SetFilePath sets the "file_path" field.
func (muo *MessageUpdateOne) SetFilePath(s string) *MessageUpdateOne {
	muo.mutation.SetFilePath(s)
	return muo
}

// SetNillableFilePath sets the "file_path" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableFilePath(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetFilePath(*s)
	}
	return muo
}

// ClearFilePath clears the value of the "file_path" field.
func (muo *MessageUpdateOne) ClearFilePath() *MessageUpdateOne {
	muo.mutation.ClearFilePath()
	return muo
}

// SetFileType sets the "file_type" field.
func (muo *MessageUpdateOne) SetFileType(s string) *MessageUpdateOne {
	muo.mutation.SetFileType(s)
	return muo
}

// SetNillableFileType sets the "file_type" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableFileType(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetFileType(*s)
	}
	return muo
}

// ClearFileType clears the value of the "file_type" field.
func (muo *MessageUpdateOne) ClearFileType() *MessageUpdateOne {
	muo.mutation.ClearFileType()
	return muo
}

// SetChatID sets the "chat_id" field.
func (muo *MessageUpdateOne) SetChatID(i int) *MessageUpdateOne {
	muo.mutation.SetChatID(i)
	return muo
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableChatID(i *int) *MessageUpdateOne {
	if i != nil {
		muo.SetChatID(*i)
	}
	return muo
}

// ClearChatID clears the value of the "chat_id" field.
func (muo *MessageUpdateOne) ClearChatID() *MessageUpdateOne {
	muo.mutation.ClearChatID()
	return muo
}

// SetUserID sets the "user_id" field.
func (muo *MessageUpdateOne) SetUserID(i int) *MessageUpdateOne {
	muo.mutation.SetUserID(i)
	return muo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableUserID(i *int) *MessageUpdateOne {
	if i != nil {
		muo.SetUserID(*i)
	}
	return muo
}

// ClearUserID clears the value of the "user_id" field.
func (muo *MessageUpdateOne) ClearUserID() *MessageUpdateOne {
	muo.mutation.ClearUserID()
	return muo
}

// SetChat sets the "chat" edge to the Chat entity.
func (muo *MessageUpdateOne) SetChat(c *Chat) *MessageUpdateOne {
	return muo.SetChatID(c.ID)
}

// SetUser sets the "user" edge to the User entity.
func (muo *MessageUpdateOne) SetUser(u *User) *MessageUpdateOne {
	return muo.SetUserID(u.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (muo *MessageUpdateOne) Mutation() *MessageMutation {
	return muo.mutation
}

// ClearChat clears the "chat" edge to the Chat entity.
func (muo *MessageUpdateOne) ClearChat() *MessageUpdateOne {
	muo.mutation.ClearChat()
	return muo
}

// ClearUser clears the "user" edge to the User entity.
func (muo *MessageUpdateOne) ClearUser() *MessageUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// Where appends a list predicates to the MessageUpdate builder.
func (muo *MessageUpdateOne) Where(ps ...predicate.Message) *MessageUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MessageUpdateOne) Select(field string, fields ...string) *MessageUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Message entity.
func (muo *MessageUpdateOne) Save(ctx context.Context) (*Message, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MessageUpdateOne) SaveX(ctx context.Context) *Message {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MessageUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MessageUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MessageUpdateOne) check() error {
	if v, ok := muo.mutation.Text(); ok {
		if err := message.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "Message.text": %w`, err)}
		}
	}
	if v, ok := muo.mutation.SendedAt(); ok {
		if err := message.SendedAtValidator(v); err != nil {
			return &ValidationError{Name: "sended_at", err: fmt.Errorf(`ent: validator failed for field "Message.sended_at": %w`, err)}
		}
	}
	if v, ok := muo.mutation.FilePath(); ok {
		if err := message.FilePathValidator(v); err != nil {
			return &ValidationError{Name: "file_path", err: fmt.Errorf(`ent: validator failed for field "Message.file_path": %w`, err)}
		}
	}
	if v, ok := muo.mutation.FileType(); ok {
		if err := message.FileTypeValidator(v); err != nil {
			return &ValidationError{Name: "file_type", err: fmt.Errorf(`ent: validator failed for field "Message.file_type": %w`, err)}
		}
	}
	return nil
}

func (muo *MessageUpdateOne) sqlSave(ctx context.Context) (_node *Message, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Message.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, message.FieldID)
		for _, f := range fields {
			if !message.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != message.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Text(); ok {
		_spec.SetField(message.FieldText, field.TypeString, value)
	}
	if muo.mutation.TextCleared() {
		_spec.ClearField(message.FieldText, field.TypeString)
	}
	if value, ok := muo.mutation.SendedAt(); ok {
		_spec.SetField(message.FieldSendedAt, field.TypeString, value)
	}
	if muo.mutation.SendedAtCleared() {
		_spec.ClearField(message.FieldSendedAt, field.TypeString)
	}
	if value, ok := muo.mutation.FilePath(); ok {
		_spec.SetField(message.FieldFilePath, field.TypeString, value)
	}
	if muo.mutation.FilePathCleared() {
		_spec.ClearField(message.FieldFilePath, field.TypeString)
	}
	if value, ok := muo.mutation.FileType(); ok {
		_spec.SetField(message.FieldFileType, field.TypeString, value)
	}
	if muo.mutation.FileTypeCleared() {
		_spec.ClearField(message.FieldFileType, field.TypeString)
	}
	if muo.mutation.ChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.ChatTable,
			Columns: []string{message.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.ChatTable,
			Columns: []string{message.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.UserTable,
			Columns: []string{message.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.UserTable,
			Columns: []string{message.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Message{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
