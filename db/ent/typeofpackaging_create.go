// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"main/db/ent/product"
	"main/db/ent/typeofpackaging"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TypeOfPackagingCreate is the builder for creating a TypeOfPackaging entity.
type TypeOfPackagingCreate struct {
	config
	mutation *TypeOfPackagingMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (topc *TypeOfPackagingCreate) SetName(s string) *TypeOfPackagingCreate {
	topc.mutation.SetName(s)
	return topc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (topc *TypeOfPackagingCreate) SetNillableName(s *string) *TypeOfPackagingCreate {
	if s != nil {
		topc.SetName(*s)
	}
	return topc
}

// AddTypeOfPackagingIDs adds the "type_of_packaging" edge to the Product entity by IDs.
func (topc *TypeOfPackagingCreate) AddTypeOfPackagingIDs(ids ...int) *TypeOfPackagingCreate {
	topc.mutation.AddTypeOfPackagingIDs(ids...)
	return topc
}

// AddTypeOfPackaging adds the "type_of_packaging" edges to the Product entity.
func (topc *TypeOfPackagingCreate) AddTypeOfPackaging(p ...*Product) *TypeOfPackagingCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return topc.AddTypeOfPackagingIDs(ids...)
}

// Mutation returns the TypeOfPackagingMutation object of the builder.
func (topc *TypeOfPackagingCreate) Mutation() *TypeOfPackagingMutation {
	return topc.mutation
}

// Save creates the TypeOfPackaging in the database.
func (topc *TypeOfPackagingCreate) Save(ctx context.Context) (*TypeOfPackaging, error) {
	return withHooks(ctx, topc.sqlSave, topc.mutation, topc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (topc *TypeOfPackagingCreate) SaveX(ctx context.Context) *TypeOfPackaging {
	v, err := topc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (topc *TypeOfPackagingCreate) Exec(ctx context.Context) error {
	_, err := topc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (topc *TypeOfPackagingCreate) ExecX(ctx context.Context) {
	if err := topc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (topc *TypeOfPackagingCreate) check() error {
	if v, ok := topc.mutation.Name(); ok {
		if err := typeofpackaging.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TypeOfPackaging.name": %w`, err)}
		}
	}
	return nil
}

func (topc *TypeOfPackagingCreate) sqlSave(ctx context.Context) (*TypeOfPackaging, error) {
	if err := topc.check(); err != nil {
		return nil, err
	}
	_node, _spec := topc.createSpec()
	if err := sqlgraph.CreateNode(ctx, topc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	topc.mutation.id = &_node.ID
	topc.mutation.done = true
	return _node, nil
}

func (topc *TypeOfPackagingCreate) createSpec() (*TypeOfPackaging, *sqlgraph.CreateSpec) {
	var (
		_node = &TypeOfPackaging{config: topc.config}
		_spec = sqlgraph.NewCreateSpec(typeofpackaging.Table, sqlgraph.NewFieldSpec(typeofpackaging.FieldID, field.TypeInt))
	)
	if value, ok := topc.mutation.Name(); ok {
		_spec.SetField(typeofpackaging.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := topc.mutation.TypeOfPackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   typeofpackaging.TypeOfPackagingTable,
			Columns: []string{typeofpackaging.TypeOfPackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TypeOfPackagingCreateBulk is the builder for creating many TypeOfPackaging entities in bulk.
type TypeOfPackagingCreateBulk struct {
	config
	err      error
	builders []*TypeOfPackagingCreate
}

// Save creates the TypeOfPackaging entities in the database.
func (topcb *TypeOfPackagingCreateBulk) Save(ctx context.Context) ([]*TypeOfPackaging, error) {
	if topcb.err != nil {
		return nil, topcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(topcb.builders))
	nodes := make([]*TypeOfPackaging, len(topcb.builders))
	mutators := make([]Mutator, len(topcb.builders))
	for i := range topcb.builders {
		func(i int, root context.Context) {
			builder := topcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TypeOfPackagingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, topcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, topcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, topcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (topcb *TypeOfPackagingCreateBulk) SaveX(ctx context.Context) []*TypeOfPackaging {
	v, err := topcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (topcb *TypeOfPackagingCreateBulk) Exec(ctx context.Context) error {
	_, err := topcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (topcb *TypeOfPackagingCreateBulk) ExecX(ctx context.Context) {
	if err := topcb.Exec(ctx); err != nil {
		panic(err)
	}
}
