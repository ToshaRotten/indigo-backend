// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"main/db/ent/product"
	"main/db/ent/productprice"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductPriceCreate is the builder for creating a ProductPrice entity.
type ProductPriceCreate struct {
	config
	mutation *ProductPriceMutation
	hooks    []Hook
}

// SetModificationDate sets the "modification_date" field.
func (ppc *ProductPriceCreate) SetModificationDate(t time.Time) *ProductPriceCreate {
	ppc.mutation.SetModificationDate(t)
	return ppc
}

// SetNillableModificationDate sets the "modification_date" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableModificationDate(t *time.Time) *ProductPriceCreate {
	if t != nil {
		ppc.SetModificationDate(*t)
	}
	return ppc
}

// SetNewPrice sets the "new_price" field.
func (ppc *ProductPriceCreate) SetNewPrice(f float64) *ProductPriceCreate {
	ppc.mutation.SetNewPrice(f)
	return ppc
}

// SetNillableNewPrice sets the "new_price" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableNewPrice(f *float64) *ProductPriceCreate {
	if f != nil {
		ppc.SetNewPrice(*f)
	}
	return ppc
}

// SetProductID sets the "product_id" field.
func (ppc *ProductPriceCreate) SetProductID(i int) *ProductPriceCreate {
	ppc.mutation.SetProductID(i)
	return ppc
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (ppc *ProductPriceCreate) SetNillableProductID(i *int) *ProductPriceCreate {
	if i != nil {
		ppc.SetProductID(*i)
	}
	return ppc
}

// SetProduct sets the "product" edge to the Product entity.
func (ppc *ProductPriceCreate) SetProduct(p *Product) *ProductPriceCreate {
	return ppc.SetProductID(p.ID)
}

// Mutation returns the ProductPriceMutation object of the builder.
func (ppc *ProductPriceCreate) Mutation() *ProductPriceMutation {
	return ppc.mutation
}

// Save creates the ProductPrice in the database.
func (ppc *ProductPriceCreate) Save(ctx context.Context) (*ProductPrice, error) {
	return withHooks(ctx, ppc.sqlSave, ppc.mutation, ppc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ppc *ProductPriceCreate) SaveX(ctx context.Context) *ProductPrice {
	v, err := ppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppc *ProductPriceCreate) Exec(ctx context.Context) error {
	_, err := ppc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppc *ProductPriceCreate) ExecX(ctx context.Context) {
	if err := ppc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppc *ProductPriceCreate) check() error {
	return nil
}

func (ppc *ProductPriceCreate) sqlSave(ctx context.Context) (*ProductPrice, error) {
	if err := ppc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ppc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ppc.mutation.id = &_node.ID
	ppc.mutation.done = true
	return _node, nil
}

func (ppc *ProductPriceCreate) createSpec() (*ProductPrice, *sqlgraph.CreateSpec) {
	var (
		_node = &ProductPrice{config: ppc.config}
		_spec = sqlgraph.NewCreateSpec(productprice.Table, sqlgraph.NewFieldSpec(productprice.FieldID, field.TypeInt))
	)
	if value, ok := ppc.mutation.ModificationDate(); ok {
		_spec.SetField(productprice.FieldModificationDate, field.TypeTime, value)
		_node.ModificationDate = value
	}
	if value, ok := ppc.mutation.NewPrice(); ok {
		_spec.SetField(productprice.FieldNewPrice, field.TypeFloat64, value)
		_node.NewPrice = value
	}
	if nodes := ppc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductTable,
			Columns: []string{productprice.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProductPriceCreateBulk is the builder for creating many ProductPrice entities in bulk.
type ProductPriceCreateBulk struct {
	config
	err      error
	builders []*ProductPriceCreate
}

// Save creates the ProductPrice entities in the database.
func (ppcb *ProductPriceCreateBulk) Save(ctx context.Context) ([]*ProductPrice, error) {
	if ppcb.err != nil {
		return nil, ppcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ppcb.builders))
	nodes := make([]*ProductPrice, len(ppcb.builders))
	mutators := make([]Mutator, len(ppcb.builders))
	for i := range ppcb.builders {
		func(i int, root context.Context) {
			builder := ppcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductPriceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ppcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ppcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ppcb *ProductPriceCreateBulk) SaveX(ctx context.Context) []*ProductPrice {
	v, err := ppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppcb *ProductPriceCreateBulk) Exec(ctx context.Context) error {
	_, err := ppcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppcb *ProductPriceCreateBulk) ExecX(ctx context.Context) {
	if err := ppcb.Exec(ctx); err != nil {
		panic(err)
	}
}
