// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"main/db/ent/predicate"
	"main/db/ent/typeofpackaging"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TypeOfPackagingDelete is the builder for deleting a TypeOfPackaging entity.
type TypeOfPackagingDelete struct {
	config
	hooks    []Hook
	mutation *TypeOfPackagingMutation
}

// Where appends a list predicates to the TypeOfPackagingDelete builder.
func (topd *TypeOfPackagingDelete) Where(ps ...predicate.TypeOfPackaging) *TypeOfPackagingDelete {
	topd.mutation.Where(ps...)
	return topd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (topd *TypeOfPackagingDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, topd.sqlExec, topd.mutation, topd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (topd *TypeOfPackagingDelete) ExecX(ctx context.Context) int {
	n, err := topd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (topd *TypeOfPackagingDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(typeofpackaging.Table, sqlgraph.NewFieldSpec(typeofpackaging.FieldID, field.TypeInt))
	if ps := topd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, topd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	topd.mutation.done = true
	return affected, err
}

// TypeOfPackagingDeleteOne is the builder for deleting a single TypeOfPackaging entity.
type TypeOfPackagingDeleteOne struct {
	topd *TypeOfPackagingDelete
}

// Where appends a list predicates to the TypeOfPackagingDelete builder.
func (topdo *TypeOfPackagingDeleteOne) Where(ps ...predicate.TypeOfPackaging) *TypeOfPackagingDeleteOne {
	topdo.topd.mutation.Where(ps...)
	return topdo
}

// Exec executes the deletion query.
func (topdo *TypeOfPackagingDeleteOne) Exec(ctx context.Context) error {
	n, err := topdo.topd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{typeofpackaging.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (topdo *TypeOfPackagingDeleteOne) ExecX(ctx context.Context) {
	if err := topdo.Exec(ctx); err != nil {
		panic(err)
	}
}
