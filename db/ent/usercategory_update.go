// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/db/ent/predicate"
	"main/db/ent/user"
	"main/db/ent/usercategory"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCategoryUpdate is the builder for updating UserCategory entities.
type UserCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *UserCategoryMutation
}

// Where appends a list predicates to the UserCategoryUpdate builder.
func (ucu *UserCategoryUpdate) Where(ps ...predicate.UserCategory) *UserCategoryUpdate {
	ucu.mutation.Where(ps...)
	return ucu
}

// SetName sets the "name" field.
func (ucu *UserCategoryUpdate) SetName(s string) *UserCategoryUpdate {
	ucu.mutation.SetName(s)
	return ucu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ucu *UserCategoryUpdate) SetNillableName(s *string) *UserCategoryUpdate {
	if s != nil {
		ucu.SetName(*s)
	}
	return ucu
}

// ClearName clears the value of the "name" field.
func (ucu *UserCategoryUpdate) ClearName() *UserCategoryUpdate {
	ucu.mutation.ClearName()
	return ucu
}

// AddUserCategoryUserIDs adds the "user_category_user" edge to the User entity by IDs.
func (ucu *UserCategoryUpdate) AddUserCategoryUserIDs(ids ...int) *UserCategoryUpdate {
	ucu.mutation.AddUserCategoryUserIDs(ids...)
	return ucu
}

// AddUserCategoryUser adds the "user_category_user" edges to the User entity.
func (ucu *UserCategoryUpdate) AddUserCategoryUser(u ...*User) *UserCategoryUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ucu.AddUserCategoryUserIDs(ids...)
}

// Mutation returns the UserCategoryMutation object of the builder.
func (ucu *UserCategoryUpdate) Mutation() *UserCategoryMutation {
	return ucu.mutation
}

// ClearUserCategoryUser clears all "user_category_user" edges to the User entity.
func (ucu *UserCategoryUpdate) ClearUserCategoryUser() *UserCategoryUpdate {
	ucu.mutation.ClearUserCategoryUser()
	return ucu
}

// RemoveUserCategoryUserIDs removes the "user_category_user" edge to User entities by IDs.
func (ucu *UserCategoryUpdate) RemoveUserCategoryUserIDs(ids ...int) *UserCategoryUpdate {
	ucu.mutation.RemoveUserCategoryUserIDs(ids...)
	return ucu
}

// RemoveUserCategoryUser removes "user_category_user" edges to User entities.
func (ucu *UserCategoryUpdate) RemoveUserCategoryUser(u ...*User) *UserCategoryUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ucu.RemoveUserCategoryUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucu *UserCategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ucu.sqlSave, ucu.mutation, ucu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucu *UserCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ucu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucu *UserCategoryUpdate) Exec(ctx context.Context) error {
	_, err := ucu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucu *UserCategoryUpdate) ExecX(ctx context.Context) {
	if err := ucu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucu *UserCategoryUpdate) check() error {
	if v, ok := ucu.mutation.Name(); ok {
		if err := usercategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "UserCategory.name": %w`, err)}
		}
	}
	return nil
}

func (ucu *UserCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ucu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usercategory.Table, usercategory.Columns, sqlgraph.NewFieldSpec(usercategory.FieldID, field.TypeInt))
	if ps := ucu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucu.mutation.Name(); ok {
		_spec.SetField(usercategory.FieldName, field.TypeString, value)
	}
	if ucu.mutation.NameCleared() {
		_spec.ClearField(usercategory.FieldName, field.TypeString)
	}
	if ucu.mutation.UserCategoryUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercategory.UserCategoryUserTable,
			Columns: []string{usercategory.UserCategoryUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucu.mutation.RemovedUserCategoryUserIDs(); len(nodes) > 0 && !ucu.mutation.UserCategoryUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercategory.UserCategoryUserTable,
			Columns: []string{usercategory.UserCategoryUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucu.mutation.UserCategoryUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercategory.UserCategoryUserTable,
			Columns: []string{usercategory.UserCategoryUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ucu.mutation.done = true
	return n, nil
}

// UserCategoryUpdateOne is the builder for updating a single UserCategory entity.
type UserCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserCategoryMutation
}

// SetName sets the "name" field.
func (ucuo *UserCategoryUpdateOne) SetName(s string) *UserCategoryUpdateOne {
	ucuo.mutation.SetName(s)
	return ucuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ucuo *UserCategoryUpdateOne) SetNillableName(s *string) *UserCategoryUpdateOne {
	if s != nil {
		ucuo.SetName(*s)
	}
	return ucuo
}

// ClearName clears the value of the "name" field.
func (ucuo *UserCategoryUpdateOne) ClearName() *UserCategoryUpdateOne {
	ucuo.mutation.ClearName()
	return ucuo
}

// AddUserCategoryUserIDs adds the "user_category_user" edge to the User entity by IDs.
func (ucuo *UserCategoryUpdateOne) AddUserCategoryUserIDs(ids ...int) *UserCategoryUpdateOne {
	ucuo.mutation.AddUserCategoryUserIDs(ids...)
	return ucuo
}

// AddUserCategoryUser adds the "user_category_user" edges to the User entity.
func (ucuo *UserCategoryUpdateOne) AddUserCategoryUser(u ...*User) *UserCategoryUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ucuo.AddUserCategoryUserIDs(ids...)
}

// Mutation returns the UserCategoryMutation object of the builder.
func (ucuo *UserCategoryUpdateOne) Mutation() *UserCategoryMutation {
	return ucuo.mutation
}

// ClearUserCategoryUser clears all "user_category_user" edges to the User entity.
func (ucuo *UserCategoryUpdateOne) ClearUserCategoryUser() *UserCategoryUpdateOne {
	ucuo.mutation.ClearUserCategoryUser()
	return ucuo
}

// RemoveUserCategoryUserIDs removes the "user_category_user" edge to User entities by IDs.
func (ucuo *UserCategoryUpdateOne) RemoveUserCategoryUserIDs(ids ...int) *UserCategoryUpdateOne {
	ucuo.mutation.RemoveUserCategoryUserIDs(ids...)
	return ucuo
}

// RemoveUserCategoryUser removes "user_category_user" edges to User entities.
func (ucuo *UserCategoryUpdateOne) RemoveUserCategoryUser(u ...*User) *UserCategoryUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ucuo.RemoveUserCategoryUserIDs(ids...)
}

// Where appends a list predicates to the UserCategoryUpdate builder.
func (ucuo *UserCategoryUpdateOne) Where(ps ...predicate.UserCategory) *UserCategoryUpdateOne {
	ucuo.mutation.Where(ps...)
	return ucuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucuo *UserCategoryUpdateOne) Select(field string, fields ...string) *UserCategoryUpdateOne {
	ucuo.fields = append([]string{field}, fields...)
	return ucuo
}

// Save executes the query and returns the updated UserCategory entity.
func (ucuo *UserCategoryUpdateOne) Save(ctx context.Context) (*UserCategory, error) {
	return withHooks(ctx, ucuo.sqlSave, ucuo.mutation, ucuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucuo *UserCategoryUpdateOne) SaveX(ctx context.Context) *UserCategory {
	node, err := ucuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucuo *UserCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ucuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucuo *UserCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := ucuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucuo *UserCategoryUpdateOne) check() error {
	if v, ok := ucuo.mutation.Name(); ok {
		if err := usercategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "UserCategory.name": %w`, err)}
		}
	}
	return nil
}

func (ucuo *UserCategoryUpdateOne) sqlSave(ctx context.Context) (_node *UserCategory, err error) {
	if err := ucuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usercategory.Table, usercategory.Columns, sqlgraph.NewFieldSpec(usercategory.FieldID, field.TypeInt))
	id, ok := ucuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usercategory.FieldID)
		for _, f := range fields {
			if !usercategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usercategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucuo.mutation.Name(); ok {
		_spec.SetField(usercategory.FieldName, field.TypeString, value)
	}
	if ucuo.mutation.NameCleared() {
		_spec.ClearField(usercategory.FieldName, field.TypeString)
	}
	if ucuo.mutation.UserCategoryUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercategory.UserCategoryUserTable,
			Columns: []string{usercategory.UserCategoryUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucuo.mutation.RemovedUserCategoryUserIDs(); len(nodes) > 0 && !ucuo.mutation.UserCategoryUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercategory.UserCategoryUserTable,
			Columns: []string{usercategory.UserCategoryUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucuo.mutation.UserCategoryUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercategory.UserCategoryUserTable,
			Columns: []string{usercategory.UserCategoryUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserCategory{config: ucuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ucuo.mutation.done = true
	return _node, nil
}
