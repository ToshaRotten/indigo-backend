// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/db/ent/predicate"
	"main/db/ent/product"
	"main/db/ent/typeofpackaging"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TypeOfPackagingUpdate is the builder for updating TypeOfPackaging entities.
type TypeOfPackagingUpdate struct {
	config
	hooks    []Hook
	mutation *TypeOfPackagingMutation
}

// Where appends a list predicates to the TypeOfPackagingUpdate builder.
func (topu *TypeOfPackagingUpdate) Where(ps ...predicate.TypeOfPackaging) *TypeOfPackagingUpdate {
	topu.mutation.Where(ps...)
	return topu
}

// SetName sets the "name" field.
func (topu *TypeOfPackagingUpdate) SetName(s string) *TypeOfPackagingUpdate {
	topu.mutation.SetName(s)
	return topu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (topu *TypeOfPackagingUpdate) SetNillableName(s *string) *TypeOfPackagingUpdate {
	if s != nil {
		topu.SetName(*s)
	}
	return topu
}

// ClearName clears the value of the "name" field.
func (topu *TypeOfPackagingUpdate) ClearName() *TypeOfPackagingUpdate {
	topu.mutation.ClearName()
	return topu
}

// AddTypeOfPackagingIDs adds the "type_of_packaging" edge to the Product entity by IDs.
func (topu *TypeOfPackagingUpdate) AddTypeOfPackagingIDs(ids ...int) *TypeOfPackagingUpdate {
	topu.mutation.AddTypeOfPackagingIDs(ids...)
	return topu
}

// AddTypeOfPackaging adds the "type_of_packaging" edges to the Product entity.
func (topu *TypeOfPackagingUpdate) AddTypeOfPackaging(p ...*Product) *TypeOfPackagingUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return topu.AddTypeOfPackagingIDs(ids...)
}

// Mutation returns the TypeOfPackagingMutation object of the builder.
func (topu *TypeOfPackagingUpdate) Mutation() *TypeOfPackagingMutation {
	return topu.mutation
}

// ClearTypeOfPackaging clears all "type_of_packaging" edges to the Product entity.
func (topu *TypeOfPackagingUpdate) ClearTypeOfPackaging() *TypeOfPackagingUpdate {
	topu.mutation.ClearTypeOfPackaging()
	return topu
}

// RemoveTypeOfPackagingIDs removes the "type_of_packaging" edge to Product entities by IDs.
func (topu *TypeOfPackagingUpdate) RemoveTypeOfPackagingIDs(ids ...int) *TypeOfPackagingUpdate {
	topu.mutation.RemoveTypeOfPackagingIDs(ids...)
	return topu
}

// RemoveTypeOfPackaging removes "type_of_packaging" edges to Product entities.
func (topu *TypeOfPackagingUpdate) RemoveTypeOfPackaging(p ...*Product) *TypeOfPackagingUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return topu.RemoveTypeOfPackagingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (topu *TypeOfPackagingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, topu.sqlSave, topu.mutation, topu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (topu *TypeOfPackagingUpdate) SaveX(ctx context.Context) int {
	affected, err := topu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (topu *TypeOfPackagingUpdate) Exec(ctx context.Context) error {
	_, err := topu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (topu *TypeOfPackagingUpdate) ExecX(ctx context.Context) {
	if err := topu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (topu *TypeOfPackagingUpdate) check() error {
	if v, ok := topu.mutation.Name(); ok {
		if err := typeofpackaging.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TypeOfPackaging.name": %w`, err)}
		}
	}
	return nil
}

func (topu *TypeOfPackagingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := topu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(typeofpackaging.Table, typeofpackaging.Columns, sqlgraph.NewFieldSpec(typeofpackaging.FieldID, field.TypeInt))
	if ps := topu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := topu.mutation.Name(); ok {
		_spec.SetField(typeofpackaging.FieldName, field.TypeString, value)
	}
	if topu.mutation.NameCleared() {
		_spec.ClearField(typeofpackaging.FieldName, field.TypeString)
	}
	if topu.mutation.TypeOfPackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   typeofpackaging.TypeOfPackagingTable,
			Columns: []string{typeofpackaging.TypeOfPackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := topu.mutation.RemovedTypeOfPackagingIDs(); len(nodes) > 0 && !topu.mutation.TypeOfPackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   typeofpackaging.TypeOfPackagingTable,
			Columns: []string{typeofpackaging.TypeOfPackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := topu.mutation.TypeOfPackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   typeofpackaging.TypeOfPackagingTable,
			Columns: []string{typeofpackaging.TypeOfPackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, topu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{typeofpackaging.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	topu.mutation.done = true
	return n, nil
}

// TypeOfPackagingUpdateOne is the builder for updating a single TypeOfPackaging entity.
type TypeOfPackagingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TypeOfPackagingMutation
}

// SetName sets the "name" field.
func (topuo *TypeOfPackagingUpdateOne) SetName(s string) *TypeOfPackagingUpdateOne {
	topuo.mutation.SetName(s)
	return topuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (topuo *TypeOfPackagingUpdateOne) SetNillableName(s *string) *TypeOfPackagingUpdateOne {
	if s != nil {
		topuo.SetName(*s)
	}
	return topuo
}

// ClearName clears the value of the "name" field.
func (topuo *TypeOfPackagingUpdateOne) ClearName() *TypeOfPackagingUpdateOne {
	topuo.mutation.ClearName()
	return topuo
}

// AddTypeOfPackagingIDs adds the "type_of_packaging" edge to the Product entity by IDs.
func (topuo *TypeOfPackagingUpdateOne) AddTypeOfPackagingIDs(ids ...int) *TypeOfPackagingUpdateOne {
	topuo.mutation.AddTypeOfPackagingIDs(ids...)
	return topuo
}

// AddTypeOfPackaging adds the "type_of_packaging" edges to the Product entity.
func (topuo *TypeOfPackagingUpdateOne) AddTypeOfPackaging(p ...*Product) *TypeOfPackagingUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return topuo.AddTypeOfPackagingIDs(ids...)
}

// Mutation returns the TypeOfPackagingMutation object of the builder.
func (topuo *TypeOfPackagingUpdateOne) Mutation() *TypeOfPackagingMutation {
	return topuo.mutation
}

// ClearTypeOfPackaging clears all "type_of_packaging" edges to the Product entity.
func (topuo *TypeOfPackagingUpdateOne) ClearTypeOfPackaging() *TypeOfPackagingUpdateOne {
	topuo.mutation.ClearTypeOfPackaging()
	return topuo
}

// RemoveTypeOfPackagingIDs removes the "type_of_packaging" edge to Product entities by IDs.
func (topuo *TypeOfPackagingUpdateOne) RemoveTypeOfPackagingIDs(ids ...int) *TypeOfPackagingUpdateOne {
	topuo.mutation.RemoveTypeOfPackagingIDs(ids...)
	return topuo
}

// RemoveTypeOfPackaging removes "type_of_packaging" edges to Product entities.
func (topuo *TypeOfPackagingUpdateOne) RemoveTypeOfPackaging(p ...*Product) *TypeOfPackagingUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return topuo.RemoveTypeOfPackagingIDs(ids...)
}

// Where appends a list predicates to the TypeOfPackagingUpdate builder.
func (topuo *TypeOfPackagingUpdateOne) Where(ps ...predicate.TypeOfPackaging) *TypeOfPackagingUpdateOne {
	topuo.mutation.Where(ps...)
	return topuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (topuo *TypeOfPackagingUpdateOne) Select(field string, fields ...string) *TypeOfPackagingUpdateOne {
	topuo.fields = append([]string{field}, fields...)
	return topuo
}

// Save executes the query and returns the updated TypeOfPackaging entity.
func (topuo *TypeOfPackagingUpdateOne) Save(ctx context.Context) (*TypeOfPackaging, error) {
	return withHooks(ctx, topuo.sqlSave, topuo.mutation, topuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (topuo *TypeOfPackagingUpdateOne) SaveX(ctx context.Context) *TypeOfPackaging {
	node, err := topuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (topuo *TypeOfPackagingUpdateOne) Exec(ctx context.Context) error {
	_, err := topuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (topuo *TypeOfPackagingUpdateOne) ExecX(ctx context.Context) {
	if err := topuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (topuo *TypeOfPackagingUpdateOne) check() error {
	if v, ok := topuo.mutation.Name(); ok {
		if err := typeofpackaging.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TypeOfPackaging.name": %w`, err)}
		}
	}
	return nil
}

func (topuo *TypeOfPackagingUpdateOne) sqlSave(ctx context.Context) (_node *TypeOfPackaging, err error) {
	if err := topuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(typeofpackaging.Table, typeofpackaging.Columns, sqlgraph.NewFieldSpec(typeofpackaging.FieldID, field.TypeInt))
	id, ok := topuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TypeOfPackaging.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := topuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, typeofpackaging.FieldID)
		for _, f := range fields {
			if !typeofpackaging.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != typeofpackaging.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := topuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := topuo.mutation.Name(); ok {
		_spec.SetField(typeofpackaging.FieldName, field.TypeString, value)
	}
	if topuo.mutation.NameCleared() {
		_spec.ClearField(typeofpackaging.FieldName, field.TypeString)
	}
	if topuo.mutation.TypeOfPackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   typeofpackaging.TypeOfPackagingTable,
			Columns: []string{typeofpackaging.TypeOfPackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := topuo.mutation.RemovedTypeOfPackagingIDs(); len(nodes) > 0 && !topuo.mutation.TypeOfPackagingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   typeofpackaging.TypeOfPackagingTable,
			Columns: []string{typeofpackaging.TypeOfPackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := topuo.mutation.TypeOfPackagingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   typeofpackaging.TypeOfPackagingTable,
			Columns: []string{typeofpackaging.TypeOfPackagingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TypeOfPackaging{config: topuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, topuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{typeofpackaging.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	topuo.mutation.done = true
	return _node, nil
}
