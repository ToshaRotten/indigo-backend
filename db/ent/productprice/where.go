// Code generated by ent, DO NOT EDIT.

package productprice

import (
	"main/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldLTE(FieldID, id))
}

// ModificationDate applies equality check predicate on the "modification_date" field. It's identical to ModificationDateEQ.
func ModificationDate(v time.Time) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldEQ(FieldModificationDate, v))
}

// NewPrice applies equality check predicate on the "new_price" field. It's identical to NewPriceEQ.
func NewPrice(v float64) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldEQ(FieldNewPrice, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldEQ(FieldProductID, v))
}

// ModificationDateEQ applies the EQ predicate on the "modification_date" field.
func ModificationDateEQ(v time.Time) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldEQ(FieldModificationDate, v))
}

// ModificationDateNEQ applies the NEQ predicate on the "modification_date" field.
func ModificationDateNEQ(v time.Time) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldNEQ(FieldModificationDate, v))
}

// ModificationDateIn applies the In predicate on the "modification_date" field.
func ModificationDateIn(vs ...time.Time) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldIn(FieldModificationDate, vs...))
}

// ModificationDateNotIn applies the NotIn predicate on the "modification_date" field.
func ModificationDateNotIn(vs ...time.Time) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldNotIn(FieldModificationDate, vs...))
}

// ModificationDateGT applies the GT predicate on the "modification_date" field.
func ModificationDateGT(v time.Time) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldGT(FieldModificationDate, v))
}

// ModificationDateGTE applies the GTE predicate on the "modification_date" field.
func ModificationDateGTE(v time.Time) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldGTE(FieldModificationDate, v))
}

// ModificationDateLT applies the LT predicate on the "modification_date" field.
func ModificationDateLT(v time.Time) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldLT(FieldModificationDate, v))
}

// ModificationDateLTE applies the LTE predicate on the "modification_date" field.
func ModificationDateLTE(v time.Time) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldLTE(FieldModificationDate, v))
}

// ModificationDateIsNil applies the IsNil predicate on the "modification_date" field.
func ModificationDateIsNil() predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldIsNull(FieldModificationDate))
}

// ModificationDateNotNil applies the NotNil predicate on the "modification_date" field.
func ModificationDateNotNil() predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldNotNull(FieldModificationDate))
}

// NewPriceEQ applies the EQ predicate on the "new_price" field.
func NewPriceEQ(v float64) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldEQ(FieldNewPrice, v))
}

// NewPriceNEQ applies the NEQ predicate on the "new_price" field.
func NewPriceNEQ(v float64) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldNEQ(FieldNewPrice, v))
}

// NewPriceIn applies the In predicate on the "new_price" field.
func NewPriceIn(vs ...float64) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldIn(FieldNewPrice, vs...))
}

// NewPriceNotIn applies the NotIn predicate on the "new_price" field.
func NewPriceNotIn(vs ...float64) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldNotIn(FieldNewPrice, vs...))
}

// NewPriceGT applies the GT predicate on the "new_price" field.
func NewPriceGT(v float64) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldGT(FieldNewPrice, v))
}

// NewPriceGTE applies the GTE predicate on the "new_price" field.
func NewPriceGTE(v float64) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldGTE(FieldNewPrice, v))
}

// NewPriceLT applies the LT predicate on the "new_price" field.
func NewPriceLT(v float64) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldLT(FieldNewPrice, v))
}

// NewPriceLTE applies the LTE predicate on the "new_price" field.
func NewPriceLTE(v float64) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldLTE(FieldNewPrice, v))
}

// NewPriceIsNil applies the IsNil predicate on the "new_price" field.
func NewPriceIsNil() predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldIsNull(FieldNewPrice))
}

// NewPriceNotNil applies the NotNil predicate on the "new_price" field.
func NewPriceNotNil() predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldNotNull(FieldNewPrice))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int) predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDIsNil applies the IsNil predicate on the "product_id" field.
func ProductIDIsNil() predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldIsNull(FieldProductID))
}

// ProductIDNotNil applies the NotNil predicate on the "product_id" field.
func ProductIDNotNil() predicate.ProductPrice {
	return predicate.ProductPrice(sql.FieldNotNull(FieldProductID))
}

// HasProduct applies the HasEdge predicate on the "product" edge.
func HasProduct() predicate.ProductPrice {
	return predicate.ProductPrice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductTable, ProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductWith applies the HasEdge predicate on the "product" edge with a given conditions (other predicates).
func HasProductWith(preds ...predicate.Product) predicate.ProductPrice {
	return predicate.ProductPrice(func(s *sql.Selector) {
		step := newProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProductPrice) predicate.ProductPrice {
	return predicate.ProductPrice(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProductPrice) predicate.ProductPrice {
	return predicate.ProductPrice(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProductPrice) predicate.ProductPrice {
	return predicate.ProductPrice(sql.NotPredicates(p))
}
