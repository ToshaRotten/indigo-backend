// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"main/db/ent/address"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Address is the model entity for the Address schema.
type Address struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// StreetName holds the value of the "street_name" field.
	StreetName string `json:"street_name,omitempty"`
	// HouseNumber holds the value of the "house_number" field.
	HouseNumber string `json:"house_number,omitempty"`
	// StoreName holds the value of the "store_name" field.
	StoreName string `json:"store_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AddressQuery when eager-loading is set.
	Edges        AddressEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AddressEdges holds the relations/edges for other nodes in the graph.
type AddressEdges struct {
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// Address holds the value of the address edge.
	Address []*Order `json:"address,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e AddressEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AddressOrErr returns the Address value or an error if the edge
// was not loaded in eager-loading.
func (e AddressEdges) AddressOrErr() ([]*Order, error) {
	if e.loadedTypes[1] {
		return e.Address, nil
	}
	return nil, &NotLoadedError{edge: "address"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Address) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case address.FieldID:
			values[i] = new(sql.NullInt64)
		case address.FieldCity, address.FieldStreetName, address.FieldHouseNumber, address.FieldStoreName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Address fields.
func (a *Address) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case address.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case address.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				a.City = value.String
			}
		case address.FieldStreetName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field street_name", values[i])
			} else if value.Valid {
				a.StreetName = value.String
			}
		case address.FieldHouseNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field house_number", values[i])
			} else if value.Valid {
				a.HouseNumber = value.String
			}
		case address.FieldStoreName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field store_name", values[i])
			} else if value.Valid {
				a.StoreName = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Address.
// This includes values selected through modifiers, order, etc.
func (a *Address) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Address entity.
func (a *Address) QueryUser() *UserQuery {
	return NewAddressClient(a.config).QueryUser(a)
}

// QueryAddress queries the "address" edge of the Address entity.
func (a *Address) QueryAddress() *OrderQuery {
	return NewAddressClient(a.config).QueryAddress(a)
}

// Update returns a builder for updating this Address.
// Note that you need to call Address.Unwrap() before calling this method if this Address
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Address) Update() *AddressUpdateOne {
	return NewAddressClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Address entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Address) Unwrap() *Address {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Address is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Address) String() string {
	var builder strings.Builder
	builder.WriteString("Address(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("city=")
	builder.WriteString(a.City)
	builder.WriteString(", ")
	builder.WriteString("street_name=")
	builder.WriteString(a.StreetName)
	builder.WriteString(", ")
	builder.WriteString("house_number=")
	builder.WriteString(a.HouseNumber)
	builder.WriteString(", ")
	builder.WriteString("store_name=")
	builder.WriteString(a.StoreName)
	builder.WriteByte(')')
	return builder.String()
}

// Addresses is a parsable slice of Address.
type Addresses []*Address
