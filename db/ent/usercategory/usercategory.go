// Code generated by ent, DO NOT EDIT.

package usercategory

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the usercategory type in the database.
	Label = "user_category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeUserCategoryUser holds the string denoting the user_category_user edge name in mutations.
	EdgeUserCategoryUser = "user_category_user"
	// Table holds the table name of the usercategory in the database.
	Table = "user_categories"
	// UserCategoryUserTable is the table that holds the user_category_user relation/edge.
	UserCategoryUserTable = "users"
	// UserCategoryUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserCategoryUserInverseTable = "users"
	// UserCategoryUserColumn is the table column denoting the user_category_user relation/edge.
	UserCategoryUserColumn = "user_category_id"
)

// Columns holds all SQL columns for usercategory fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the UserCategory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByUserCategoryUserCount orders the results by user_category_user count.
func ByUserCategoryUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserCategoryUserStep(), opts...)
	}
}

// ByUserCategoryUser orders the results by user_category_user terms.
func ByUserCategoryUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserCategoryUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserCategoryUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserCategoryUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserCategoryUserTable, UserCategoryUserColumn),
	)
}
