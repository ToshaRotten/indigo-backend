// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"main/db/ent/product"
	"main/db/ent/shoppingcart"
	"main/db/ent/user"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ShoppingCart is the model entity for the ShoppingCart schema.
type ShoppingCart struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID int `json:"product_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShoppingCartQuery when eager-loading is set.
	Edges        ShoppingCartEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ShoppingCartEdges holds the relations/edges for other nodes in the graph.
type ShoppingCartEdges struct {
	// Products holds the value of the products edge.
	Products *Product `json:"products,omitempty"`
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShoppingCartEdges) ProductsOrErr() (*Product, error) {
	if e.Products != nil {
		return e.Products, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: product.Label}
	}
	return nil, &NotLoadedError{edge: "products"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShoppingCartEdges) UsersOrErr() (*User, error) {
	if e.Users != nil {
		return e.Users, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShoppingCart) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shoppingcart.FieldID, shoppingcart.FieldQuantity, shoppingcart.FieldProductID, shoppingcart.FieldUserID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShoppingCart fields.
func (sc *ShoppingCart) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shoppingcart.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sc.ID = int(value.Int64)
		case shoppingcart.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				sc.Quantity = int(value.Int64)
			}
		case shoppingcart.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				sc.ProductID = int(value.Int64)
			}
		case shoppingcart.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				sc.UserID = int(value.Int64)
			}
		default:
			sc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ShoppingCart.
// This includes values selected through modifiers, order, etc.
func (sc *ShoppingCart) Value(name string) (ent.Value, error) {
	return sc.selectValues.Get(name)
}

// QueryProducts queries the "products" edge of the ShoppingCart entity.
func (sc *ShoppingCart) QueryProducts() *ProductQuery {
	return NewShoppingCartClient(sc.config).QueryProducts(sc)
}

// QueryUsers queries the "users" edge of the ShoppingCart entity.
func (sc *ShoppingCart) QueryUsers() *UserQuery {
	return NewShoppingCartClient(sc.config).QueryUsers(sc)
}

// Update returns a builder for updating this ShoppingCart.
// Note that you need to call ShoppingCart.Unwrap() before calling this method if this ShoppingCart
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *ShoppingCart) Update() *ShoppingCartUpdateOne {
	return NewShoppingCartClient(sc.config).UpdateOne(sc)
}

// Unwrap unwraps the ShoppingCart entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *ShoppingCart) Unwrap() *ShoppingCart {
	_tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShoppingCart is not a transactional entity")
	}
	sc.config.driver = _tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *ShoppingCart) String() string {
	var builder strings.Builder
	builder.WriteString("ShoppingCart(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sc.ID))
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", sc.Quantity))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.ProductID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", sc.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// ShoppingCarts is a parsable slice of ShoppingCart.
type ShoppingCarts []*ShoppingCart
