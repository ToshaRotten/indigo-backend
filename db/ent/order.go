// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"main/db/ent/address"
	"main/db/ent/order"
	"main/db/ent/orderstatus"
	"main/db/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OrderDate holds the value of the "order_date" field.
	OrderDate time.Time `json:"order_date,omitempty"`
	// DesiredDeliveryDate holds the value of the "desired_delivery_date" field.
	DesiredDeliveryDate time.Time `json:"desired_delivery_date,omitempty"`
	// TotalAmount holds the value of the "total_amount" field.
	TotalAmount float64 `json:"total_amount,omitempty"`
	// OrderStatusID holds the value of the "order_status_id" field.
	OrderStatusID int `json:"order_status_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// AddressID holds the value of the "address_id" field.
	AddressID int `json:"address_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderQuery when eager-loading is set.
	Edges        OrderEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrderEdges holds the relations/edges for other nodes in the graph.
type OrderEdges struct {
	// OrderStatus holds the value of the order_status edge.
	OrderStatus *OrderStatus `json:"order_status,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// AddresOrder holds the value of the addres_order edge.
	AddresOrder *Address `json:"addres_order,omitempty"`
	// Order holds the value of the order edge.
	Order []*OrderDetail `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// OrderStatusOrErr returns the OrderStatus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) OrderStatusOrErr() (*OrderStatus, error) {
	if e.OrderStatus != nil {
		return e.OrderStatus, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: orderstatus.Label}
	}
	return nil, &NotLoadedError{edge: "order_status"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AddresOrderOrErr returns the AddresOrder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) AddresOrderOrErr() (*Address, error) {
	if e.AddresOrder != nil {
		return e.AddresOrder, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: address.Label}
	}
	return nil, &NotLoadedError{edge: "addres_order"}
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) OrderOrErr() ([]*OrderDetail, error) {
	if e.loadedTypes[3] {
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldTotalAmount:
			values[i] = new(sql.NullFloat64)
		case order.FieldID, order.FieldOrderStatusID, order.FieldUserID, order.FieldAddressID:
			values[i] = new(sql.NullInt64)
		case order.FieldOrderDate, order.FieldDesiredDeliveryDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case order.FieldOrderDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field order_date", values[i])
			} else if value.Valid {
				o.OrderDate = value.Time
			}
		case order.FieldDesiredDeliveryDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field desired_delivery_date", values[i])
			} else if value.Valid {
				o.DesiredDeliveryDate = value.Time
			}
		case order.FieldTotalAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_amount", values[i])
			} else if value.Valid {
				o.TotalAmount = value.Float64
			}
		case order.FieldOrderStatusID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_status_id", values[i])
			} else if value.Valid {
				o.OrderStatusID = int(value.Int64)
			}
		case order.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				o.UserID = int(value.Int64)
			}
		case order.FieldAddressID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field address_id", values[i])
			} else if value.Valid {
				o.AddressID = int(value.Int64)
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Order.
// This includes values selected through modifiers, order, etc.
func (o *Order) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryOrderStatus queries the "order_status" edge of the Order entity.
func (o *Order) QueryOrderStatus() *OrderStatusQuery {
	return NewOrderClient(o.config).QueryOrderStatus(o)
}

// QueryUser queries the "user" edge of the Order entity.
func (o *Order) QueryUser() *UserQuery {
	return NewOrderClient(o.config).QueryUser(o)
}

// QueryAddresOrder queries the "addres_order" edge of the Order entity.
func (o *Order) QueryAddresOrder() *AddressQuery {
	return NewOrderClient(o.config).QueryAddresOrder(o)
}

// QueryOrder queries the "order" edge of the Order entity.
func (o *Order) QueryOrder() *OrderDetailQuery {
	return NewOrderClient(o.config).QueryOrder(o)
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return NewOrderClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("order_date=")
	builder.WriteString(o.OrderDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("desired_delivery_date=")
	builder.WriteString(o.DesiredDeliveryDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("total_amount=")
	builder.WriteString(fmt.Sprintf("%v", o.TotalAmount))
	builder.WriteString(", ")
	builder.WriteString("order_status_id=")
	builder.WriteString(fmt.Sprintf("%v", o.OrderStatusID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", o.UserID))
	builder.WriteString(", ")
	builder.WriteString("address_id=")
	builder.WriteString(fmt.Sprintf("%v", o.AddressID))
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order
