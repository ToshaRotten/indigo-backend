// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/db/ent/address"
	"main/db/ent/card"
	"main/db/ent/chat"
	"main/db/ent/message"
	"main/db/ent/order"
	"main/db/ent/predicate"
	"main/db/ent/shoppingcart"
	"main/db/ent/user"
	"main/db/ent/usercategory"
	"main/db/ent/usertoken"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetFullName sets the "full_name" field.
func (uu *UserUpdate) SetFullName(s string) *UserUpdate {
	uu.mutation.SetFullName(s)
	return uu
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFullName(s *string) *UserUpdate {
	if s != nil {
		uu.SetFullName(*s)
	}
	return uu
}

// ClearFullName clears the value of the "full_name" field.
func (uu *UserUpdate) ClearFullName() *UserUpdate {
	uu.mutation.ClearFullName()
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// ClearEmail clears the value of the "email" field.
func (uu *UserUpdate) ClearEmail() *UserUpdate {
	uu.mutation.ClearEmail()
	return uu
}

// SetPasswordHash sets the "password_hash" field.
func (uu *UserUpdate) SetPasswordHash(s string) *UserUpdate {
	uu.mutation.SetPasswordHash(s)
	return uu
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePasswordHash(s *string) *UserUpdate {
	if s != nil {
		uu.SetPasswordHash(*s)
	}
	return uu
}

// ClearPasswordHash clears the value of the "password_hash" field.
func (uu *UserUpdate) ClearPasswordHash() *UserUpdate {
	uu.mutation.ClearPasswordHash()
	return uu
}

// SetPhoneNumber sets the "phone_number" field.
func (uu *UserUpdate) SetPhoneNumber(s string) *UserUpdate {
	uu.mutation.SetPhoneNumber(s)
	return uu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhoneNumber(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhoneNumber(*s)
	}
	return uu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uu *UserUpdate) ClearPhoneNumber() *UserUpdate {
	uu.mutation.ClearPhoneNumber()
	return uu
}

// SetUserCategoryID sets the "user_category_id" field.
func (uu *UserUpdate) SetUserCategoryID(i int) *UserUpdate {
	uu.mutation.SetUserCategoryID(i)
	return uu
}

// SetNillableUserCategoryID sets the "user_category_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUserCategoryID(i *int) *UserUpdate {
	if i != nil {
		uu.SetUserCategoryID(*i)
	}
	return uu
}

// ClearUserCategoryID clears the value of the "user_category_id" field.
func (uu *UserUpdate) ClearUserCategoryID() *UserUpdate {
	uu.mutation.ClearUserCategoryID()
	return uu
}

// SetUserCategory sets the "user_category" edge to the UserCategory entity.
func (uu *UserUpdate) SetUserCategory(u *UserCategory) *UserUpdate {
	return uu.SetUserCategoryID(u.ID)
}

// AddShoppingCartUserIDs adds the "shopping_cart_user" edge to the ShoppingCart entity by IDs.
func (uu *UserUpdate) AddShoppingCartUserIDs(ids ...int) *UserUpdate {
	uu.mutation.AddShoppingCartUserIDs(ids...)
	return uu
}

// AddShoppingCartUser adds the "shopping_cart_user" edges to the ShoppingCart entity.
func (uu *UserUpdate) AddShoppingCartUser(s ...*ShoppingCart) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddShoppingCartUserIDs(ids...)
}

// AddUserTokenUserIDs adds the "user_token_user" edge to the UserToken entity by IDs.
func (uu *UserUpdate) AddUserTokenUserIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUserTokenUserIDs(ids...)
	return uu
}

// AddUserTokenUser adds the "user_token_user" edges to the UserToken entity.
func (uu *UserUpdate) AddUserTokenUser(u ...*UserToken) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserTokenUserIDs(ids...)
}

// AddOrderUserIDs adds the "order_user" edge to the Order entity by IDs.
func (uu *UserUpdate) AddOrderUserIDs(ids ...int) *UserUpdate {
	uu.mutation.AddOrderUserIDs(ids...)
	return uu
}

// AddOrderUser adds the "order_user" edges to the Order entity.
func (uu *UserUpdate) AddOrderUser(o ...*Order) *UserUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddOrderUserIDs(ids...)
}

// AddAddressIDs adds the "addresses" edge to the Address entity by IDs.
func (uu *UserUpdate) AddAddressIDs(ids ...int) *UserUpdate {
	uu.mutation.AddAddressIDs(ids...)
	return uu
}

// AddAddresses adds the "addresses" edges to the Address entity.
func (uu *UserUpdate) AddAddresses(a ...*Address) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAddressIDs(ids...)
}

// AddUserChatIDs adds the "user_chat" edge to the Chat entity by IDs.
func (uu *UserUpdate) AddUserChatIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUserChatIDs(ids...)
	return uu
}

// AddUserChat adds the "user_chat" edges to the Chat entity.
func (uu *UserUpdate) AddUserChat(c ...*Chat) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddUserChatIDs(ids...)
}

// AddUserCardIDs adds the "user_card" edge to the Card entity by IDs.
func (uu *UserUpdate) AddUserCardIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUserCardIDs(ids...)
	return uu
}

// AddUserCard adds the "user_card" edges to the Card entity.
func (uu *UserUpdate) AddUserCard(c ...*Card) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddUserCardIDs(ids...)
}

// AddUserMessageIDs adds the "user_message" edge to the Message entity by IDs.
func (uu *UserUpdate) AddUserMessageIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUserMessageIDs(ids...)
	return uu
}

// AddUserMessage adds the "user_message" edges to the Message entity.
func (uu *UserUpdate) AddUserMessage(m ...*Message) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddUserMessageIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearUserCategory clears the "user_category" edge to the UserCategory entity.
func (uu *UserUpdate) ClearUserCategory() *UserUpdate {
	uu.mutation.ClearUserCategory()
	return uu
}

// ClearShoppingCartUser clears all "shopping_cart_user" edges to the ShoppingCart entity.
func (uu *UserUpdate) ClearShoppingCartUser() *UserUpdate {
	uu.mutation.ClearShoppingCartUser()
	return uu
}

// RemoveShoppingCartUserIDs removes the "shopping_cart_user" edge to ShoppingCart entities by IDs.
func (uu *UserUpdate) RemoveShoppingCartUserIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveShoppingCartUserIDs(ids...)
	return uu
}

// RemoveShoppingCartUser removes "shopping_cart_user" edges to ShoppingCart entities.
func (uu *UserUpdate) RemoveShoppingCartUser(s ...*ShoppingCart) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveShoppingCartUserIDs(ids...)
}

// ClearUserTokenUser clears all "user_token_user" edges to the UserToken entity.
func (uu *UserUpdate) ClearUserTokenUser() *UserUpdate {
	uu.mutation.ClearUserTokenUser()
	return uu
}

// RemoveUserTokenUserIDs removes the "user_token_user" edge to UserToken entities by IDs.
func (uu *UserUpdate) RemoveUserTokenUserIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUserTokenUserIDs(ids...)
	return uu
}

// RemoveUserTokenUser removes "user_token_user" edges to UserToken entities.
func (uu *UserUpdate) RemoveUserTokenUser(u ...*UserToken) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserTokenUserIDs(ids...)
}

// ClearOrderUser clears all "order_user" edges to the Order entity.
func (uu *UserUpdate) ClearOrderUser() *UserUpdate {
	uu.mutation.ClearOrderUser()
	return uu
}

// RemoveOrderUserIDs removes the "order_user" edge to Order entities by IDs.
func (uu *UserUpdate) RemoveOrderUserIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveOrderUserIDs(ids...)
	return uu
}

// RemoveOrderUser removes "order_user" edges to Order entities.
func (uu *UserUpdate) RemoveOrderUser(o ...*Order) *UserUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveOrderUserIDs(ids...)
}

// ClearAddresses clears all "addresses" edges to the Address entity.
func (uu *UserUpdate) ClearAddresses() *UserUpdate {
	uu.mutation.ClearAddresses()
	return uu
}

// RemoveAddressIDs removes the "addresses" edge to Address entities by IDs.
func (uu *UserUpdate) RemoveAddressIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveAddressIDs(ids...)
	return uu
}

// RemoveAddresses removes "addresses" edges to Address entities.
func (uu *UserUpdate) RemoveAddresses(a ...*Address) *UserUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAddressIDs(ids...)
}

// ClearUserChat clears all "user_chat" edges to the Chat entity.
func (uu *UserUpdate) ClearUserChat() *UserUpdate {
	uu.mutation.ClearUserChat()
	return uu
}

// RemoveUserChatIDs removes the "user_chat" edge to Chat entities by IDs.
func (uu *UserUpdate) RemoveUserChatIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUserChatIDs(ids...)
	return uu
}

// RemoveUserChat removes "user_chat" edges to Chat entities.
func (uu *UserUpdate) RemoveUserChat(c ...*Chat) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveUserChatIDs(ids...)
}

// ClearUserCard clears all "user_card" edges to the Card entity.
func (uu *UserUpdate) ClearUserCard() *UserUpdate {
	uu.mutation.ClearUserCard()
	return uu
}

// RemoveUserCardIDs removes the "user_card" edge to Card entities by IDs.
func (uu *UserUpdate) RemoveUserCardIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUserCardIDs(ids...)
	return uu
}

// RemoveUserCard removes "user_card" edges to Card entities.
func (uu *UserUpdate) RemoveUserCard(c ...*Card) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveUserCardIDs(ids...)
}

// ClearUserMessage clears all "user_message" edges to the Message entity.
func (uu *UserUpdate) ClearUserMessage() *UserUpdate {
	uu.mutation.ClearUserMessage()
	return uu
}

// RemoveUserMessageIDs removes the "user_message" edge to Message entities by IDs.
func (uu *UserUpdate) RemoveUserMessageIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUserMessageIDs(ids...)
	return uu
}

// RemoveUserMessage removes "user_message" edges to Message entities.
func (uu *UserUpdate) RemoveUserMessage(m ...*Message) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveUserMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.FullName(); ok {
		if err := user.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "User.full_name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "User.password_hash": %w`, err)}
		}
	}
	if v, ok := uu.mutation.PhoneNumber(); ok {
		if err := user.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "User.phone_number": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.FullName(); ok {
		_spec.SetField(user.FieldFullName, field.TypeString, value)
	}
	if uu.mutation.FullNameCleared() {
		_spec.ClearField(user.FieldFullName, field.TypeString)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uu.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uu.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if uu.mutation.PasswordHashCleared() {
		_spec.ClearField(user.FieldPasswordHash, field.TypeString)
	}
	if value, ok := uu.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if uu.mutation.PhoneNumberCleared() {
		_spec.ClearField(user.FieldPhoneNumber, field.TypeString)
	}
	if uu.mutation.UserCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.UserCategoryTable,
			Columns: []string{user.UserCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.UserCategoryTable,
			Columns: []string{user.UserCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ShoppingCartUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ShoppingCartUserTable,
			Columns: []string{user.ShoppingCartUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedShoppingCartUserIDs(); len(nodes) > 0 && !uu.mutation.ShoppingCartUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ShoppingCartUserTable,
			Columns: []string{user.ShoppingCartUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ShoppingCartUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ShoppingCartUserTable,
			Columns: []string{user.ShoppingCartUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserTokenUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTokenUserTable,
			Columns: []string{user.UserTokenUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserTokenUserIDs(); len(nodes) > 0 && !uu.mutation.UserTokenUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTokenUserTable,
			Columns: []string{user.UserTokenUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserTokenUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTokenUserTable,
			Columns: []string{user.UserTokenUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OrderUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OrderUserTable,
			Columns: []string{user.OrderUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOrderUserIDs(); len(nodes) > 0 && !uu.mutation.OrderUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OrderUserTable,
			Columns: []string{user.OrderUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OrderUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OrderUserTable,
			Columns: []string{user.OrderUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.AddressesTable,
			Columns: user.AddressesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAddressesIDs(); len(nodes) > 0 && !uu.mutation.AddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.AddressesTable,
			Columns: user.AddressesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.AddressesTable,
			Columns: user.AddressesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserChatTable,
			Columns: []string{user.UserChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserChatIDs(); len(nodes) > 0 && !uu.mutation.UserChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserChatTable,
			Columns: []string{user.UserChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserChatTable,
			Columns: []string{user.UserChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserCardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCardTable,
			Columns: []string{user.UserCardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserCardIDs(); len(nodes) > 0 && !uu.mutation.UserCardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCardTable,
			Columns: []string{user.UserCardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserCardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCardTable,
			Columns: []string{user.UserCardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserMessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserMessageTable,
			Columns: []string{user.UserMessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserMessageIDs(); len(nodes) > 0 && !uu.mutation.UserMessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserMessageTable,
			Columns: []string{user.UserMessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserMessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserMessageTable,
			Columns: []string{user.UserMessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetFullName sets the "full_name" field.
func (uuo *UserUpdateOne) SetFullName(s string) *UserUpdateOne {
	uuo.mutation.SetFullName(s)
	return uuo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFullName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFullName(*s)
	}
	return uuo
}

// ClearFullName clears the value of the "full_name" field.
func (uuo *UserUpdateOne) ClearFullName() *UserUpdateOne {
	uuo.mutation.ClearFullName()
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// ClearEmail clears the value of the "email" field.
func (uuo *UserUpdateOne) ClearEmail() *UserUpdateOne {
	uuo.mutation.ClearEmail()
	return uuo
}

// SetPasswordHash sets the "password_hash" field.
func (uuo *UserUpdateOne) SetPasswordHash(s string) *UserUpdateOne {
	uuo.mutation.SetPasswordHash(s)
	return uuo
}

// SetNillablePasswordHash sets the "password_hash" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePasswordHash(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPasswordHash(*s)
	}
	return uuo
}

// ClearPasswordHash clears the value of the "password_hash" field.
func (uuo *UserUpdateOne) ClearPasswordHash() *UserUpdateOne {
	uuo.mutation.ClearPasswordHash()
	return uuo
}

// SetPhoneNumber sets the "phone_number" field.
func (uuo *UserUpdateOne) SetPhoneNumber(s string) *UserUpdateOne {
	uuo.mutation.SetPhoneNumber(s)
	return uuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhoneNumber(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhoneNumber(*s)
	}
	return uuo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (uuo *UserUpdateOne) ClearPhoneNumber() *UserUpdateOne {
	uuo.mutation.ClearPhoneNumber()
	return uuo
}

// SetUserCategoryID sets the "user_category_id" field.
func (uuo *UserUpdateOne) SetUserCategoryID(i int) *UserUpdateOne {
	uuo.mutation.SetUserCategoryID(i)
	return uuo
}

// SetNillableUserCategoryID sets the "user_category_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUserCategoryID(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetUserCategoryID(*i)
	}
	return uuo
}

// ClearUserCategoryID clears the value of the "user_category_id" field.
func (uuo *UserUpdateOne) ClearUserCategoryID() *UserUpdateOne {
	uuo.mutation.ClearUserCategoryID()
	return uuo
}

// SetUserCategory sets the "user_category" edge to the UserCategory entity.
func (uuo *UserUpdateOne) SetUserCategory(u *UserCategory) *UserUpdateOne {
	return uuo.SetUserCategoryID(u.ID)
}

// AddShoppingCartUserIDs adds the "shopping_cart_user" edge to the ShoppingCart entity by IDs.
func (uuo *UserUpdateOne) AddShoppingCartUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddShoppingCartUserIDs(ids...)
	return uuo
}

// AddShoppingCartUser adds the "shopping_cart_user" edges to the ShoppingCart entity.
func (uuo *UserUpdateOne) AddShoppingCartUser(s ...*ShoppingCart) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddShoppingCartUserIDs(ids...)
}

// AddUserTokenUserIDs adds the "user_token_user" edge to the UserToken entity by IDs.
func (uuo *UserUpdateOne) AddUserTokenUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUserTokenUserIDs(ids...)
	return uuo
}

// AddUserTokenUser adds the "user_token_user" edges to the UserToken entity.
func (uuo *UserUpdateOne) AddUserTokenUser(u ...*UserToken) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserTokenUserIDs(ids...)
}

// AddOrderUserIDs adds the "order_user" edge to the Order entity by IDs.
func (uuo *UserUpdateOne) AddOrderUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddOrderUserIDs(ids...)
	return uuo
}

// AddOrderUser adds the "order_user" edges to the Order entity.
func (uuo *UserUpdateOne) AddOrderUser(o ...*Order) *UserUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddOrderUserIDs(ids...)
}

// AddAddressIDs adds the "addresses" edge to the Address entity by IDs.
func (uuo *UserUpdateOne) AddAddressIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddAddressIDs(ids...)
	return uuo
}

// AddAddresses adds the "addresses" edges to the Address entity.
func (uuo *UserUpdateOne) AddAddresses(a ...*Address) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAddressIDs(ids...)
}

// AddUserChatIDs adds the "user_chat" edge to the Chat entity by IDs.
func (uuo *UserUpdateOne) AddUserChatIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUserChatIDs(ids...)
	return uuo
}

// AddUserChat adds the "user_chat" edges to the Chat entity.
func (uuo *UserUpdateOne) AddUserChat(c ...*Chat) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddUserChatIDs(ids...)
}

// AddUserCardIDs adds the "user_card" edge to the Card entity by IDs.
func (uuo *UserUpdateOne) AddUserCardIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUserCardIDs(ids...)
	return uuo
}

// AddUserCard adds the "user_card" edges to the Card entity.
func (uuo *UserUpdateOne) AddUserCard(c ...*Card) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddUserCardIDs(ids...)
}

// AddUserMessageIDs adds the "user_message" edge to the Message entity by IDs.
func (uuo *UserUpdateOne) AddUserMessageIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUserMessageIDs(ids...)
	return uuo
}

// AddUserMessage adds the "user_message" edges to the Message entity.
func (uuo *UserUpdateOne) AddUserMessage(m ...*Message) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddUserMessageIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearUserCategory clears the "user_category" edge to the UserCategory entity.
func (uuo *UserUpdateOne) ClearUserCategory() *UserUpdateOne {
	uuo.mutation.ClearUserCategory()
	return uuo
}

// ClearShoppingCartUser clears all "shopping_cart_user" edges to the ShoppingCart entity.
func (uuo *UserUpdateOne) ClearShoppingCartUser() *UserUpdateOne {
	uuo.mutation.ClearShoppingCartUser()
	return uuo
}

// RemoveShoppingCartUserIDs removes the "shopping_cart_user" edge to ShoppingCart entities by IDs.
func (uuo *UserUpdateOne) RemoveShoppingCartUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveShoppingCartUserIDs(ids...)
	return uuo
}

// RemoveShoppingCartUser removes "shopping_cart_user" edges to ShoppingCart entities.
func (uuo *UserUpdateOne) RemoveShoppingCartUser(s ...*ShoppingCart) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveShoppingCartUserIDs(ids...)
}

// ClearUserTokenUser clears all "user_token_user" edges to the UserToken entity.
func (uuo *UserUpdateOne) ClearUserTokenUser() *UserUpdateOne {
	uuo.mutation.ClearUserTokenUser()
	return uuo
}

// RemoveUserTokenUserIDs removes the "user_token_user" edge to UserToken entities by IDs.
func (uuo *UserUpdateOne) RemoveUserTokenUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUserTokenUserIDs(ids...)
	return uuo
}

// RemoveUserTokenUser removes "user_token_user" edges to UserToken entities.
func (uuo *UserUpdateOne) RemoveUserTokenUser(u ...*UserToken) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserTokenUserIDs(ids...)
}

// ClearOrderUser clears all "order_user" edges to the Order entity.
func (uuo *UserUpdateOne) ClearOrderUser() *UserUpdateOne {
	uuo.mutation.ClearOrderUser()
	return uuo
}

// RemoveOrderUserIDs removes the "order_user" edge to Order entities by IDs.
func (uuo *UserUpdateOne) RemoveOrderUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveOrderUserIDs(ids...)
	return uuo
}

// RemoveOrderUser removes "order_user" edges to Order entities.
func (uuo *UserUpdateOne) RemoveOrderUser(o ...*Order) *UserUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveOrderUserIDs(ids...)
}

// ClearAddresses clears all "addresses" edges to the Address entity.
func (uuo *UserUpdateOne) ClearAddresses() *UserUpdateOne {
	uuo.mutation.ClearAddresses()
	return uuo
}

// RemoveAddressIDs removes the "addresses" edge to Address entities by IDs.
func (uuo *UserUpdateOne) RemoveAddressIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveAddressIDs(ids...)
	return uuo
}

// RemoveAddresses removes "addresses" edges to Address entities.
func (uuo *UserUpdateOne) RemoveAddresses(a ...*Address) *UserUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAddressIDs(ids...)
}

// ClearUserChat clears all "user_chat" edges to the Chat entity.
func (uuo *UserUpdateOne) ClearUserChat() *UserUpdateOne {
	uuo.mutation.ClearUserChat()
	return uuo
}

// RemoveUserChatIDs removes the "user_chat" edge to Chat entities by IDs.
func (uuo *UserUpdateOne) RemoveUserChatIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUserChatIDs(ids...)
	return uuo
}

// RemoveUserChat removes "user_chat" edges to Chat entities.
func (uuo *UserUpdateOne) RemoveUserChat(c ...*Chat) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveUserChatIDs(ids...)
}

// ClearUserCard clears all "user_card" edges to the Card entity.
func (uuo *UserUpdateOne) ClearUserCard() *UserUpdateOne {
	uuo.mutation.ClearUserCard()
	return uuo
}

// RemoveUserCardIDs removes the "user_card" edge to Card entities by IDs.
func (uuo *UserUpdateOne) RemoveUserCardIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUserCardIDs(ids...)
	return uuo
}

// RemoveUserCard removes "user_card" edges to Card entities.
func (uuo *UserUpdateOne) RemoveUserCard(c ...*Card) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveUserCardIDs(ids...)
}

// ClearUserMessage clears all "user_message" edges to the Message entity.
func (uuo *UserUpdateOne) ClearUserMessage() *UserUpdateOne {
	uuo.mutation.ClearUserMessage()
	return uuo
}

// RemoveUserMessageIDs removes the "user_message" edge to Message entities by IDs.
func (uuo *UserUpdateOne) RemoveUserMessageIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUserMessageIDs(ids...)
	return uuo
}

// RemoveUserMessage removes "user_message" edges to Message entities.
func (uuo *UserUpdateOne) RemoveUserMessage(m ...*Message) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveUserMessageIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.FullName(); ok {
		if err := user.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "User.full_name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.PasswordHash(); ok {
		if err := user.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "password_hash", err: fmt.Errorf(`ent: validator failed for field "User.password_hash": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.PhoneNumber(); ok {
		if err := user.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "User.phone_number": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.FullName(); ok {
		_spec.SetField(user.FieldFullName, field.TypeString, value)
	}
	if uuo.mutation.FullNameCleared() {
		_spec.ClearField(user.FieldFullName, field.TypeString)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uuo.mutation.EmailCleared() {
		_spec.ClearField(user.FieldEmail, field.TypeString)
	}
	if value, ok := uuo.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeString, value)
	}
	if uuo.mutation.PasswordHashCleared() {
		_spec.ClearField(user.FieldPasswordHash, field.TypeString)
	}
	if value, ok := uuo.mutation.PhoneNumber(); ok {
		_spec.SetField(user.FieldPhoneNumber, field.TypeString, value)
	}
	if uuo.mutation.PhoneNumberCleared() {
		_spec.ClearField(user.FieldPhoneNumber, field.TypeString)
	}
	if uuo.mutation.UserCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.UserCategoryTable,
			Columns: []string{user.UserCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.UserCategoryTable,
			Columns: []string{user.UserCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ShoppingCartUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ShoppingCartUserTable,
			Columns: []string{user.ShoppingCartUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedShoppingCartUserIDs(); len(nodes) > 0 && !uuo.mutation.ShoppingCartUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ShoppingCartUserTable,
			Columns: []string{user.ShoppingCartUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ShoppingCartUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ShoppingCartUserTable,
			Columns: []string{user.ShoppingCartUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserTokenUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTokenUserTable,
			Columns: []string{user.UserTokenUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserTokenUserIDs(); len(nodes) > 0 && !uuo.mutation.UserTokenUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTokenUserTable,
			Columns: []string{user.UserTokenUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserTokenUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserTokenUserTable,
			Columns: []string{user.UserTokenUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertoken.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OrderUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OrderUserTable,
			Columns: []string{user.OrderUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOrderUserIDs(); len(nodes) > 0 && !uuo.mutation.OrderUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OrderUserTable,
			Columns: []string{user.OrderUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OrderUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OrderUserTable,
			Columns: []string{user.OrderUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.AddressesTable,
			Columns: user.AddressesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAddressesIDs(); len(nodes) > 0 && !uuo.mutation.AddressesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.AddressesTable,
			Columns: user.AddressesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AddressesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.AddressesTable,
			Columns: user.AddressesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserChatTable,
			Columns: []string{user.UserChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserChatIDs(); len(nodes) > 0 && !uuo.mutation.UserChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserChatTable,
			Columns: []string{user.UserChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserChatTable,
			Columns: []string{user.UserChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserCardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCardTable,
			Columns: []string{user.UserCardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserCardIDs(); len(nodes) > 0 && !uuo.mutation.UserCardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCardTable,
			Columns: []string{user.UserCardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserCardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCardTable,
			Columns: []string{user.UserCardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserMessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserMessageTable,
			Columns: []string{user.UserMessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserMessageIDs(); len(nodes) > 0 && !uuo.mutation.UserMessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserMessageTable,
			Columns: []string{user.UserMessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserMessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserMessageTable,
			Columns: []string{user.UserMessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
