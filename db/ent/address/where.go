// Code generated by ent, DO NOT EDIT.

package address

import (
	"main/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldID, id))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCity, v))
}

// StreetName applies equality check predicate on the "street_name" field. It's identical to StreetNameEQ.
func StreetName(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldStreetName, v))
}

// HouseNumber applies equality check predicate on the "house_number" field. It's identical to HouseNumberEQ.
func HouseNumber(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldHouseNumber, v))
}

// StoreName applies equality check predicate on the "store_name" field. It's identical to StoreNameEQ.
func StoreName(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldStoreName, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldCity, v))
}

// CityIsNil applies the IsNil predicate on the "city" field.
func CityIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldCity))
}

// CityNotNil applies the NotNil predicate on the "city" field.
func CityNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldCity))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldCity, v))
}

// StreetNameEQ applies the EQ predicate on the "street_name" field.
func StreetNameEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldStreetName, v))
}

// StreetNameNEQ applies the NEQ predicate on the "street_name" field.
func StreetNameNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldStreetName, v))
}

// StreetNameIn applies the In predicate on the "street_name" field.
func StreetNameIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldStreetName, vs...))
}

// StreetNameNotIn applies the NotIn predicate on the "street_name" field.
func StreetNameNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldStreetName, vs...))
}

// StreetNameGT applies the GT predicate on the "street_name" field.
func StreetNameGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldStreetName, v))
}

// StreetNameGTE applies the GTE predicate on the "street_name" field.
func StreetNameGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldStreetName, v))
}

// StreetNameLT applies the LT predicate on the "street_name" field.
func StreetNameLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldStreetName, v))
}

// StreetNameLTE applies the LTE predicate on the "street_name" field.
func StreetNameLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldStreetName, v))
}

// StreetNameContains applies the Contains predicate on the "street_name" field.
func StreetNameContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldStreetName, v))
}

// StreetNameHasPrefix applies the HasPrefix predicate on the "street_name" field.
func StreetNameHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldStreetName, v))
}

// StreetNameHasSuffix applies the HasSuffix predicate on the "street_name" field.
func StreetNameHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldStreetName, v))
}

// StreetNameIsNil applies the IsNil predicate on the "street_name" field.
func StreetNameIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldStreetName))
}

// StreetNameNotNil applies the NotNil predicate on the "street_name" field.
func StreetNameNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldStreetName))
}

// StreetNameEqualFold applies the EqualFold predicate on the "street_name" field.
func StreetNameEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldStreetName, v))
}

// StreetNameContainsFold applies the ContainsFold predicate on the "street_name" field.
func StreetNameContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldStreetName, v))
}

// HouseNumberEQ applies the EQ predicate on the "house_number" field.
func HouseNumberEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldHouseNumber, v))
}

// HouseNumberNEQ applies the NEQ predicate on the "house_number" field.
func HouseNumberNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldHouseNumber, v))
}

// HouseNumberIn applies the In predicate on the "house_number" field.
func HouseNumberIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldHouseNumber, vs...))
}

// HouseNumberNotIn applies the NotIn predicate on the "house_number" field.
func HouseNumberNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldHouseNumber, vs...))
}

// HouseNumberGT applies the GT predicate on the "house_number" field.
func HouseNumberGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldHouseNumber, v))
}

// HouseNumberGTE applies the GTE predicate on the "house_number" field.
func HouseNumberGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldHouseNumber, v))
}

// HouseNumberLT applies the LT predicate on the "house_number" field.
func HouseNumberLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldHouseNumber, v))
}

// HouseNumberLTE applies the LTE predicate on the "house_number" field.
func HouseNumberLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldHouseNumber, v))
}

// HouseNumberContains applies the Contains predicate on the "house_number" field.
func HouseNumberContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldHouseNumber, v))
}

// HouseNumberHasPrefix applies the HasPrefix predicate on the "house_number" field.
func HouseNumberHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldHouseNumber, v))
}

// HouseNumberHasSuffix applies the HasSuffix predicate on the "house_number" field.
func HouseNumberHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldHouseNumber, v))
}

// HouseNumberIsNil applies the IsNil predicate on the "house_number" field.
func HouseNumberIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldHouseNumber))
}

// HouseNumberNotNil applies the NotNil predicate on the "house_number" field.
func HouseNumberNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldHouseNumber))
}

// HouseNumberEqualFold applies the EqualFold predicate on the "house_number" field.
func HouseNumberEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldHouseNumber, v))
}

// HouseNumberContainsFold applies the ContainsFold predicate on the "house_number" field.
func HouseNumberContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldHouseNumber, v))
}

// StoreNameEQ applies the EQ predicate on the "store_name" field.
func StoreNameEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldEQ(FieldStoreName, v))
}

// StoreNameNEQ applies the NEQ predicate on the "store_name" field.
func StoreNameNEQ(v string) predicate.Address {
	return predicate.Address(sql.FieldNEQ(FieldStoreName, v))
}

// StoreNameIn applies the In predicate on the "store_name" field.
func StoreNameIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldIn(FieldStoreName, vs...))
}

// StoreNameNotIn applies the NotIn predicate on the "store_name" field.
func StoreNameNotIn(vs ...string) predicate.Address {
	return predicate.Address(sql.FieldNotIn(FieldStoreName, vs...))
}

// StoreNameGT applies the GT predicate on the "store_name" field.
func StoreNameGT(v string) predicate.Address {
	return predicate.Address(sql.FieldGT(FieldStoreName, v))
}

// StoreNameGTE applies the GTE predicate on the "store_name" field.
func StoreNameGTE(v string) predicate.Address {
	return predicate.Address(sql.FieldGTE(FieldStoreName, v))
}

// StoreNameLT applies the LT predicate on the "store_name" field.
func StoreNameLT(v string) predicate.Address {
	return predicate.Address(sql.FieldLT(FieldStoreName, v))
}

// StoreNameLTE applies the LTE predicate on the "store_name" field.
func StoreNameLTE(v string) predicate.Address {
	return predicate.Address(sql.FieldLTE(FieldStoreName, v))
}

// StoreNameContains applies the Contains predicate on the "store_name" field.
func StoreNameContains(v string) predicate.Address {
	return predicate.Address(sql.FieldContains(FieldStoreName, v))
}

// StoreNameHasPrefix applies the HasPrefix predicate on the "store_name" field.
func StoreNameHasPrefix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasPrefix(FieldStoreName, v))
}

// StoreNameHasSuffix applies the HasSuffix predicate on the "store_name" field.
func StoreNameHasSuffix(v string) predicate.Address {
	return predicate.Address(sql.FieldHasSuffix(FieldStoreName, v))
}

// StoreNameIsNil applies the IsNil predicate on the "store_name" field.
func StoreNameIsNil() predicate.Address {
	return predicate.Address(sql.FieldIsNull(FieldStoreName))
}

// StoreNameNotNil applies the NotNil predicate on the "store_name" field.
func StoreNameNotNil() predicate.Address {
	return predicate.Address(sql.FieldNotNull(FieldStoreName))
}

// StoreNameEqualFold applies the EqualFold predicate on the "store_name" field.
func StoreNameEqualFold(v string) predicate.Address {
	return predicate.Address(sql.FieldEqualFold(FieldStoreName, v))
}

// StoreNameContainsFold applies the ContainsFold predicate on the "store_name" field.
func StoreNameContainsFold(v string) predicate.Address {
	return predicate.Address(sql.FieldContainsFold(FieldStoreName, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAddress applies the HasEdge predicate on the "address" edge.
func HasAddress() predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AddressTable, AddressColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddressWith applies the HasEdge predicate on the "address" edge with a given conditions (other predicates).
func HasAddressWith(preds ...predicate.Order) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		step := newAddressStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Address) predicate.Address {
	return predicate.Address(sql.NotPredicates(p))
}
