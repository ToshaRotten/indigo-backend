// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/db/ent/predicate"
	"main/db/ent/product"
	"main/db/ent/shoppingcart"
	"main/db/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShoppingCartUpdate is the builder for updating ShoppingCart entities.
type ShoppingCartUpdate struct {
	config
	hooks    []Hook
	mutation *ShoppingCartMutation
}

// Where appends a list predicates to the ShoppingCartUpdate builder.
func (scu *ShoppingCartUpdate) Where(ps ...predicate.ShoppingCart) *ShoppingCartUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetQuantity sets the "quantity" field.
func (scu *ShoppingCartUpdate) SetQuantity(i int) *ShoppingCartUpdate {
	scu.mutation.ResetQuantity()
	scu.mutation.SetQuantity(i)
	return scu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (scu *ShoppingCartUpdate) SetNillableQuantity(i *int) *ShoppingCartUpdate {
	if i != nil {
		scu.SetQuantity(*i)
	}
	return scu
}

// AddQuantity adds i to the "quantity" field.
func (scu *ShoppingCartUpdate) AddQuantity(i int) *ShoppingCartUpdate {
	scu.mutation.AddQuantity(i)
	return scu
}

// ClearQuantity clears the value of the "quantity" field.
func (scu *ShoppingCartUpdate) ClearQuantity() *ShoppingCartUpdate {
	scu.mutation.ClearQuantity()
	return scu
}

// SetProductID sets the "product_id" field.
func (scu *ShoppingCartUpdate) SetProductID(i int) *ShoppingCartUpdate {
	scu.mutation.SetProductID(i)
	return scu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (scu *ShoppingCartUpdate) SetNillableProductID(i *int) *ShoppingCartUpdate {
	if i != nil {
		scu.SetProductID(*i)
	}
	return scu
}

// ClearProductID clears the value of the "product_id" field.
func (scu *ShoppingCartUpdate) ClearProductID() *ShoppingCartUpdate {
	scu.mutation.ClearProductID()
	return scu
}

// SetUserID sets the "user_id" field.
func (scu *ShoppingCartUpdate) SetUserID(i int) *ShoppingCartUpdate {
	scu.mutation.SetUserID(i)
	return scu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (scu *ShoppingCartUpdate) SetNillableUserID(i *int) *ShoppingCartUpdate {
	if i != nil {
		scu.SetUserID(*i)
	}
	return scu
}

// ClearUserID clears the value of the "user_id" field.
func (scu *ShoppingCartUpdate) ClearUserID() *ShoppingCartUpdate {
	scu.mutation.ClearUserID()
	return scu
}

// SetProductsID sets the "products" edge to the Product entity by ID.
func (scu *ShoppingCartUpdate) SetProductsID(id int) *ShoppingCartUpdate {
	scu.mutation.SetProductsID(id)
	return scu
}

// SetNillableProductsID sets the "products" edge to the Product entity by ID if the given value is not nil.
func (scu *ShoppingCartUpdate) SetNillableProductsID(id *int) *ShoppingCartUpdate {
	if id != nil {
		scu = scu.SetProductsID(*id)
	}
	return scu
}

// SetProducts sets the "products" edge to the Product entity.
func (scu *ShoppingCartUpdate) SetProducts(p *Product) *ShoppingCartUpdate {
	return scu.SetProductsID(p.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (scu *ShoppingCartUpdate) SetUsersID(id int) *ShoppingCartUpdate {
	scu.mutation.SetUsersID(id)
	return scu
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (scu *ShoppingCartUpdate) SetNillableUsersID(id *int) *ShoppingCartUpdate {
	if id != nil {
		scu = scu.SetUsersID(*id)
	}
	return scu
}

// SetUsers sets the "users" edge to the User entity.
func (scu *ShoppingCartUpdate) SetUsers(u *User) *ShoppingCartUpdate {
	return scu.SetUsersID(u.ID)
}

// Mutation returns the ShoppingCartMutation object of the builder.
func (scu *ShoppingCartUpdate) Mutation() *ShoppingCartMutation {
	return scu.mutation
}

// ClearProducts clears the "products" edge to the Product entity.
func (scu *ShoppingCartUpdate) ClearProducts() *ShoppingCartUpdate {
	scu.mutation.ClearProducts()
	return scu
}

// ClearUsers clears the "users" edge to the User entity.
func (scu *ShoppingCartUpdate) ClearUsers() *ShoppingCartUpdate {
	scu.mutation.ClearUsers()
	return scu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *ShoppingCartUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *ShoppingCartUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *ShoppingCartUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *ShoppingCartUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (scu *ShoppingCartUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(shoppingcart.Table, shoppingcart.Columns, sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.Quantity(); ok {
		_spec.SetField(shoppingcart.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedQuantity(); ok {
		_spec.AddField(shoppingcart.FieldQuantity, field.TypeInt, value)
	}
	if scu.mutation.QuantityCleared() {
		_spec.ClearField(shoppingcart.FieldQuantity, field.TypeInt)
	}
	if scu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppingcart.ProductsTable,
			Columns: []string{shoppingcart.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppingcart.ProductsTable,
			Columns: []string{shoppingcart.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppingcart.UsersTable,
			Columns: []string{shoppingcart.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppingcart.UsersTable,
			Columns: []string{shoppingcart.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shoppingcart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// ShoppingCartUpdateOne is the builder for updating a single ShoppingCart entity.
type ShoppingCartUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShoppingCartMutation
}

// SetQuantity sets the "quantity" field.
func (scuo *ShoppingCartUpdateOne) SetQuantity(i int) *ShoppingCartUpdateOne {
	scuo.mutation.ResetQuantity()
	scuo.mutation.SetQuantity(i)
	return scuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (scuo *ShoppingCartUpdateOne) SetNillableQuantity(i *int) *ShoppingCartUpdateOne {
	if i != nil {
		scuo.SetQuantity(*i)
	}
	return scuo
}

// AddQuantity adds i to the "quantity" field.
func (scuo *ShoppingCartUpdateOne) AddQuantity(i int) *ShoppingCartUpdateOne {
	scuo.mutation.AddQuantity(i)
	return scuo
}

// ClearQuantity clears the value of the "quantity" field.
func (scuo *ShoppingCartUpdateOne) ClearQuantity() *ShoppingCartUpdateOne {
	scuo.mutation.ClearQuantity()
	return scuo
}

// SetProductID sets the "product_id" field.
func (scuo *ShoppingCartUpdateOne) SetProductID(i int) *ShoppingCartUpdateOne {
	scuo.mutation.SetProductID(i)
	return scuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (scuo *ShoppingCartUpdateOne) SetNillableProductID(i *int) *ShoppingCartUpdateOne {
	if i != nil {
		scuo.SetProductID(*i)
	}
	return scuo
}

// ClearProductID clears the value of the "product_id" field.
func (scuo *ShoppingCartUpdateOne) ClearProductID() *ShoppingCartUpdateOne {
	scuo.mutation.ClearProductID()
	return scuo
}

// SetUserID sets the "user_id" field.
func (scuo *ShoppingCartUpdateOne) SetUserID(i int) *ShoppingCartUpdateOne {
	scuo.mutation.SetUserID(i)
	return scuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (scuo *ShoppingCartUpdateOne) SetNillableUserID(i *int) *ShoppingCartUpdateOne {
	if i != nil {
		scuo.SetUserID(*i)
	}
	return scuo
}

// ClearUserID clears the value of the "user_id" field.
func (scuo *ShoppingCartUpdateOne) ClearUserID() *ShoppingCartUpdateOne {
	scuo.mutation.ClearUserID()
	return scuo
}

// SetProductsID sets the "products" edge to the Product entity by ID.
func (scuo *ShoppingCartUpdateOne) SetProductsID(id int) *ShoppingCartUpdateOne {
	scuo.mutation.SetProductsID(id)
	return scuo
}

// SetNillableProductsID sets the "products" edge to the Product entity by ID if the given value is not nil.
func (scuo *ShoppingCartUpdateOne) SetNillableProductsID(id *int) *ShoppingCartUpdateOne {
	if id != nil {
		scuo = scuo.SetProductsID(*id)
	}
	return scuo
}

// SetProducts sets the "products" edge to the Product entity.
func (scuo *ShoppingCartUpdateOne) SetProducts(p *Product) *ShoppingCartUpdateOne {
	return scuo.SetProductsID(p.ID)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (scuo *ShoppingCartUpdateOne) SetUsersID(id int) *ShoppingCartUpdateOne {
	scuo.mutation.SetUsersID(id)
	return scuo
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (scuo *ShoppingCartUpdateOne) SetNillableUsersID(id *int) *ShoppingCartUpdateOne {
	if id != nil {
		scuo = scuo.SetUsersID(*id)
	}
	return scuo
}

// SetUsers sets the "users" edge to the User entity.
func (scuo *ShoppingCartUpdateOne) SetUsers(u *User) *ShoppingCartUpdateOne {
	return scuo.SetUsersID(u.ID)
}

// Mutation returns the ShoppingCartMutation object of the builder.
func (scuo *ShoppingCartUpdateOne) Mutation() *ShoppingCartMutation {
	return scuo.mutation
}

// ClearProducts clears the "products" edge to the Product entity.
func (scuo *ShoppingCartUpdateOne) ClearProducts() *ShoppingCartUpdateOne {
	scuo.mutation.ClearProducts()
	return scuo
}

// ClearUsers clears the "users" edge to the User entity.
func (scuo *ShoppingCartUpdateOne) ClearUsers() *ShoppingCartUpdateOne {
	scuo.mutation.ClearUsers()
	return scuo
}

// Where appends a list predicates to the ShoppingCartUpdate builder.
func (scuo *ShoppingCartUpdateOne) Where(ps ...predicate.ShoppingCart) *ShoppingCartUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *ShoppingCartUpdateOne) Select(field string, fields ...string) *ShoppingCartUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated ShoppingCart entity.
func (scuo *ShoppingCartUpdateOne) Save(ctx context.Context) (*ShoppingCart, error) {
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *ShoppingCartUpdateOne) SaveX(ctx context.Context) *ShoppingCart {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *ShoppingCartUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *ShoppingCartUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (scuo *ShoppingCartUpdateOne) sqlSave(ctx context.Context) (_node *ShoppingCart, err error) {
	_spec := sqlgraph.NewUpdateSpec(shoppingcart.Table, shoppingcart.Columns, sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShoppingCart.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shoppingcart.FieldID)
		for _, f := range fields {
			if !shoppingcart.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shoppingcart.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.Quantity(); ok {
		_spec.SetField(shoppingcart.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedQuantity(); ok {
		_spec.AddField(shoppingcart.FieldQuantity, field.TypeInt, value)
	}
	if scuo.mutation.QuantityCleared() {
		_spec.ClearField(shoppingcart.FieldQuantity, field.TypeInt)
	}
	if scuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppingcart.ProductsTable,
			Columns: []string{shoppingcart.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppingcart.ProductsTable,
			Columns: []string{shoppingcart.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if scuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppingcart.UsersTable,
			Columns: []string{shoppingcart.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := scuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shoppingcart.UsersTable,
			Columns: []string{shoppingcart.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShoppingCart{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shoppingcart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
