// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/db/ent/order"
	"main/db/ent/orderdetail"
	"main/db/ent/predicate"
	"main/db/ent/product"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderDetailUpdate is the builder for updating OrderDetail entities.
type OrderDetailUpdate struct {
	config
	hooks    []Hook
	mutation *OrderDetailMutation
}

// Where appends a list predicates to the OrderDetailUpdate builder.
func (odu *OrderDetailUpdate) Where(ps ...predicate.OrderDetail) *OrderDetailUpdate {
	odu.mutation.Where(ps...)
	return odu
}

// SetQuantity sets the "quantity" field.
func (odu *OrderDetailUpdate) SetQuantity(i int) *OrderDetailUpdate {
	odu.mutation.ResetQuantity()
	odu.mutation.SetQuantity(i)
	return odu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (odu *OrderDetailUpdate) SetNillableQuantity(i *int) *OrderDetailUpdate {
	if i != nil {
		odu.SetQuantity(*i)
	}
	return odu
}

// AddQuantity adds i to the "quantity" field.
func (odu *OrderDetailUpdate) AddQuantity(i int) *OrderDetailUpdate {
	odu.mutation.AddQuantity(i)
	return odu
}

// ClearQuantity clears the value of the "quantity" field.
func (odu *OrderDetailUpdate) ClearQuantity() *OrderDetailUpdate {
	odu.mutation.ClearQuantity()
	return odu
}

// SetOrderID sets the "order_id" field.
func (odu *OrderDetailUpdate) SetOrderID(i int) *OrderDetailUpdate {
	odu.mutation.SetOrderID(i)
	return odu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (odu *OrderDetailUpdate) SetNillableOrderID(i *int) *OrderDetailUpdate {
	if i != nil {
		odu.SetOrderID(*i)
	}
	return odu
}

// ClearOrderID clears the value of the "order_id" field.
func (odu *OrderDetailUpdate) ClearOrderID() *OrderDetailUpdate {
	odu.mutation.ClearOrderID()
	return odu
}

// SetProductID sets the "product_id" field.
func (odu *OrderDetailUpdate) SetProductID(i int) *OrderDetailUpdate {
	odu.mutation.ResetProductID()
	odu.mutation.SetProductID(i)
	return odu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (odu *OrderDetailUpdate) SetNillableProductID(i *int) *OrderDetailUpdate {
	if i != nil {
		odu.SetProductID(*i)
	}
	return odu
}

// AddProductID adds i to the "product_id" field.
func (odu *OrderDetailUpdate) AddProductID(i int) *OrderDetailUpdate {
	odu.mutation.AddProductID(i)
	return odu
}

// ClearProductID clears the value of the "product_id" field.
func (odu *OrderDetailUpdate) ClearProductID() *OrderDetailUpdate {
	odu.mutation.ClearProductID()
	return odu
}

// SetOrder sets the "order" edge to the Order entity.
func (odu *OrderDetailUpdate) SetOrder(o *Order) *OrderDetailUpdate {
	return odu.SetOrderID(o.ID)
}

// SetProductsID sets the "products" edge to the Product entity by ID.
func (odu *OrderDetailUpdate) SetProductsID(id int) *OrderDetailUpdate {
	odu.mutation.SetProductsID(id)
	return odu
}

// SetNillableProductsID sets the "products" edge to the Product entity by ID if the given value is not nil.
func (odu *OrderDetailUpdate) SetNillableProductsID(id *int) *OrderDetailUpdate {
	if id != nil {
		odu = odu.SetProductsID(*id)
	}
	return odu
}

// SetProducts sets the "products" edge to the Product entity.
func (odu *OrderDetailUpdate) SetProducts(p *Product) *OrderDetailUpdate {
	return odu.SetProductsID(p.ID)
}

// Mutation returns the OrderDetailMutation object of the builder.
func (odu *OrderDetailUpdate) Mutation() *OrderDetailMutation {
	return odu.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (odu *OrderDetailUpdate) ClearOrder() *OrderDetailUpdate {
	odu.mutation.ClearOrder()
	return odu
}

// ClearProducts clears the "products" edge to the Product entity.
func (odu *OrderDetailUpdate) ClearProducts() *OrderDetailUpdate {
	odu.mutation.ClearProducts()
	return odu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (odu *OrderDetailUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, odu.sqlSave, odu.mutation, odu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (odu *OrderDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := odu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (odu *OrderDetailUpdate) Exec(ctx context.Context) error {
	_, err := odu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (odu *OrderDetailUpdate) ExecX(ctx context.Context) {
	if err := odu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (odu *OrderDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderdetail.Table, orderdetail.Columns, sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt))
	if ps := odu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := odu.mutation.Quantity(); ok {
		_spec.SetField(orderdetail.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := odu.mutation.AddedQuantity(); ok {
		_spec.AddField(orderdetail.FieldQuantity, field.TypeInt, value)
	}
	if odu.mutation.QuantityCleared() {
		_spec.ClearField(orderdetail.FieldQuantity, field.TypeInt)
	}
	if value, ok := odu.mutation.ProductID(); ok {
		_spec.SetField(orderdetail.FieldProductID, field.TypeInt, value)
	}
	if value, ok := odu.mutation.AddedProductID(); ok {
		_spec.AddField(orderdetail.FieldProductID, field.TypeInt, value)
	}
	if odu.mutation.ProductIDCleared() {
		_spec.ClearField(orderdetail.FieldProductID, field.TypeInt)
	}
	if odu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderdetail.OrderTable,
			Columns: []string{orderdetail.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := odu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderdetail.OrderTable,
			Columns: []string{orderdetail.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if odu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderdetail.ProductsTable,
			Columns: []string{orderdetail.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := odu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderdetail.ProductsTable,
			Columns: []string{orderdetail.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, odu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	odu.mutation.done = true
	return n, nil
}

// OrderDetailUpdateOne is the builder for updating a single OrderDetail entity.
type OrderDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderDetailMutation
}

// SetQuantity sets the "quantity" field.
func (oduo *OrderDetailUpdateOne) SetQuantity(i int) *OrderDetailUpdateOne {
	oduo.mutation.ResetQuantity()
	oduo.mutation.SetQuantity(i)
	return oduo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (oduo *OrderDetailUpdateOne) SetNillableQuantity(i *int) *OrderDetailUpdateOne {
	if i != nil {
		oduo.SetQuantity(*i)
	}
	return oduo
}

// AddQuantity adds i to the "quantity" field.
func (oduo *OrderDetailUpdateOne) AddQuantity(i int) *OrderDetailUpdateOne {
	oduo.mutation.AddQuantity(i)
	return oduo
}

// ClearQuantity clears the value of the "quantity" field.
func (oduo *OrderDetailUpdateOne) ClearQuantity() *OrderDetailUpdateOne {
	oduo.mutation.ClearQuantity()
	return oduo
}

// SetOrderID sets the "order_id" field.
func (oduo *OrderDetailUpdateOne) SetOrderID(i int) *OrderDetailUpdateOne {
	oduo.mutation.SetOrderID(i)
	return oduo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (oduo *OrderDetailUpdateOne) SetNillableOrderID(i *int) *OrderDetailUpdateOne {
	if i != nil {
		oduo.SetOrderID(*i)
	}
	return oduo
}

// ClearOrderID clears the value of the "order_id" field.
func (oduo *OrderDetailUpdateOne) ClearOrderID() *OrderDetailUpdateOne {
	oduo.mutation.ClearOrderID()
	return oduo
}

// SetProductID sets the "product_id" field.
func (oduo *OrderDetailUpdateOne) SetProductID(i int) *OrderDetailUpdateOne {
	oduo.mutation.ResetProductID()
	oduo.mutation.SetProductID(i)
	return oduo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (oduo *OrderDetailUpdateOne) SetNillableProductID(i *int) *OrderDetailUpdateOne {
	if i != nil {
		oduo.SetProductID(*i)
	}
	return oduo
}

// AddProductID adds i to the "product_id" field.
func (oduo *OrderDetailUpdateOne) AddProductID(i int) *OrderDetailUpdateOne {
	oduo.mutation.AddProductID(i)
	return oduo
}

// ClearProductID clears the value of the "product_id" field.
func (oduo *OrderDetailUpdateOne) ClearProductID() *OrderDetailUpdateOne {
	oduo.mutation.ClearProductID()
	return oduo
}

// SetOrder sets the "order" edge to the Order entity.
func (oduo *OrderDetailUpdateOne) SetOrder(o *Order) *OrderDetailUpdateOne {
	return oduo.SetOrderID(o.ID)
}

// SetProductsID sets the "products" edge to the Product entity by ID.
func (oduo *OrderDetailUpdateOne) SetProductsID(id int) *OrderDetailUpdateOne {
	oduo.mutation.SetProductsID(id)
	return oduo
}

// SetNillableProductsID sets the "products" edge to the Product entity by ID if the given value is not nil.
func (oduo *OrderDetailUpdateOne) SetNillableProductsID(id *int) *OrderDetailUpdateOne {
	if id != nil {
		oduo = oduo.SetProductsID(*id)
	}
	return oduo
}

// SetProducts sets the "products" edge to the Product entity.
func (oduo *OrderDetailUpdateOne) SetProducts(p *Product) *OrderDetailUpdateOne {
	return oduo.SetProductsID(p.ID)
}

// Mutation returns the OrderDetailMutation object of the builder.
func (oduo *OrderDetailUpdateOne) Mutation() *OrderDetailMutation {
	return oduo.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (oduo *OrderDetailUpdateOne) ClearOrder() *OrderDetailUpdateOne {
	oduo.mutation.ClearOrder()
	return oduo
}

// ClearProducts clears the "products" edge to the Product entity.
func (oduo *OrderDetailUpdateOne) ClearProducts() *OrderDetailUpdateOne {
	oduo.mutation.ClearProducts()
	return oduo
}

// Where appends a list predicates to the OrderDetailUpdate builder.
func (oduo *OrderDetailUpdateOne) Where(ps ...predicate.OrderDetail) *OrderDetailUpdateOne {
	oduo.mutation.Where(ps...)
	return oduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oduo *OrderDetailUpdateOne) Select(field string, fields ...string) *OrderDetailUpdateOne {
	oduo.fields = append([]string{field}, fields...)
	return oduo
}

// Save executes the query and returns the updated OrderDetail entity.
func (oduo *OrderDetailUpdateOne) Save(ctx context.Context) (*OrderDetail, error) {
	return withHooks(ctx, oduo.sqlSave, oduo.mutation, oduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oduo *OrderDetailUpdateOne) SaveX(ctx context.Context) *OrderDetail {
	node, err := oduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oduo *OrderDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := oduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oduo *OrderDetailUpdateOne) ExecX(ctx context.Context) {
	if err := oduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oduo *OrderDetailUpdateOne) sqlSave(ctx context.Context) (_node *OrderDetail, err error) {
	_spec := sqlgraph.NewUpdateSpec(orderdetail.Table, orderdetail.Columns, sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt))
	id, ok := oduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderdetail.FieldID)
		for _, f := range fields {
			if !orderdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oduo.mutation.Quantity(); ok {
		_spec.SetField(orderdetail.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := oduo.mutation.AddedQuantity(); ok {
		_spec.AddField(orderdetail.FieldQuantity, field.TypeInt, value)
	}
	if oduo.mutation.QuantityCleared() {
		_spec.ClearField(orderdetail.FieldQuantity, field.TypeInt)
	}
	if value, ok := oduo.mutation.ProductID(); ok {
		_spec.SetField(orderdetail.FieldProductID, field.TypeInt, value)
	}
	if value, ok := oduo.mutation.AddedProductID(); ok {
		_spec.AddField(orderdetail.FieldProductID, field.TypeInt, value)
	}
	if oduo.mutation.ProductIDCleared() {
		_spec.ClearField(orderdetail.FieldProductID, field.TypeInt)
	}
	if oduo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderdetail.OrderTable,
			Columns: []string{orderdetail.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oduo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderdetail.OrderTable,
			Columns: []string{orderdetail.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oduo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderdetail.ProductsTable,
			Columns: []string{orderdetail.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oduo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderdetail.ProductsTable,
			Columns: []string{orderdetail.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderDetail{config: oduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oduo.mutation.done = true
	return _node, nil
}
