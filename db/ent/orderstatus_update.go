// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/db/ent/order"
	"main/db/ent/orderstatus"
	"main/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderStatusUpdate is the builder for updating OrderStatus entities.
type OrderStatusUpdate struct {
	config
	hooks    []Hook
	mutation *OrderStatusMutation
}

// Where appends a list predicates to the OrderStatusUpdate builder.
func (osu *OrderStatusUpdate) Where(ps ...predicate.OrderStatus) *OrderStatusUpdate {
	osu.mutation.Where(ps...)
	return osu
}

// SetName sets the "name" field.
func (osu *OrderStatusUpdate) SetName(s string) *OrderStatusUpdate {
	osu.mutation.SetName(s)
	return osu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (osu *OrderStatusUpdate) SetNillableName(s *string) *OrderStatusUpdate {
	if s != nil {
		osu.SetName(*s)
	}
	return osu
}

// ClearName clears the value of the "name" field.
func (osu *OrderStatusUpdate) ClearName() *OrderStatusUpdate {
	osu.mutation.ClearName()
	return osu
}

// AddStatuIDs adds the "status" edge to the Order entity by IDs.
func (osu *OrderStatusUpdate) AddStatuIDs(ids ...int) *OrderStatusUpdate {
	osu.mutation.AddStatuIDs(ids...)
	return osu
}

// AddStatus adds the "status" edges to the Order entity.
func (osu *OrderStatusUpdate) AddStatus(o ...*Order) *OrderStatusUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return osu.AddStatuIDs(ids...)
}

// Mutation returns the OrderStatusMutation object of the builder.
func (osu *OrderStatusUpdate) Mutation() *OrderStatusMutation {
	return osu.mutation
}

// ClearStatus clears all "status" edges to the Order entity.
func (osu *OrderStatusUpdate) ClearStatus() *OrderStatusUpdate {
	osu.mutation.ClearStatus()
	return osu
}

// RemoveStatuIDs removes the "status" edge to Order entities by IDs.
func (osu *OrderStatusUpdate) RemoveStatuIDs(ids ...int) *OrderStatusUpdate {
	osu.mutation.RemoveStatuIDs(ids...)
	return osu
}

// RemoveStatus removes "status" edges to Order entities.
func (osu *OrderStatusUpdate) RemoveStatus(o ...*Order) *OrderStatusUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return osu.RemoveStatuIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osu *OrderStatusUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, osu.sqlSave, osu.mutation, osu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osu *OrderStatusUpdate) SaveX(ctx context.Context) int {
	affected, err := osu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osu *OrderStatusUpdate) Exec(ctx context.Context) error {
	_, err := osu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osu *OrderStatusUpdate) ExecX(ctx context.Context) {
	if err := osu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osu *OrderStatusUpdate) check() error {
	if v, ok := osu.mutation.Name(); ok {
		if err := orderstatus.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OrderStatus.name": %w`, err)}
		}
	}
	return nil
}

func (osu *OrderStatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := osu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderstatus.Table, orderstatus.Columns, sqlgraph.NewFieldSpec(orderstatus.FieldID, field.TypeInt))
	if ps := osu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osu.mutation.Name(); ok {
		_spec.SetField(orderstatus.FieldName, field.TypeString, value)
	}
	if osu.mutation.NameCleared() {
		_spec.ClearField(orderstatus.FieldName, field.TypeString)
	}
	if osu.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderstatus.StatusTable,
			Columns: []string{orderstatus.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.RemovedStatusIDs(); len(nodes) > 0 && !osu.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderstatus.StatusTable,
			Columns: []string{orderstatus.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderstatus.StatusTable,
			Columns: []string{orderstatus.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, osu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	osu.mutation.done = true
	return n, nil
}

// OrderStatusUpdateOne is the builder for updating a single OrderStatus entity.
type OrderStatusUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderStatusMutation
}

// SetName sets the "name" field.
func (osuo *OrderStatusUpdateOne) SetName(s string) *OrderStatusUpdateOne {
	osuo.mutation.SetName(s)
	return osuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (osuo *OrderStatusUpdateOne) SetNillableName(s *string) *OrderStatusUpdateOne {
	if s != nil {
		osuo.SetName(*s)
	}
	return osuo
}

// ClearName clears the value of the "name" field.
func (osuo *OrderStatusUpdateOne) ClearName() *OrderStatusUpdateOne {
	osuo.mutation.ClearName()
	return osuo
}

// AddStatuIDs adds the "status" edge to the Order entity by IDs.
func (osuo *OrderStatusUpdateOne) AddStatuIDs(ids ...int) *OrderStatusUpdateOne {
	osuo.mutation.AddStatuIDs(ids...)
	return osuo
}

// AddStatus adds the "status" edges to the Order entity.
func (osuo *OrderStatusUpdateOne) AddStatus(o ...*Order) *OrderStatusUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return osuo.AddStatuIDs(ids...)
}

// Mutation returns the OrderStatusMutation object of the builder.
func (osuo *OrderStatusUpdateOne) Mutation() *OrderStatusMutation {
	return osuo.mutation
}

// ClearStatus clears all "status" edges to the Order entity.
func (osuo *OrderStatusUpdateOne) ClearStatus() *OrderStatusUpdateOne {
	osuo.mutation.ClearStatus()
	return osuo
}

// RemoveStatuIDs removes the "status" edge to Order entities by IDs.
func (osuo *OrderStatusUpdateOne) RemoveStatuIDs(ids ...int) *OrderStatusUpdateOne {
	osuo.mutation.RemoveStatuIDs(ids...)
	return osuo
}

// RemoveStatus removes "status" edges to Order entities.
func (osuo *OrderStatusUpdateOne) RemoveStatus(o ...*Order) *OrderStatusUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return osuo.RemoveStatuIDs(ids...)
}

// Where appends a list predicates to the OrderStatusUpdate builder.
func (osuo *OrderStatusUpdateOne) Where(ps ...predicate.OrderStatus) *OrderStatusUpdateOne {
	osuo.mutation.Where(ps...)
	return osuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (osuo *OrderStatusUpdateOne) Select(field string, fields ...string) *OrderStatusUpdateOne {
	osuo.fields = append([]string{field}, fields...)
	return osuo
}

// Save executes the query and returns the updated OrderStatus entity.
func (osuo *OrderStatusUpdateOne) Save(ctx context.Context) (*OrderStatus, error) {
	return withHooks(ctx, osuo.sqlSave, osuo.mutation, osuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osuo *OrderStatusUpdateOne) SaveX(ctx context.Context) *OrderStatus {
	node, err := osuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osuo *OrderStatusUpdateOne) Exec(ctx context.Context) error {
	_, err := osuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osuo *OrderStatusUpdateOne) ExecX(ctx context.Context) {
	if err := osuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (osuo *OrderStatusUpdateOne) check() error {
	if v, ok := osuo.mutation.Name(); ok {
		if err := orderstatus.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "OrderStatus.name": %w`, err)}
		}
	}
	return nil
}

func (osuo *OrderStatusUpdateOne) sqlSave(ctx context.Context) (_node *OrderStatus, err error) {
	if err := osuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orderstatus.Table, orderstatus.Columns, sqlgraph.NewFieldSpec(orderstatus.FieldID, field.TypeInt))
	id, ok := osuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderStatus.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := osuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderstatus.FieldID)
		for _, f := range fields {
			if !orderstatus.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderstatus.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := osuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osuo.mutation.Name(); ok {
		_spec.SetField(orderstatus.FieldName, field.TypeString, value)
	}
	if osuo.mutation.NameCleared() {
		_spec.ClearField(orderstatus.FieldName, field.TypeString)
	}
	if osuo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderstatus.StatusTable,
			Columns: []string{orderstatus.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.RemovedStatusIDs(); len(nodes) > 0 && !osuo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderstatus.StatusTable,
			Columns: []string{orderstatus.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orderstatus.StatusTable,
			Columns: []string{orderstatus.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderStatus{config: osuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, osuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderstatus.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	osuo.mutation.done = true
	return _node, nil
}
