// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"main/db/ent/user"
	"main/db/ent/usercategory"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCategoryCreate is the builder for creating a UserCategory entity.
type UserCategoryCreate struct {
	config
	mutation *UserCategoryMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ucc *UserCategoryCreate) SetName(s string) *UserCategoryCreate {
	ucc.mutation.SetName(s)
	return ucc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ucc *UserCategoryCreate) SetNillableName(s *string) *UserCategoryCreate {
	if s != nil {
		ucc.SetName(*s)
	}
	return ucc
}

// AddUserCategoryUserIDs adds the "user_category_user" edge to the User entity by IDs.
func (ucc *UserCategoryCreate) AddUserCategoryUserIDs(ids ...int) *UserCategoryCreate {
	ucc.mutation.AddUserCategoryUserIDs(ids...)
	return ucc
}

// AddUserCategoryUser adds the "user_category_user" edges to the User entity.
func (ucc *UserCategoryCreate) AddUserCategoryUser(u ...*User) *UserCategoryCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ucc.AddUserCategoryUserIDs(ids...)
}

// Mutation returns the UserCategoryMutation object of the builder.
func (ucc *UserCategoryCreate) Mutation() *UserCategoryMutation {
	return ucc.mutation
}

// Save creates the UserCategory in the database.
func (ucc *UserCategoryCreate) Save(ctx context.Context) (*UserCategory, error) {
	return withHooks(ctx, ucc.sqlSave, ucc.mutation, ucc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ucc *UserCategoryCreate) SaveX(ctx context.Context) *UserCategory {
	v, err := ucc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucc *UserCategoryCreate) Exec(ctx context.Context) error {
	_, err := ucc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucc *UserCategoryCreate) ExecX(ctx context.Context) {
	if err := ucc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucc *UserCategoryCreate) check() error {
	if v, ok := ucc.mutation.Name(); ok {
		if err := usercategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "UserCategory.name": %w`, err)}
		}
	}
	return nil
}

func (ucc *UserCategoryCreate) sqlSave(ctx context.Context) (*UserCategory, error) {
	if err := ucc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ucc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ucc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ucc.mutation.id = &_node.ID
	ucc.mutation.done = true
	return _node, nil
}

func (ucc *UserCategoryCreate) createSpec() (*UserCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &UserCategory{config: ucc.config}
		_spec = sqlgraph.NewCreateSpec(usercategory.Table, sqlgraph.NewFieldSpec(usercategory.FieldID, field.TypeInt))
	)
	if value, ok := ucc.mutation.Name(); ok {
		_spec.SetField(usercategory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := ucc.mutation.UserCategoryUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usercategory.UserCategoryUserTable,
			Columns: []string{usercategory.UserCategoryUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCategoryCreateBulk is the builder for creating many UserCategory entities in bulk.
type UserCategoryCreateBulk struct {
	config
	err      error
	builders []*UserCategoryCreate
}

// Save creates the UserCategory entities in the database.
func (uccb *UserCategoryCreateBulk) Save(ctx context.Context) ([]*UserCategory, error) {
	if uccb.err != nil {
		return nil, uccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uccb.builders))
	nodes := make([]*UserCategory, len(uccb.builders))
	mutators := make([]Mutator, len(uccb.builders))
	for i := range uccb.builders {
		func(i int, root context.Context) {
			builder := uccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uccb *UserCategoryCreateBulk) SaveX(ctx context.Context) []*UserCategory {
	v, err := uccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uccb *UserCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := uccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uccb *UserCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := uccb.Exec(ctx); err != nil {
		panic(err)
	}
}
