// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"main/db/ent/order"
	"main/db/ent/orderdetail"
	"main/db/ent/product"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OrderDetail is the model entity for the OrderDetail schema.
type OrderDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID int `json:"order_id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID int `json:"product_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderDetailQuery when eager-loading is set.
	Edges        OrderDetailEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrderDetailEdges holds the relations/edges for other nodes in the graph.
type OrderDetailEdges struct {
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// Products holds the value of the products edge.
	Products *Product `json:"products,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderDetailEdges) OrderOrErr() (*Order, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: order.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderDetailEdges) ProductsOrErr() (*Product, error) {
	if e.Products != nil {
		return e.Products, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: product.Label}
	}
	return nil, &NotLoadedError{edge: "products"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderDetail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderdetail.FieldID, orderdetail.FieldQuantity, orderdetail.FieldOrderID, orderdetail.FieldProductID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderDetail fields.
func (od *OrderDetail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderdetail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			od.ID = int(value.Int64)
		case orderdetail.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				od.Quantity = int(value.Int64)
			}
		case orderdetail.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				od.OrderID = int(value.Int64)
			}
		case orderdetail.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				od.ProductID = int(value.Int64)
			}
		default:
			od.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderDetail.
// This includes values selected through modifiers, order, etc.
func (od *OrderDetail) Value(name string) (ent.Value, error) {
	return od.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the OrderDetail entity.
func (od *OrderDetail) QueryOrder() *OrderQuery {
	return NewOrderDetailClient(od.config).QueryOrder(od)
}

// QueryProducts queries the "products" edge of the OrderDetail entity.
func (od *OrderDetail) QueryProducts() *ProductQuery {
	return NewOrderDetailClient(od.config).QueryProducts(od)
}

// Update returns a builder for updating this OrderDetail.
// Note that you need to call OrderDetail.Unwrap() before calling this method if this OrderDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (od *OrderDetail) Update() *OrderDetailUpdateOne {
	return NewOrderDetailClient(od.config).UpdateOne(od)
}

// Unwrap unwraps the OrderDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (od *OrderDetail) Unwrap() *OrderDetail {
	_tx, ok := od.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderDetail is not a transactional entity")
	}
	od.config.driver = _tx.drv
	return od
}

// String implements the fmt.Stringer.
func (od *OrderDetail) String() string {
	var builder strings.Builder
	builder.WriteString("OrderDetail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", od.ID))
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", od.Quantity))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", od.OrderID))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", od.ProductID))
	builder.WriteByte(')')
	return builder.String()
}

// OrderDetails is a parsable slice of OrderDetail.
type OrderDetails []*OrderDetail
