// Code generated by ent, DO NOT EDIT.

package order

import (
	"main/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// OrderDate applies equality check predicate on the "order_date" field. It's identical to OrderDateEQ.
func OrderDate(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderDate, v))
}

// DesiredDeliveryDate applies equality check predicate on the "desired_delivery_date" field. It's identical to DesiredDeliveryDateEQ.
func DesiredDeliveryDate(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDesiredDeliveryDate, v))
}

// TotalAmount applies equality check predicate on the "total_amount" field. It's identical to TotalAmountEQ.
func TotalAmount(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTotalAmount, v))
}

// OrderStatusID applies equality check predicate on the "order_status_id" field. It's identical to OrderStatusIDEQ.
func OrderStatusID(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderStatusID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUserID, v))
}

// AddressID applies equality check predicate on the "address_id" field. It's identical to AddressIDEQ.
func AddressID(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldAddressID, v))
}

// OrderDateEQ applies the EQ predicate on the "order_date" field.
func OrderDateEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderDate, v))
}

// OrderDateNEQ applies the NEQ predicate on the "order_date" field.
func OrderDateNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldOrderDate, v))
}

// OrderDateIn applies the In predicate on the "order_date" field.
func OrderDateIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldOrderDate, vs...))
}

// OrderDateNotIn applies the NotIn predicate on the "order_date" field.
func OrderDateNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldOrderDate, vs...))
}

// OrderDateGT applies the GT predicate on the "order_date" field.
func OrderDateGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldOrderDate, v))
}

// OrderDateGTE applies the GTE predicate on the "order_date" field.
func OrderDateGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldOrderDate, v))
}

// OrderDateLT applies the LT predicate on the "order_date" field.
func OrderDateLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldOrderDate, v))
}

// OrderDateLTE applies the LTE predicate on the "order_date" field.
func OrderDateLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldOrderDate, v))
}

// OrderDateIsNil applies the IsNil predicate on the "order_date" field.
func OrderDateIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldOrderDate))
}

// OrderDateNotNil applies the NotNil predicate on the "order_date" field.
func OrderDateNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldOrderDate))
}

// DesiredDeliveryDateEQ applies the EQ predicate on the "desired_delivery_date" field.
func DesiredDeliveryDateEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDesiredDeliveryDate, v))
}

// DesiredDeliveryDateNEQ applies the NEQ predicate on the "desired_delivery_date" field.
func DesiredDeliveryDateNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldDesiredDeliveryDate, v))
}

// DesiredDeliveryDateIn applies the In predicate on the "desired_delivery_date" field.
func DesiredDeliveryDateIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldDesiredDeliveryDate, vs...))
}

// DesiredDeliveryDateNotIn applies the NotIn predicate on the "desired_delivery_date" field.
func DesiredDeliveryDateNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldDesiredDeliveryDate, vs...))
}

// DesiredDeliveryDateGT applies the GT predicate on the "desired_delivery_date" field.
func DesiredDeliveryDateGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldDesiredDeliveryDate, v))
}

// DesiredDeliveryDateGTE applies the GTE predicate on the "desired_delivery_date" field.
func DesiredDeliveryDateGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldDesiredDeliveryDate, v))
}

// DesiredDeliveryDateLT applies the LT predicate on the "desired_delivery_date" field.
func DesiredDeliveryDateLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldDesiredDeliveryDate, v))
}

// DesiredDeliveryDateLTE applies the LTE predicate on the "desired_delivery_date" field.
func DesiredDeliveryDateLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldDesiredDeliveryDate, v))
}

// DesiredDeliveryDateIsNil applies the IsNil predicate on the "desired_delivery_date" field.
func DesiredDeliveryDateIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldDesiredDeliveryDate))
}

// DesiredDeliveryDateNotNil applies the NotNil predicate on the "desired_delivery_date" field.
func DesiredDeliveryDateNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldDesiredDeliveryDate))
}

// TotalAmountEQ applies the EQ predicate on the "total_amount" field.
func TotalAmountEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTotalAmount, v))
}

// TotalAmountNEQ applies the NEQ predicate on the "total_amount" field.
func TotalAmountNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTotalAmount, v))
}

// TotalAmountIn applies the In predicate on the "total_amount" field.
func TotalAmountIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTotalAmount, vs...))
}

// TotalAmountNotIn applies the NotIn predicate on the "total_amount" field.
func TotalAmountNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTotalAmount, vs...))
}

// TotalAmountGT applies the GT predicate on the "total_amount" field.
func TotalAmountGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldTotalAmount, v))
}

// TotalAmountGTE applies the GTE predicate on the "total_amount" field.
func TotalAmountGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldTotalAmount, v))
}

// TotalAmountLT applies the LT predicate on the "total_amount" field.
func TotalAmountLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldTotalAmount, v))
}

// TotalAmountLTE applies the LTE predicate on the "total_amount" field.
func TotalAmountLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldTotalAmount, v))
}

// TotalAmountIsNil applies the IsNil predicate on the "total_amount" field.
func TotalAmountIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldTotalAmount))
}

// TotalAmountNotNil applies the NotNil predicate on the "total_amount" field.
func TotalAmountNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldTotalAmount))
}

// OrderStatusIDEQ applies the EQ predicate on the "order_status_id" field.
func OrderStatusIDEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderStatusID, v))
}

// OrderStatusIDNEQ applies the NEQ predicate on the "order_status_id" field.
func OrderStatusIDNEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldOrderStatusID, v))
}

// OrderStatusIDIn applies the In predicate on the "order_status_id" field.
func OrderStatusIDIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldOrderStatusID, vs...))
}

// OrderStatusIDNotIn applies the NotIn predicate on the "order_status_id" field.
func OrderStatusIDNotIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldOrderStatusID, vs...))
}

// OrderStatusIDIsNil applies the IsNil predicate on the "order_status_id" field.
func OrderStatusIDIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldOrderStatusID))
}

// OrderStatusIDNotNil applies the NotNil predicate on the "order_status_id" field.
func OrderStatusIDNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldOrderStatusID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldUserID))
}

// AddressIDEQ applies the EQ predicate on the "address_id" field.
func AddressIDEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldAddressID, v))
}

// AddressIDNEQ applies the NEQ predicate on the "address_id" field.
func AddressIDNEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldAddressID, v))
}

// AddressIDIn applies the In predicate on the "address_id" field.
func AddressIDIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldAddressID, vs...))
}

// AddressIDNotIn applies the NotIn predicate on the "address_id" field.
func AddressIDNotIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldAddressID, vs...))
}

// AddressIDIsNil applies the IsNil predicate on the "address_id" field.
func AddressIDIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldAddressID))
}

// AddressIDNotNil applies the NotNil predicate on the "address_id" field.
func AddressIDNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldAddressID))
}

// HasOrderStatus applies the HasEdge predicate on the "order_status" edge.
func HasOrderStatus() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderStatusTable, OrderStatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderStatusWith applies the HasEdge predicate on the "order_status" edge with a given conditions (other predicates).
func HasOrderStatusWith(preds ...predicate.OrderStatus) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newOrderStatusStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAddresOrder applies the HasEdge predicate on the "addres_order" edge.
func HasAddresOrder() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AddresOrderTable, AddresOrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddresOrderWith applies the HasEdge predicate on the "addres_order" edge with a given conditions (other predicates).
func HasAddresOrderWith(preds ...predicate.Address) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newAddresOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.OrderDetail) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(sql.NotPredicates(p))
}
