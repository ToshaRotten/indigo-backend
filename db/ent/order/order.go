// Code generated by ent, DO NOT EDIT.

package order

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOrderDate holds the string denoting the order_date field in the database.
	FieldOrderDate = "order_date"
	// FieldDesiredDeliveryDate holds the string denoting the desired_delivery_date field in the database.
	FieldDesiredDeliveryDate = "desired_delivery_date"
	// FieldTotalAmount holds the string denoting the total_amount field in the database.
	FieldTotalAmount = "total_amount"
	// FieldOrderStatusID holds the string denoting the order_status_id field in the database.
	FieldOrderStatusID = "order_status_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldAddressID holds the string denoting the address_id field in the database.
	FieldAddressID = "address_id"
	// EdgeOrderStatus holds the string denoting the order_status edge name in mutations.
	EdgeOrderStatus = "order_status"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeAddresOrder holds the string denoting the addres_order edge name in mutations.
	EdgeAddresOrder = "addres_order"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// Table holds the table name of the order in the database.
	Table = "orders"
	// OrderStatusTable is the table that holds the order_status relation/edge.
	OrderStatusTable = "orders"
	// OrderStatusInverseTable is the table name for the OrderStatus entity.
	// It exists in this package in order to avoid circular dependency with the "orderstatus" package.
	OrderStatusInverseTable = "order_status"
	// OrderStatusColumn is the table column denoting the order_status relation/edge.
	OrderStatusColumn = "order_status_id"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "orders"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// AddresOrderTable is the table that holds the addres_order relation/edge.
	AddresOrderTable = "orders"
	// AddresOrderInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	AddresOrderInverseTable = "addresses"
	// AddresOrderColumn is the table column denoting the addres_order relation/edge.
	AddresOrderColumn = "address_id"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "order_details"
	// OrderInverseTable is the table name for the OrderDetail entity.
	// It exists in this package in order to avoid circular dependency with the "orderdetail" package.
	OrderInverseTable = "order_details"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "order_id"
)

// Columns holds all SQL columns for order fields.
var Columns = []string{
	FieldID,
	FieldOrderDate,
	FieldDesiredDeliveryDate,
	FieldTotalAmount,
	FieldOrderStatusID,
	FieldUserID,
	FieldAddressID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Order queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOrderDate orders the results by the order_date field.
func ByOrderDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderDate, opts...).ToFunc()
}

// ByDesiredDeliveryDate orders the results by the desired_delivery_date field.
func ByDesiredDeliveryDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesiredDeliveryDate, opts...).ToFunc()
}

// ByTotalAmount orders the results by the total_amount field.
func ByTotalAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalAmount, opts...).ToFunc()
}

// ByOrderStatusID orders the results by the order_status_id field.
func ByOrderStatusID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderStatusID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByAddressID orders the results by the address_id field.
func ByAddressID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddressID, opts...).ToFunc()
}

// ByOrderStatusField orders the results by order_status field.
func ByOrderStatusField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStatusStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByAddresOrderField orders the results by addres_order field.
func ByAddresOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddresOrderStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrderCount orders the results by order count.
func ByOrderCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderStep(), opts...)
	}
}

// ByOrder orders the results by order terms.
func ByOrder(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOrderStatusStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderStatusInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrderStatusTable, OrderStatusColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newAddresOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddresOrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AddresOrderTable, AddresOrderColumn),
	)
}
func newOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrderTable, OrderColumn),
	)
}
