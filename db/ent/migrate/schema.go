// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AddressesColumns holds the columns for the "addresses" table.
	AddressesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "city", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "street_name", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "house_number", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "store_name", Type: field.TypeString, Nullable: true, Size: 255},
	}
	// AddressesTable holds the schema information for the "addresses" table.
	AddressesTable = &schema.Table{
		Name:       "addresses",
		Columns:    AddressesColumns,
		PrimaryKey: []*schema.Column{AddressesColumns[0]},
	}
	// CardsColumns holds the columns for the "cards" table.
	CardsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "number", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "expiration_date", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "token", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "user_id", Type: field.TypeInt, Nullable: true},
	}
	// CardsTable holds the schema information for the "cards" table.
	CardsTable = &schema.Table{
		Name:       "cards",
		Columns:    CardsColumns,
		PrimaryKey: []*schema.Column{CardsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cards_users_user_card",
				Columns:    []*schema.Column{CardsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ChatsColumns holds the columns for the "chats" table.
	ChatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "token", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "created_at", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "manager_id", Type: field.TypeInt, Nullable: true},
		{Name: "user_id", Type: field.TypeInt, Nullable: true},
	}
	// ChatsTable holds the schema information for the "chats" table.
	ChatsTable = &schema.Table{
		Name:       "chats",
		Columns:    ChatsColumns,
		PrimaryKey: []*schema.Column{ChatsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "chats_users_user_chat",
				Columns:    []*schema.Column{ChatsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MessagesColumns holds the columns for the "messages" table.
	MessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "text", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "sended_at", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "file_path", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "file_type", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "chat_id", Type: field.TypeInt, Nullable: true},
		{Name: "user_id", Type: field.TypeInt, Nullable: true},
	}
	// MessagesTable holds the schema information for the "messages" table.
	MessagesTable = &schema.Table{
		Name:       "messages",
		Columns:    MessagesColumns,
		PrimaryKey: []*schema.Column{MessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "messages_chats_chat_message",
				Columns:    []*schema.Column{MessagesColumns[5]},
				RefColumns: []*schema.Column{ChatsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "messages_users_user_message",
				Columns:    []*schema.Column{MessagesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OrdersColumns holds the columns for the "orders" table.
	OrdersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "order_date", Type: field.TypeTime, Nullable: true},
		{Name: "desired_delivery_date", Type: field.TypeTime, Nullable: true},
		{Name: "total_amount", Type: field.TypeFloat64, Nullable: true},
		{Name: "address_id", Type: field.TypeInt, Nullable: true},
		{Name: "order_status_id", Type: field.TypeInt, Nullable: true},
		{Name: "user_id", Type: field.TypeInt, Nullable: true},
	}
	// OrdersTable holds the schema information for the "orders" table.
	OrdersTable = &schema.Table{
		Name:       "orders",
		Columns:    OrdersColumns,
		PrimaryKey: []*schema.Column{OrdersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "orders_addresses_address",
				Columns:    []*schema.Column{OrdersColumns[4]},
				RefColumns: []*schema.Column{AddressesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "orders_order_status_status",
				Columns:    []*schema.Column{OrdersColumns[5]},
				RefColumns: []*schema.Column{OrderStatusColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "orders_users_order_user",
				Columns:    []*schema.Column{OrdersColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OrderDetailsColumns holds the columns for the "order_details" table.
	OrderDetailsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "quantity", Type: field.TypeInt, Nullable: true},
		{Name: "product_id", Type: field.TypeInt, Nullable: true},
		{Name: "order_id", Type: field.TypeInt, Nullable: true},
	}
	// OrderDetailsTable holds the schema information for the "order_details" table.
	OrderDetailsTable = &schema.Table{
		Name:       "order_details",
		Columns:    OrderDetailsColumns,
		PrimaryKey: []*schema.Column{OrderDetailsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "order_details_orders_order",
				Columns:    []*schema.Column{OrderDetailsColumns[3]},
				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "order_details_products_order_detail_product",
				Columns:    []*schema.Column{OrderDetailsColumns[3]},
				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OrderStatusColumns holds the columns for the "order_status" table.
	OrderStatusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Nullable: true, Size: 255},
	}
	// OrderStatusTable holds the schema information for the "order_status" table.
	OrderStatusTable = &schema.Table{
		Name:       "order_status",
		Columns:    OrderStatusColumns,
		PrimaryKey: []*schema.Column{OrderStatusColumns[0]},
	}
	// ProductsColumns holds the columns for the "products" table.
	ProductsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "weight", Type: field.TypeFloat64, Nullable: true},
		{Name: "product_composition", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "min_storage_temp", Type: field.TypeInt, Nullable: true},
		{Name: "max_storage_temp", Type: field.TypeInt, Nullable: true},
		{Name: "shelf_life", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "picture", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "product_category_id", Type: field.TypeInt, Nullable: true},
		{Name: "type_of_packaging_id", Type: field.TypeInt, Nullable: true},
	}
	// ProductsTable holds the schema information for the "products" table.
	ProductsTable = &schema.Table{
		Name:       "products",
		Columns:    ProductsColumns,
		PrimaryKey: []*schema.Column{ProductsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "products_product_categories_category",
				Columns:    []*schema.Column{ProductsColumns[8]},
				RefColumns: []*schema.Column{ProductCategoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "products_type_of_packagings_type_of_packaging",
				Columns:    []*schema.Column{ProductsColumns[9]},
				RefColumns: []*schema.Column{TypeOfPackagingsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProductCategoriesColumns holds the columns for the "product_categories" table.
	ProductCategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Nullable: true, Size: 255},
	}
	// ProductCategoriesTable holds the schema information for the "product_categories" table.
	ProductCategoriesTable = &schema.Table{
		Name:       "product_categories",
		Columns:    ProductCategoriesColumns,
		PrimaryKey: []*schema.Column{ProductCategoriesColumns[0]},
	}
	// ProductPricesColumns holds the columns for the "product_prices" table.
	ProductPricesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "modification_date", Type: field.TypeTime, Nullable: true},
		{Name: "new_price", Type: field.TypeFloat64, Nullable: true},
		{Name: "product_id", Type: field.TypeInt, Nullable: true},
	}
	// ProductPricesTable holds the schema information for the "product_prices" table.
	ProductPricesTable = &schema.Table{
		Name:       "product_prices",
		Columns:    ProductPricesColumns,
		PrimaryKey: []*schema.Column{ProductPricesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "product_prices_products_product_price_product",
				Columns:    []*schema.Column{ProductPricesColumns[3]},
				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ShoppingCartsColumns holds the columns for the "shopping_carts" table.
	ShoppingCartsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "quantity", Type: field.TypeInt, Nullable: true},
		{Name: "product_id", Type: field.TypeInt, Nullable: true},
		{Name: "user_id", Type: field.TypeInt, Nullable: true},
	}
	// ShoppingCartsTable holds the schema information for the "shopping_carts" table.
	ShoppingCartsTable = &schema.Table{
		Name:       "shopping_carts",
		Columns:    ShoppingCartsColumns,
		PrimaryKey: []*schema.Column{ShoppingCartsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "shopping_carts_products_shopping_cart_product",
				Columns:    []*schema.Column{ShoppingCartsColumns[2]},
				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "shopping_carts_users_shopping_cart_user",
				Columns:    []*schema.Column{ShoppingCartsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TypeOfPackagingsColumns holds the columns for the "type_of_packagings" table.
	TypeOfPackagingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Nullable: true, Size: 255},
	}
	// TypeOfPackagingsTable holds the schema information for the "type_of_packagings" table.
	TypeOfPackagingsTable = &schema.Table{
		Name:       "type_of_packagings",
		Columns:    TypeOfPackagingsColumns,
		PrimaryKey: []*schema.Column{TypeOfPackagingsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "full_name", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "email", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "password_hash", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "phone_number", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "user_category_id", Type: field.TypeInt, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_user_categories_user_category_user",
				Columns:    []*schema.Column{UsersColumns[5]},
				RefColumns: []*schema.Column{UserCategoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserCategoriesColumns holds the columns for the "user_categories" table.
	UserCategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Nullable: true, Size: 255},
	}
	// UserCategoriesTable holds the schema information for the "user_categories" table.
	UserCategoriesTable = &schema.Table{
		Name:       "user_categories",
		Columns:    UserCategoriesColumns,
		PrimaryKey: []*schema.Column{UserCategoriesColumns[0]},
	}
	// UserTokensColumns holds the columns for the "user_tokens" table.
	UserTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "token", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "expiration_date", Type: field.TypeTime, Nullable: true},
		{Name: "type", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "status", Type: field.TypeString, Nullable: true},
		{Name: "last_used", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "user_id", Type: field.TypeInt, Nullable: true},
	}
	// UserTokensTable holds the schema information for the "user_tokens" table.
	UserTokensTable = &schema.Table{
		Name:       "user_tokens",
		Columns:    UserTokensColumns,
		PrimaryKey: []*schema.Column{UserTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_tokens_users_user_token_user",
				Columns:    []*schema.Column{UserTokensColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserAddressesColumns holds the columns for the "user_addresses" table.
	UserAddressesColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "address_id", Type: field.TypeInt},
	}
	// UserAddressesTable holds the schema information for the "user_addresses" table.
	UserAddressesTable = &schema.Table{
		Name:       "user_addresses",
		Columns:    UserAddressesColumns,
		PrimaryKey: []*schema.Column{UserAddressesColumns[0], UserAddressesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_addresses_user_id",
				Columns:    []*schema.Column{UserAddressesColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_addresses_address_id",
				Columns:    []*schema.Column{UserAddressesColumns[1]},
				RefColumns: []*schema.Column{AddressesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AddressesTable,
		CardsTable,
		ChatsTable,
		MessagesTable,
		OrdersTable,
		OrderDetailsTable,
		OrderStatusTable,
		ProductsTable,
		ProductCategoriesTable,
		ProductPricesTable,
		ShoppingCartsTable,
		TypeOfPackagingsTable,
		UsersTable,
		UserCategoriesTable,
		UserTokensTable,
		UserAddressesTable,
	}
)

func init() {
	CardsTable.ForeignKeys[0].RefTable = UsersTable
	ChatsTable.ForeignKeys[0].RefTable = UsersTable
	MessagesTable.ForeignKeys[0].RefTable = ChatsTable
	MessagesTable.ForeignKeys[1].RefTable = UsersTable
	OrdersTable.ForeignKeys[0].RefTable = AddressesTable
	OrdersTable.ForeignKeys[1].RefTable = OrderStatusTable
	OrdersTable.ForeignKeys[2].RefTable = UsersTable
	OrderDetailsTable.ForeignKeys[0].RefTable = OrdersTable
	OrderDetailsTable.ForeignKeys[1].RefTable = ProductsTable
	ProductsTable.ForeignKeys[0].RefTable = ProductCategoriesTable
	ProductsTable.ForeignKeys[1].RefTable = TypeOfPackagingsTable
	ProductPricesTable.ForeignKeys[0].RefTable = ProductsTable
	ShoppingCartsTable.ForeignKeys[0].RefTable = ProductsTable
	ShoppingCartsTable.ForeignKeys[1].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = UserCategoriesTable
	UserTokensTable.ForeignKeys[0].RefTable = UsersTable
	UserAddressesTable.ForeignKeys[0].RefTable = UsersTable
	UserAddressesTable.ForeignKeys[1].RefTable = AddressesTable
}
