// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"main/db/ent/predicate"
	"main/db/ent/user"
	"main/db/ent/usercategory"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCategoryQuery is the builder for querying UserCategory entities.
type UserCategoryQuery struct {
	config
	ctx                  *QueryContext
	order                []usercategory.OrderOption
	inters               []Interceptor
	predicates           []predicate.UserCategory
	withUserCategoryUser *UserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserCategoryQuery builder.
func (ucq *UserCategoryQuery) Where(ps ...predicate.UserCategory) *UserCategoryQuery {
	ucq.predicates = append(ucq.predicates, ps...)
	return ucq
}

// Limit the number of records to be returned by this query.
func (ucq *UserCategoryQuery) Limit(limit int) *UserCategoryQuery {
	ucq.ctx.Limit = &limit
	return ucq
}

// Offset to start from.
func (ucq *UserCategoryQuery) Offset(offset int) *UserCategoryQuery {
	ucq.ctx.Offset = &offset
	return ucq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ucq *UserCategoryQuery) Unique(unique bool) *UserCategoryQuery {
	ucq.ctx.Unique = &unique
	return ucq
}

// Order specifies how the records should be ordered.
func (ucq *UserCategoryQuery) Order(o ...usercategory.OrderOption) *UserCategoryQuery {
	ucq.order = append(ucq.order, o...)
	return ucq
}

// QueryUserCategoryUser chains the current query on the "user_category_user" edge.
func (ucq *UserCategoryQuery) QueryUserCategoryUser() *UserQuery {
	query := (&UserClient{config: ucq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ucq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ucq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usercategory.Table, usercategory.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usercategory.UserCategoryUserTable, usercategory.UserCategoryUserColumn),
		)
		fromU = sqlgraph.SetNeighbors(ucq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserCategory entity from the query.
// Returns a *NotFoundError when no UserCategory was found.
func (ucq *UserCategoryQuery) First(ctx context.Context) (*UserCategory, error) {
	nodes, err := ucq.Limit(1).All(setContextOp(ctx, ucq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{usercategory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ucq *UserCategoryQuery) FirstX(ctx context.Context) *UserCategory {
	node, err := ucq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserCategory ID from the query.
// Returns a *NotFoundError when no UserCategory ID was found.
func (ucq *UserCategoryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ucq.Limit(1).IDs(setContextOp(ctx, ucq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{usercategory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ucq *UserCategoryQuery) FirstIDX(ctx context.Context) int {
	id, err := ucq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserCategory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserCategory entity is found.
// Returns a *NotFoundError when no UserCategory entities are found.
func (ucq *UserCategoryQuery) Only(ctx context.Context) (*UserCategory, error) {
	nodes, err := ucq.Limit(2).All(setContextOp(ctx, ucq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{usercategory.Label}
	default:
		return nil, &NotSingularError{usercategory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ucq *UserCategoryQuery) OnlyX(ctx context.Context) *UserCategory {
	node, err := ucq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserCategory ID in the query.
// Returns a *NotSingularError when more than one UserCategory ID is found.
// Returns a *NotFoundError when no entities are found.
func (ucq *UserCategoryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ucq.Limit(2).IDs(setContextOp(ctx, ucq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{usercategory.Label}
	default:
		err = &NotSingularError{usercategory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ucq *UserCategoryQuery) OnlyIDX(ctx context.Context) int {
	id, err := ucq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserCategories.
func (ucq *UserCategoryQuery) All(ctx context.Context) ([]*UserCategory, error) {
	ctx = setContextOp(ctx, ucq.ctx, ent.OpQueryAll)
	if err := ucq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserCategory, *UserCategoryQuery]()
	return withInterceptors[[]*UserCategory](ctx, ucq, qr, ucq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ucq *UserCategoryQuery) AllX(ctx context.Context) []*UserCategory {
	nodes, err := ucq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserCategory IDs.
func (ucq *UserCategoryQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ucq.ctx.Unique == nil && ucq.path != nil {
		ucq.Unique(true)
	}
	ctx = setContextOp(ctx, ucq.ctx, ent.OpQueryIDs)
	if err = ucq.Select(usercategory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ucq *UserCategoryQuery) IDsX(ctx context.Context) []int {
	ids, err := ucq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ucq *UserCategoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ucq.ctx, ent.OpQueryCount)
	if err := ucq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ucq, querierCount[*UserCategoryQuery](), ucq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ucq *UserCategoryQuery) CountX(ctx context.Context) int {
	count, err := ucq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ucq *UserCategoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ucq.ctx, ent.OpQueryExist)
	switch _, err := ucq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ucq *UserCategoryQuery) ExistX(ctx context.Context) bool {
	exist, err := ucq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserCategoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ucq *UserCategoryQuery) Clone() *UserCategoryQuery {
	if ucq == nil {
		return nil
	}
	return &UserCategoryQuery{
		config:               ucq.config,
		ctx:                  ucq.ctx.Clone(),
		order:                append([]usercategory.OrderOption{}, ucq.order...),
		inters:               append([]Interceptor{}, ucq.inters...),
		predicates:           append([]predicate.UserCategory{}, ucq.predicates...),
		withUserCategoryUser: ucq.withUserCategoryUser.Clone(),
		// clone intermediate query.
		sql:  ucq.sql.Clone(),
		path: ucq.path,
	}
}

// WithUserCategoryUser tells the query-builder to eager-load the nodes that are connected to
// the "user_category_user" edge. The optional arguments are used to configure the query builder of the edge.
func (ucq *UserCategoryQuery) WithUserCategoryUser(opts ...func(*UserQuery)) *UserCategoryQuery {
	query := (&UserClient{config: ucq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ucq.withUserCategoryUser = query
	return ucq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserCategory.Query().
//		GroupBy(usercategory.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ucq *UserCategoryQuery) GroupBy(field string, fields ...string) *UserCategoryGroupBy {
	ucq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserCategoryGroupBy{build: ucq}
	grbuild.flds = &ucq.ctx.Fields
	grbuild.label = usercategory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.UserCategory.Query().
//		Select(usercategory.FieldName).
//		Scan(ctx, &v)
func (ucq *UserCategoryQuery) Select(fields ...string) *UserCategorySelect {
	ucq.ctx.Fields = append(ucq.ctx.Fields, fields...)
	sbuild := &UserCategorySelect{UserCategoryQuery: ucq}
	sbuild.label = usercategory.Label
	sbuild.flds, sbuild.scan = &ucq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserCategorySelect configured with the given aggregations.
func (ucq *UserCategoryQuery) Aggregate(fns ...AggregateFunc) *UserCategorySelect {
	return ucq.Select().Aggregate(fns...)
}

func (ucq *UserCategoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ucq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ucq); err != nil {
				return err
			}
		}
	}
	for _, f := range ucq.ctx.Fields {
		if !usercategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ucq.path != nil {
		prev, err := ucq.path(ctx)
		if err != nil {
			return err
		}
		ucq.sql = prev
	}
	return nil
}

func (ucq *UserCategoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserCategory, error) {
	var (
		nodes       = []*UserCategory{}
		_spec       = ucq.querySpec()
		loadedTypes = [1]bool{
			ucq.withUserCategoryUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserCategory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserCategory{config: ucq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ucq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ucq.withUserCategoryUser; query != nil {
		if err := ucq.loadUserCategoryUser(ctx, query, nodes,
			func(n *UserCategory) { n.Edges.UserCategoryUser = []*User{} },
			func(n *UserCategory, e *User) { n.Edges.UserCategoryUser = append(n.Edges.UserCategoryUser, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ucq *UserCategoryQuery) loadUserCategoryUser(ctx context.Context, query *UserQuery, nodes []*UserCategory, init func(*UserCategory), assign func(*UserCategory, *User)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*UserCategory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(user.FieldUserCategoryID)
	}
	query.Where(predicate.User(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(usercategory.UserCategoryUserColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserCategoryID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_category_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ucq *UserCategoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ucq.querySpec()
	_spec.Node.Columns = ucq.ctx.Fields
	if len(ucq.ctx.Fields) > 0 {
		_spec.Unique = ucq.ctx.Unique != nil && *ucq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ucq.driver, _spec)
}

func (ucq *UserCategoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(usercategory.Table, usercategory.Columns, sqlgraph.NewFieldSpec(usercategory.FieldID, field.TypeInt))
	_spec.From = ucq.sql
	if unique := ucq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ucq.path != nil {
		_spec.Unique = true
	}
	if fields := ucq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usercategory.FieldID)
		for i := range fields {
			if fields[i] != usercategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ucq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ucq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ucq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ucq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ucq *UserCategoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ucq.driver.Dialect())
	t1 := builder.Table(usercategory.Table)
	columns := ucq.ctx.Fields
	if len(columns) == 0 {
		columns = usercategory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ucq.sql != nil {
		selector = ucq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ucq.ctx.Unique != nil && *ucq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ucq.predicates {
		p(selector)
	}
	for _, p := range ucq.order {
		p(selector)
	}
	if offset := ucq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ucq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserCategoryGroupBy is the group-by builder for UserCategory entities.
type UserCategoryGroupBy struct {
	selector
	build *UserCategoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ucgb *UserCategoryGroupBy) Aggregate(fns ...AggregateFunc) *UserCategoryGroupBy {
	ucgb.fns = append(ucgb.fns, fns...)
	return ucgb
}

// Scan applies the selector query and scans the result into the given value.
func (ucgb *UserCategoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ucgb.build.ctx, ent.OpQueryGroupBy)
	if err := ucgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserCategoryQuery, *UserCategoryGroupBy](ctx, ucgb.build, ucgb, ucgb.build.inters, v)
}

func (ucgb *UserCategoryGroupBy) sqlScan(ctx context.Context, root *UserCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ucgb.fns))
	for _, fn := range ucgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ucgb.flds)+len(ucgb.fns))
		for _, f := range *ucgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ucgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ucgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserCategorySelect is the builder for selecting fields of UserCategory entities.
type UserCategorySelect struct {
	*UserCategoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ucs *UserCategorySelect) Aggregate(fns ...AggregateFunc) *UserCategorySelect {
	ucs.fns = append(ucs.fns, fns...)
	return ucs
}

// Scan applies the selector query and scans the result into the given value.
func (ucs *UserCategorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ucs.ctx, ent.OpQuerySelect)
	if err := ucs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserCategoryQuery, *UserCategorySelect](ctx, ucs.UserCategoryQuery, ucs, ucs.inters, v)
}

func (ucs *UserCategorySelect) sqlScan(ctx context.Context, root *UserCategoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ucs.fns))
	for _, fn := range ucs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ucs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ucs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
