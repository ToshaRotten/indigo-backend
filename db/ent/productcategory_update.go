// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/db/ent/predicate"
	"main/db/ent/product"
	"main/db/ent/productcategory"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductCategoryUpdate is the builder for updating ProductCategory entities.
type ProductCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *ProductCategoryMutation
}

// Where appends a list predicates to the ProductCategoryUpdate builder.
func (pcu *ProductCategoryUpdate) Where(ps ...predicate.ProductCategory) *ProductCategoryUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetName sets the "name" field.
func (pcu *ProductCategoryUpdate) SetName(s string) *ProductCategoryUpdate {
	pcu.mutation.SetName(s)
	return pcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcu *ProductCategoryUpdate) SetNillableName(s *string) *ProductCategoryUpdate {
	if s != nil {
		pcu.SetName(*s)
	}
	return pcu
}

// ClearName clears the value of the "name" field.
func (pcu *ProductCategoryUpdate) ClearName() *ProductCategoryUpdate {
	pcu.mutation.ClearName()
	return pcu
}

// AddCategoryIDs adds the "category" edge to the Product entity by IDs.
func (pcu *ProductCategoryUpdate) AddCategoryIDs(ids ...int) *ProductCategoryUpdate {
	pcu.mutation.AddCategoryIDs(ids...)
	return pcu
}

// AddCategory adds the "category" edges to the Product entity.
func (pcu *ProductCategoryUpdate) AddCategory(p ...*Product) *ProductCategoryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.AddCategoryIDs(ids...)
}

// Mutation returns the ProductCategoryMutation object of the builder.
func (pcu *ProductCategoryUpdate) Mutation() *ProductCategoryMutation {
	return pcu.mutation
}

// ClearCategory clears all "category" edges to the Product entity.
func (pcu *ProductCategoryUpdate) ClearCategory() *ProductCategoryUpdate {
	pcu.mutation.ClearCategory()
	return pcu
}

// RemoveCategoryIDs removes the "category" edge to Product entities by IDs.
func (pcu *ProductCategoryUpdate) RemoveCategoryIDs(ids ...int) *ProductCategoryUpdate {
	pcu.mutation.RemoveCategoryIDs(ids...)
	return pcu
}

// RemoveCategory removes "category" edges to Product entities.
func (pcu *ProductCategoryUpdate) RemoveCategory(p ...*Product) *ProductCategoryUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.RemoveCategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *ProductCategoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *ProductCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *ProductCategoryUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *ProductCategoryUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcu *ProductCategoryUpdate) check() error {
	if v, ok := pcu.mutation.Name(); ok {
		if err := productcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProductCategory.name": %w`, err)}
		}
	}
	return nil
}

func (pcu *ProductCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(productcategory.Table, productcategory.Columns, sqlgraph.NewFieldSpec(productcategory.FieldID, field.TypeInt))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.Name(); ok {
		_spec.SetField(productcategory.FieldName, field.TypeString, value)
	}
	if pcu.mutation.NameCleared() {
		_spec.ClearField(productcategory.FieldName, field.TypeString)
	}
	if pcu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.CategoryTable,
			Columns: []string{productcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedCategoryIDs(); len(nodes) > 0 && !pcu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.CategoryTable,
			Columns: []string{productcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.CategoryTable,
			Columns: []string{productcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// ProductCategoryUpdateOne is the builder for updating a single ProductCategory entity.
type ProductCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductCategoryMutation
}

// SetName sets the "name" field.
func (pcuo *ProductCategoryUpdateOne) SetName(s string) *ProductCategoryUpdateOne {
	pcuo.mutation.SetName(s)
	return pcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcuo *ProductCategoryUpdateOne) SetNillableName(s *string) *ProductCategoryUpdateOne {
	if s != nil {
		pcuo.SetName(*s)
	}
	return pcuo
}

// ClearName clears the value of the "name" field.
func (pcuo *ProductCategoryUpdateOne) ClearName() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearName()
	return pcuo
}

// AddCategoryIDs adds the "category" edge to the Product entity by IDs.
func (pcuo *ProductCategoryUpdateOne) AddCategoryIDs(ids ...int) *ProductCategoryUpdateOne {
	pcuo.mutation.AddCategoryIDs(ids...)
	return pcuo
}

// AddCategory adds the "category" edges to the Product entity.
func (pcuo *ProductCategoryUpdateOne) AddCategory(p ...*Product) *ProductCategoryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.AddCategoryIDs(ids...)
}

// Mutation returns the ProductCategoryMutation object of the builder.
func (pcuo *ProductCategoryUpdateOne) Mutation() *ProductCategoryMutation {
	return pcuo.mutation
}

// ClearCategory clears all "category" edges to the Product entity.
func (pcuo *ProductCategoryUpdateOne) ClearCategory() *ProductCategoryUpdateOne {
	pcuo.mutation.ClearCategory()
	return pcuo
}

// RemoveCategoryIDs removes the "category" edge to Product entities by IDs.
func (pcuo *ProductCategoryUpdateOne) RemoveCategoryIDs(ids ...int) *ProductCategoryUpdateOne {
	pcuo.mutation.RemoveCategoryIDs(ids...)
	return pcuo
}

// RemoveCategory removes "category" edges to Product entities.
func (pcuo *ProductCategoryUpdateOne) RemoveCategory(p ...*Product) *ProductCategoryUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.RemoveCategoryIDs(ids...)
}

// Where appends a list predicates to the ProductCategoryUpdate builder.
func (pcuo *ProductCategoryUpdateOne) Where(ps ...predicate.ProductCategory) *ProductCategoryUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *ProductCategoryUpdateOne) Select(field string, fields ...string) *ProductCategoryUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated ProductCategory entity.
func (pcuo *ProductCategoryUpdateOne) Save(ctx context.Context) (*ProductCategory, error) {
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *ProductCategoryUpdateOne) SaveX(ctx context.Context) *ProductCategory {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *ProductCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *ProductCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcuo *ProductCategoryUpdateOne) check() error {
	if v, ok := pcuo.mutation.Name(); ok {
		if err := productcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ProductCategory.name": %w`, err)}
		}
	}
	return nil
}

func (pcuo *ProductCategoryUpdateOne) sqlSave(ctx context.Context) (_node *ProductCategory, err error) {
	if err := pcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(productcategory.Table, productcategory.Columns, sqlgraph.NewFieldSpec(productcategory.FieldID, field.TypeInt))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productcategory.FieldID)
		for _, f := range fields {
			if !productcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.Name(); ok {
		_spec.SetField(productcategory.FieldName, field.TypeString, value)
	}
	if pcuo.mutation.NameCleared() {
		_spec.ClearField(productcategory.FieldName, field.TypeString)
	}
	if pcuo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.CategoryTable,
			Columns: []string{productcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedCategoryIDs(); len(nodes) > 0 && !pcuo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.CategoryTable,
			Columns: []string{productcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   productcategory.CategoryTable,
			Columns: []string{productcategory.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductCategory{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
