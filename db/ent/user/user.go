// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFullName holds the string denoting the full_name field in the database.
	FieldFullName = "full_name"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPasswordHash holds the string denoting the password_hash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldUserCategoryID holds the string denoting the user_category_id field in the database.
	FieldUserCategoryID = "user_category_id"
	// EdgeUserCategory holds the string denoting the user_category edge name in mutations.
	EdgeUserCategory = "user_category"
	// EdgeShoppingCartUser holds the string denoting the shopping_cart_user edge name in mutations.
	EdgeShoppingCartUser = "shopping_cart_user"
	// EdgeUserTokenUser holds the string denoting the user_token_user edge name in mutations.
	EdgeUserTokenUser = "user_token_user"
	// EdgeOrderUser holds the string denoting the order_user edge name in mutations.
	EdgeOrderUser = "order_user"
	// EdgeAddresses holds the string denoting the addresses edge name in mutations.
	EdgeAddresses = "addresses"
	// EdgeUserChat holds the string denoting the user_chat edge name in mutations.
	EdgeUserChat = "user_chat"
	// EdgeUserCard holds the string denoting the user_card edge name in mutations.
	EdgeUserCard = "user_card"
	// EdgeUserMessage holds the string denoting the user_message edge name in mutations.
	EdgeUserMessage = "user_message"
	// Table holds the table name of the user in the database.
	Table = "users"
	// UserCategoryTable is the table that holds the user_category relation/edge.
	UserCategoryTable = "users"
	// UserCategoryInverseTable is the table name for the UserCategory entity.
	// It exists in this package in order to avoid circular dependency with the "usercategory" package.
	UserCategoryInverseTable = "user_categories"
	// UserCategoryColumn is the table column denoting the user_category relation/edge.
	UserCategoryColumn = "user_category_id"
	// ShoppingCartUserTable is the table that holds the shopping_cart_user relation/edge.
	ShoppingCartUserTable = "shopping_carts"
	// ShoppingCartUserInverseTable is the table name for the ShoppingCart entity.
	// It exists in this package in order to avoid circular dependency with the "shoppingcart" package.
	ShoppingCartUserInverseTable = "shopping_carts"
	// ShoppingCartUserColumn is the table column denoting the shopping_cart_user relation/edge.
	ShoppingCartUserColumn = "user_id"
	// UserTokenUserTable is the table that holds the user_token_user relation/edge.
	UserTokenUserTable = "user_tokens"
	// UserTokenUserInverseTable is the table name for the UserToken entity.
	// It exists in this package in order to avoid circular dependency with the "usertoken" package.
	UserTokenUserInverseTable = "user_tokens"
	// UserTokenUserColumn is the table column denoting the user_token_user relation/edge.
	UserTokenUserColumn = "user_id"
	// OrderUserTable is the table that holds the order_user relation/edge.
	OrderUserTable = "orders"
	// OrderUserInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderUserInverseTable = "orders"
	// OrderUserColumn is the table column denoting the order_user relation/edge.
	OrderUserColumn = "user_id"
	// AddressesTable is the table that holds the addresses relation/edge. The primary key declared below.
	AddressesTable = "user_addresses"
	// AddressesInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	AddressesInverseTable = "addresses"
	// UserChatTable is the table that holds the user_chat relation/edge.
	UserChatTable = "chats"
	// UserChatInverseTable is the table name for the Chat entity.
	// It exists in this package in order to avoid circular dependency with the "chat" package.
	UserChatInverseTable = "chats"
	// UserChatColumn is the table column denoting the user_chat relation/edge.
	UserChatColumn = "user_id"
	// UserCardTable is the table that holds the user_card relation/edge.
	UserCardTable = "cards"
	// UserCardInverseTable is the table name for the Card entity.
	// It exists in this package in order to avoid circular dependency with the "card" package.
	UserCardInverseTable = "cards"
	// UserCardColumn is the table column denoting the user_card relation/edge.
	UserCardColumn = "user_id"
	// UserMessageTable is the table that holds the user_message relation/edge.
	UserMessageTable = "messages"
	// UserMessageInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	UserMessageInverseTable = "messages"
	// UserMessageColumn is the table column denoting the user_message relation/edge.
	UserMessageColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldFullName,
	FieldUsername,
	FieldEmail,
	FieldPasswordHash,
	FieldPhoneNumber,
	FieldUserCategoryID,
}

var (
	// AddressesPrimaryKey and AddressesColumn2 are the table columns denoting the
	// primary key for the addresses relation (M2M).
	AddressesPrimaryKey = []string{"user_id", "address_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// FullNameValidator is a validator for the "full_name" field. It is called by the builders before save.
	FullNameValidator func(string) error
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	PasswordHashValidator func(string) error
	// PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	PhoneNumberValidator func(string) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFullName orders the results by the full_name field.
func ByFullName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFullName, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPasswordHash orders the results by the password_hash field.
func ByPasswordHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordHash, opts...).ToFunc()
}

// ByPhoneNumber orders the results by the phone_number field.
func ByPhoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneNumber, opts...).ToFunc()
}

// ByUserCategoryID orders the results by the user_category_id field.
func ByUserCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserCategoryID, opts...).ToFunc()
}

// ByUserCategoryField orders the results by user_category field.
func ByUserCategoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserCategoryStep(), sql.OrderByField(field, opts...))
	}
}

// ByShoppingCartUserCount orders the results by shopping_cart_user count.
func ByShoppingCartUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShoppingCartUserStep(), opts...)
	}
}

// ByShoppingCartUser orders the results by shopping_cart_user terms.
func ByShoppingCartUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShoppingCartUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserTokenUserCount orders the results by user_token_user count.
func ByUserTokenUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserTokenUserStep(), opts...)
	}
}

// ByUserTokenUser orders the results by user_token_user terms.
func ByUserTokenUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserTokenUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrderUserCount orders the results by order_user count.
func ByOrderUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderUserStep(), opts...)
	}
}

// ByOrderUser orders the results by order_user terms.
func ByOrderUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAddressesCount orders the results by addresses count.
func ByAddressesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAddressesStep(), opts...)
	}
}

// ByAddresses orders the results by addresses terms.
func ByAddresses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddressesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserChatCount orders the results by user_chat count.
func ByUserChatCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserChatStep(), opts...)
	}
}

// ByUserChat orders the results by user_chat terms.
func ByUserChat(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserChatStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserCardCount orders the results by user_card count.
func ByUserCardCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserCardStep(), opts...)
	}
}

// ByUserCard orders the results by user_card terms.
func ByUserCard(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserCardStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserMessageCount orders the results by user_message count.
func ByUserMessageCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserMessageStep(), opts...)
	}
}

// ByUserMessage orders the results by user_message terms.
func ByUserMessage(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserMessageStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserCategoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserCategoryTable, UserCategoryColumn),
	)
}
func newShoppingCartUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShoppingCartUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ShoppingCartUserTable, ShoppingCartUserColumn),
	)
}
func newUserTokenUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserTokenUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserTokenUserTable, UserTokenUserColumn),
	)
}
func newOrderUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrderUserTable, OrderUserColumn),
	)
}
func newAddressesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddressesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, AddressesTable, AddressesPrimaryKey...),
	)
}
func newUserChatStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserChatInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserChatTable, UserChatColumn),
	)
}
func newUserCardStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserCardInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserCardTable, UserCardColumn),
	)
}
func newUserMessageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserMessageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserMessageTable, UserMessageColumn),
	)
}
