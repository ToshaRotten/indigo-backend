// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/db/ent/address"
	"main/db/ent/order"
	"main/db/ent/orderdetail"
	"main/db/ent/orderstatus"
	"main/db/ent/predicate"
	"main/db/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetOrderDate sets the "order_date" field.
func (ou *OrderUpdate) SetOrderDate(t time.Time) *OrderUpdate {
	ou.mutation.SetOrderDate(t)
	return ou
}

// SetNillableOrderDate sets the "order_date" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderDate(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetOrderDate(*t)
	}
	return ou
}

// ClearOrderDate clears the value of the "order_date" field.
func (ou *OrderUpdate) ClearOrderDate() *OrderUpdate {
	ou.mutation.ClearOrderDate()
	return ou
}

// SetDesiredDeliveryDate sets the "desired_delivery_date" field.
func (ou *OrderUpdate) SetDesiredDeliveryDate(t time.Time) *OrderUpdate {
	ou.mutation.SetDesiredDeliveryDate(t)
	return ou
}

// SetNillableDesiredDeliveryDate sets the "desired_delivery_date" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDesiredDeliveryDate(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetDesiredDeliveryDate(*t)
	}
	return ou
}

// ClearDesiredDeliveryDate clears the value of the "desired_delivery_date" field.
func (ou *OrderUpdate) ClearDesiredDeliveryDate() *OrderUpdate {
	ou.mutation.ClearDesiredDeliveryDate()
	return ou
}

// SetTotalAmount sets the "total_amount" field.
func (ou *OrderUpdate) SetTotalAmount(f float64) *OrderUpdate {
	ou.mutation.ResetTotalAmount()
	ou.mutation.SetTotalAmount(f)
	return ou
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTotalAmount(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetTotalAmount(*f)
	}
	return ou
}

// AddTotalAmount adds f to the "total_amount" field.
func (ou *OrderUpdate) AddTotalAmount(f float64) *OrderUpdate {
	ou.mutation.AddTotalAmount(f)
	return ou
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (ou *OrderUpdate) ClearTotalAmount() *OrderUpdate {
	ou.mutation.ClearTotalAmount()
	return ou
}

// SetOrderStatusID sets the "order_status_id" field.
func (ou *OrderUpdate) SetOrderStatusID(i int) *OrderUpdate {
	ou.mutation.SetOrderStatusID(i)
	return ou
}

// SetNillableOrderStatusID sets the "order_status_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderStatusID(i *int) *OrderUpdate {
	if i != nil {
		ou.SetOrderStatusID(*i)
	}
	return ou
}

// ClearOrderStatusID clears the value of the "order_status_id" field.
func (ou *OrderUpdate) ClearOrderStatusID() *OrderUpdate {
	ou.mutation.ClearOrderStatusID()
	return ou
}

// SetUserID sets the "user_id" field.
func (ou *OrderUpdate) SetUserID(i int) *OrderUpdate {
	ou.mutation.SetUserID(i)
	return ou
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableUserID(i *int) *OrderUpdate {
	if i != nil {
		ou.SetUserID(*i)
	}
	return ou
}

// ClearUserID clears the value of the "user_id" field.
func (ou *OrderUpdate) ClearUserID() *OrderUpdate {
	ou.mutation.ClearUserID()
	return ou
}

// SetAddressID sets the "address_id" field.
func (ou *OrderUpdate) SetAddressID(i int) *OrderUpdate {
	ou.mutation.SetAddressID(i)
	return ou
}

// SetNillableAddressID sets the "address_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableAddressID(i *int) *OrderUpdate {
	if i != nil {
		ou.SetAddressID(*i)
	}
	return ou
}

// ClearAddressID clears the value of the "address_id" field.
func (ou *OrderUpdate) ClearAddressID() *OrderUpdate {
	ou.mutation.ClearAddressID()
	return ou
}

// SetOrderStatus sets the "order_status" edge to the OrderStatus entity.
func (ou *OrderUpdate) SetOrderStatus(o *OrderStatus) *OrderUpdate {
	return ou.SetOrderStatusID(o.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ou *OrderUpdate) SetUser(u *User) *OrderUpdate {
	return ou.SetUserID(u.ID)
}

// SetAddresOrderID sets the "addres_order" edge to the Address entity by ID.
func (ou *OrderUpdate) SetAddresOrderID(id int) *OrderUpdate {
	ou.mutation.SetAddresOrderID(id)
	return ou
}

// SetNillableAddresOrderID sets the "addres_order" edge to the Address entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableAddresOrderID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetAddresOrderID(*id)
	}
	return ou
}

// SetAddresOrder sets the "addres_order" edge to the Address entity.
func (ou *OrderUpdate) SetAddresOrder(a *Address) *OrderUpdate {
	return ou.SetAddresOrderID(a.ID)
}

// AddOrderIDs adds the "order" edge to the OrderDetail entity by IDs.
func (ou *OrderUpdate) AddOrderIDs(ids ...int) *OrderUpdate {
	ou.mutation.AddOrderIDs(ids...)
	return ou
}

// AddOrder adds the "order" edges to the OrderDetail entity.
func (ou *OrderUpdate) AddOrder(o ...*OrderDetail) *OrderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOrderIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearOrderStatus clears the "order_status" edge to the OrderStatus entity.
func (ou *OrderUpdate) ClearOrderStatus() *OrderUpdate {
	ou.mutation.ClearOrderStatus()
	return ou
}

// ClearUser clears the "user" edge to the User entity.
func (ou *OrderUpdate) ClearUser() *OrderUpdate {
	ou.mutation.ClearUser()
	return ou
}

// ClearAddresOrder clears the "addres_order" edge to the Address entity.
func (ou *OrderUpdate) ClearAddresOrder() *OrderUpdate {
	ou.mutation.ClearAddresOrder()
	return ou
}

// ClearOrder clears all "order" edges to the OrderDetail entity.
func (ou *OrderUpdate) ClearOrder() *OrderUpdate {
	ou.mutation.ClearOrder()
	return ou
}

// RemoveOrderIDs removes the "order" edge to OrderDetail entities by IDs.
func (ou *OrderUpdate) RemoveOrderIDs(ids ...int) *OrderUpdate {
	ou.mutation.RemoveOrderIDs(ids...)
	return ou
}

// RemoveOrder removes "order" edges to OrderDetail entities.
func (ou *OrderUpdate) RemoveOrder(o ...*OrderDetail) *OrderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.OrderDate(); ok {
		_spec.SetField(order.FieldOrderDate, field.TypeTime, value)
	}
	if ou.mutation.OrderDateCleared() {
		_spec.ClearField(order.FieldOrderDate, field.TypeTime)
	}
	if value, ok := ou.mutation.DesiredDeliveryDate(); ok {
		_spec.SetField(order.FieldDesiredDeliveryDate, field.TypeTime, value)
	}
	if ou.mutation.DesiredDeliveryDateCleared() {
		_spec.ClearField(order.FieldDesiredDeliveryDate, field.TypeTime)
	}
	if value, ok := ou.mutation.TotalAmount(); ok {
		_spec.SetField(order.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedTotalAmount(); ok {
		_spec.AddField(order.FieldTotalAmount, field.TypeFloat64, value)
	}
	if ou.mutation.TotalAmountCleared() {
		_spec.ClearField(order.FieldTotalAmount, field.TypeFloat64)
	}
	if ou.mutation.OrderStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderStatusTable,
			Columns: []string{order.OrderStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatus.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderStatusTable,
			Columns: []string{order.OrderStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.UserTable,
			Columns: []string{order.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.UserTable,
			Columns: []string{order.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.AddresOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AddresOrderTable,
			Columns: []string{order.AddresOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.AddresOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AddresOrderTable,
			Columns: []string{order.AddresOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderTable,
			Columns: []string{order.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedOrderIDs(); len(nodes) > 0 && !ou.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderTable,
			Columns: []string{order.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderTable,
			Columns: []string{order.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetOrderDate sets the "order_date" field.
func (ouo *OrderUpdateOne) SetOrderDate(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetOrderDate(t)
	return ouo
}

// SetNillableOrderDate sets the "order_date" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderDate(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetOrderDate(*t)
	}
	return ouo
}

// ClearOrderDate clears the value of the "order_date" field.
func (ouo *OrderUpdateOne) ClearOrderDate() *OrderUpdateOne {
	ouo.mutation.ClearOrderDate()
	return ouo
}

// SetDesiredDeliveryDate sets the "desired_delivery_date" field.
func (ouo *OrderUpdateOne) SetDesiredDeliveryDate(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetDesiredDeliveryDate(t)
	return ouo
}

// SetNillableDesiredDeliveryDate sets the "desired_delivery_date" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDesiredDeliveryDate(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetDesiredDeliveryDate(*t)
	}
	return ouo
}

// ClearDesiredDeliveryDate clears the value of the "desired_delivery_date" field.
func (ouo *OrderUpdateOne) ClearDesiredDeliveryDate() *OrderUpdateOne {
	ouo.mutation.ClearDesiredDeliveryDate()
	return ouo
}

// SetTotalAmount sets the "total_amount" field.
func (ouo *OrderUpdateOne) SetTotalAmount(f float64) *OrderUpdateOne {
	ouo.mutation.ResetTotalAmount()
	ouo.mutation.SetTotalAmount(f)
	return ouo
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTotalAmount(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetTotalAmount(*f)
	}
	return ouo
}

// AddTotalAmount adds f to the "total_amount" field.
func (ouo *OrderUpdateOne) AddTotalAmount(f float64) *OrderUpdateOne {
	ouo.mutation.AddTotalAmount(f)
	return ouo
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (ouo *OrderUpdateOne) ClearTotalAmount() *OrderUpdateOne {
	ouo.mutation.ClearTotalAmount()
	return ouo
}

// SetOrderStatusID sets the "order_status_id" field.
func (ouo *OrderUpdateOne) SetOrderStatusID(i int) *OrderUpdateOne {
	ouo.mutation.SetOrderStatusID(i)
	return ouo
}

// SetNillableOrderStatusID sets the "order_status_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderStatusID(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetOrderStatusID(*i)
	}
	return ouo
}

// ClearOrderStatusID clears the value of the "order_status_id" field.
func (ouo *OrderUpdateOne) ClearOrderStatusID() *OrderUpdateOne {
	ouo.mutation.ClearOrderStatusID()
	return ouo
}

// SetUserID sets the "user_id" field.
func (ouo *OrderUpdateOne) SetUserID(i int) *OrderUpdateOne {
	ouo.mutation.SetUserID(i)
	return ouo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableUserID(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetUserID(*i)
	}
	return ouo
}

// ClearUserID clears the value of the "user_id" field.
func (ouo *OrderUpdateOne) ClearUserID() *OrderUpdateOne {
	ouo.mutation.ClearUserID()
	return ouo
}

// SetAddressID sets the "address_id" field.
func (ouo *OrderUpdateOne) SetAddressID(i int) *OrderUpdateOne {
	ouo.mutation.SetAddressID(i)
	return ouo
}

// SetNillableAddressID sets the "address_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableAddressID(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetAddressID(*i)
	}
	return ouo
}

// ClearAddressID clears the value of the "address_id" field.
func (ouo *OrderUpdateOne) ClearAddressID() *OrderUpdateOne {
	ouo.mutation.ClearAddressID()
	return ouo
}

// SetOrderStatus sets the "order_status" edge to the OrderStatus entity.
func (ouo *OrderUpdateOne) SetOrderStatus(o *OrderStatus) *OrderUpdateOne {
	return ouo.SetOrderStatusID(o.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ouo *OrderUpdateOne) SetUser(u *User) *OrderUpdateOne {
	return ouo.SetUserID(u.ID)
}

// SetAddresOrderID sets the "addres_order" edge to the Address entity by ID.
func (ouo *OrderUpdateOne) SetAddresOrderID(id int) *OrderUpdateOne {
	ouo.mutation.SetAddresOrderID(id)
	return ouo
}

// SetNillableAddresOrderID sets the "addres_order" edge to the Address entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableAddresOrderID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetAddresOrderID(*id)
	}
	return ouo
}

// SetAddresOrder sets the "addres_order" edge to the Address entity.
func (ouo *OrderUpdateOne) SetAddresOrder(a *Address) *OrderUpdateOne {
	return ouo.SetAddresOrderID(a.ID)
}

// AddOrderIDs adds the "order" edge to the OrderDetail entity by IDs.
func (ouo *OrderUpdateOne) AddOrderIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.AddOrderIDs(ids...)
	return ouo
}

// AddOrder adds the "order" edges to the OrderDetail entity.
func (ouo *OrderUpdateOne) AddOrder(o ...*OrderDetail) *OrderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOrderIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearOrderStatus clears the "order_status" edge to the OrderStatus entity.
func (ouo *OrderUpdateOne) ClearOrderStatus() *OrderUpdateOne {
	ouo.mutation.ClearOrderStatus()
	return ouo
}

// ClearUser clears the "user" edge to the User entity.
func (ouo *OrderUpdateOne) ClearUser() *OrderUpdateOne {
	ouo.mutation.ClearUser()
	return ouo
}

// ClearAddresOrder clears the "addres_order" edge to the Address entity.
func (ouo *OrderUpdateOne) ClearAddresOrder() *OrderUpdateOne {
	ouo.mutation.ClearAddresOrder()
	return ouo
}

// ClearOrder clears all "order" edges to the OrderDetail entity.
func (ouo *OrderUpdateOne) ClearOrder() *OrderUpdateOne {
	ouo.mutation.ClearOrder()
	return ouo
}

// RemoveOrderIDs removes the "order" edge to OrderDetail entities by IDs.
func (ouo *OrderUpdateOne) RemoveOrderIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.RemoveOrderIDs(ids...)
	return ouo
}

// RemoveOrder removes "order" edges to OrderDetail entities.
func (ouo *OrderUpdateOne) RemoveOrder(o ...*OrderDetail) *OrderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOrderIDs(ids...)
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.OrderDate(); ok {
		_spec.SetField(order.FieldOrderDate, field.TypeTime, value)
	}
	if ouo.mutation.OrderDateCleared() {
		_spec.ClearField(order.FieldOrderDate, field.TypeTime)
	}
	if value, ok := ouo.mutation.DesiredDeliveryDate(); ok {
		_spec.SetField(order.FieldDesiredDeliveryDate, field.TypeTime, value)
	}
	if ouo.mutation.DesiredDeliveryDateCleared() {
		_spec.ClearField(order.FieldDesiredDeliveryDate, field.TypeTime)
	}
	if value, ok := ouo.mutation.TotalAmount(); ok {
		_spec.SetField(order.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedTotalAmount(); ok {
		_spec.AddField(order.FieldTotalAmount, field.TypeFloat64, value)
	}
	if ouo.mutation.TotalAmountCleared() {
		_spec.ClearField(order.FieldTotalAmount, field.TypeFloat64)
	}
	if ouo.mutation.OrderStatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderStatusTable,
			Columns: []string{order.OrderStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatus.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderStatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.OrderStatusTable,
			Columns: []string{order.OrderStatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderstatus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.UserTable,
			Columns: []string{order.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.UserTable,
			Columns: []string{order.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.AddresOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AddresOrderTable,
			Columns: []string{order.AddresOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.AddresOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.AddresOrderTable,
			Columns: []string{order.AddresOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderTable,
			Columns: []string{order.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedOrderIDs(); len(nodes) > 0 && !ouo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderTable,
			Columns: []string{order.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderTable,
			Columns: []string{order.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderdetail.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
