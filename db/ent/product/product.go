// Code generated by ent, DO NOT EDIT.

package product

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldProductComposition holds the string denoting the product_composition field in the database.
	FieldProductComposition = "product_composition"
	// FieldMinStorageTemp holds the string denoting the min_storage_temp field in the database.
	FieldMinStorageTemp = "min_storage_temp"
	// FieldMaxStorageTemp holds the string denoting the max_storage_temp field in the database.
	FieldMaxStorageTemp = "max_storage_temp"
	// FieldShelfLife holds the string denoting the shelf_life field in the database.
	FieldShelfLife = "shelf_life"
	// FieldPicture holds the string denoting the picture field in the database.
	FieldPicture = "picture"
	// FieldProductCategoryID holds the string denoting the product_category_id field in the database.
	FieldProductCategoryID = "product_category_id"
	// FieldTypeOfPackagingID holds the string denoting the type_of_packaging_id field in the database.
	FieldTypeOfPackagingID = "type_of_packaging_id"
	// EdgeOrderDetailProduct holds the string denoting the order_detail_product edge name in mutations.
	EdgeOrderDetailProduct = "order_detail_product"
	// EdgeShoppingCartProduct holds the string denoting the shopping_cart_product edge name in mutations.
	EdgeShoppingCartProduct = "shopping_cart_product"
	// EdgeProductPriceProduct holds the string denoting the product_price_product edge name in mutations.
	EdgeProductPriceProduct = "product_price_product"
	// EdgeProductCategory holds the string denoting the product_category edge name in mutations.
	EdgeProductCategory = "product_category"
	// EdgeTypeOfPackagingProduct holds the string denoting the type_of_packaging_product edge name in mutations.
	EdgeTypeOfPackagingProduct = "type_of_packaging_product"
	// Table holds the table name of the product in the database.
	Table = "products"
	// OrderDetailProductTable is the table that holds the order_detail_product relation/edge.
	OrderDetailProductTable = "order_details"
	// OrderDetailProductInverseTable is the table name for the OrderDetail entity.
	// It exists in this package in order to avoid circular dependency with the "orderdetail" package.
	OrderDetailProductInverseTable = "order_details"
	// OrderDetailProductColumn is the table column denoting the order_detail_product relation/edge.
	OrderDetailProductColumn = "order_id"
	// ShoppingCartProductTable is the table that holds the shopping_cart_product relation/edge.
	ShoppingCartProductTable = "shopping_carts"
	// ShoppingCartProductInverseTable is the table name for the ShoppingCart entity.
	// It exists in this package in order to avoid circular dependency with the "shoppingcart" package.
	ShoppingCartProductInverseTable = "shopping_carts"
	// ShoppingCartProductColumn is the table column denoting the shopping_cart_product relation/edge.
	ShoppingCartProductColumn = "product_id"
	// ProductPriceProductTable is the table that holds the product_price_product relation/edge.
	ProductPriceProductTable = "product_prices"
	// ProductPriceProductInverseTable is the table name for the ProductPrice entity.
	// It exists in this package in order to avoid circular dependency with the "productprice" package.
	ProductPriceProductInverseTable = "product_prices"
	// ProductPriceProductColumn is the table column denoting the product_price_product relation/edge.
	ProductPriceProductColumn = "product_id"
	// ProductCategoryTable is the table that holds the product_category relation/edge.
	ProductCategoryTable = "products"
	// ProductCategoryInverseTable is the table name for the ProductCategory entity.
	// It exists in this package in order to avoid circular dependency with the "productcategory" package.
	ProductCategoryInverseTable = "product_categories"
	// ProductCategoryColumn is the table column denoting the product_category relation/edge.
	ProductCategoryColumn = "product_category_id"
	// TypeOfPackagingProductTable is the table that holds the type_of_packaging_product relation/edge.
	TypeOfPackagingProductTable = "products"
	// TypeOfPackagingProductInverseTable is the table name for the TypeOfPackaging entity.
	// It exists in this package in order to avoid circular dependency with the "typeofpackaging" package.
	TypeOfPackagingProductInverseTable = "type_of_packagings"
	// TypeOfPackagingProductColumn is the table column denoting the type_of_packaging_product relation/edge.
	TypeOfPackagingProductColumn = "type_of_packaging_id"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldWeight,
	FieldProductComposition,
	FieldMinStorageTemp,
	FieldMaxStorageTemp,
	FieldShelfLife,
	FieldPicture,
	FieldProductCategoryID,
	FieldTypeOfPackagingID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// ProductCompositionValidator is a validator for the "product_composition" field. It is called by the builders before save.
	ProductCompositionValidator func(string) error
	// ShelfLifeValidator is a validator for the "shelf_life" field. It is called by the builders before save.
	ShelfLifeValidator func(string) error
	// PictureValidator is a validator for the "picture" field. It is called by the builders before save.
	PictureValidator func(string) error
)

// OrderOption defines the ordering options for the Product queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByProductComposition orders the results by the product_composition field.
func ByProductComposition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductComposition, opts...).ToFunc()
}

// ByMinStorageTemp orders the results by the min_storage_temp field.
func ByMinStorageTemp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinStorageTemp, opts...).ToFunc()
}

// ByMaxStorageTemp orders the results by the max_storage_temp field.
func ByMaxStorageTemp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxStorageTemp, opts...).ToFunc()
}

// ByShelfLife orders the results by the shelf_life field.
func ByShelfLife(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShelfLife, opts...).ToFunc()
}

// ByPicture orders the results by the picture field.
func ByPicture(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPicture, opts...).ToFunc()
}

// ByProductCategoryID orders the results by the product_category_id field.
func ByProductCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductCategoryID, opts...).ToFunc()
}

// ByTypeOfPackagingID orders the results by the type_of_packaging_id field.
func ByTypeOfPackagingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTypeOfPackagingID, opts...).ToFunc()
}

// ByOrderDetailProductCount orders the results by order_detail_product count.
func ByOrderDetailProductCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrderDetailProductStep(), opts...)
	}
}

// ByOrderDetailProduct orders the results by order_detail_product terms.
func ByOrderDetailProduct(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderDetailProductStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByShoppingCartProductCount orders the results by shopping_cart_product count.
func ByShoppingCartProductCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShoppingCartProductStep(), opts...)
	}
}

// ByShoppingCartProduct orders the results by shopping_cart_product terms.
func ByShoppingCartProduct(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShoppingCartProductStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductPriceProductCount orders the results by product_price_product count.
func ByProductPriceProductCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProductPriceProductStep(), opts...)
	}
}

// ByProductPriceProduct orders the results by product_price_product terms.
func ByProductPriceProduct(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductPriceProductStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProductCategoryField orders the results by product_category field.
func ByProductCategoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductCategoryStep(), sql.OrderByField(field, opts...))
	}
}

// ByTypeOfPackagingProductField orders the results by type_of_packaging_product field.
func ByTypeOfPackagingProductField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTypeOfPackagingProductStep(), sql.OrderByField(field, opts...))
	}
}
func newOrderDetailProductStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderDetailProductInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrderDetailProductTable, OrderDetailProductColumn),
	)
}
func newShoppingCartProductStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShoppingCartProductInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ShoppingCartProductTable, ShoppingCartProductColumn),
	)
}
func newProductPriceProductStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductPriceProductInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProductPriceProductTable, ProductPriceProductColumn),
	)
}
func newProductCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductCategoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProductCategoryTable, ProductCategoryColumn),
	)
}
func newTypeOfPackagingProductStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TypeOfPackagingProductInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TypeOfPackagingProductTable, TypeOfPackagingProductColumn),
	)
}
