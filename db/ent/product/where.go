// Code generated by ent, DO NOT EDIT.

package product

import (
	"main/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldName, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v float64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldWeight, v))
}

// ProductComposition applies equality check predicate on the "product_composition" field. It's identical to ProductCompositionEQ.
func ProductComposition(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldProductComposition, v))
}

// MinStorageTemp applies equality check predicate on the "min_storage_temp" field. It's identical to MinStorageTempEQ.
func MinStorageTemp(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldMinStorageTemp, v))
}

// MaxStorageTemp applies equality check predicate on the "max_storage_temp" field. It's identical to MaxStorageTempEQ.
func MaxStorageTemp(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldMaxStorageTemp, v))
}

// ShelfLife applies equality check predicate on the "shelf_life" field. It's identical to ShelfLifeEQ.
func ShelfLife(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldShelfLife, v))
}

// Picture applies equality check predicate on the "picture" field. It's identical to PictureEQ.
func Picture(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldPicture, v))
}

// ProductCategoryID applies equality check predicate on the "product_category_id" field. It's identical to ProductCategoryIDEQ.
func ProductCategoryID(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldProductCategoryID, v))
}

// TypeOfPackagingID applies equality check predicate on the "type_of_packaging_id" field. It's identical to TypeOfPackagingIDEQ.
func TypeOfPackagingID(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldTypeOfPackagingID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldName, v))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v float64) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v float64) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...float64) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...float64) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v float64) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v float64) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v float64) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v float64) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldWeight, v))
}

// WeightIsNil applies the IsNil predicate on the "weight" field.
func WeightIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldWeight))
}

// WeightNotNil applies the NotNil predicate on the "weight" field.
func WeightNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldWeight))
}

// ProductCompositionEQ applies the EQ predicate on the "product_composition" field.
func ProductCompositionEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldProductComposition, v))
}

// ProductCompositionNEQ applies the NEQ predicate on the "product_composition" field.
func ProductCompositionNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldProductComposition, v))
}

// ProductCompositionIn applies the In predicate on the "product_composition" field.
func ProductCompositionIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldProductComposition, vs...))
}

// ProductCompositionNotIn applies the NotIn predicate on the "product_composition" field.
func ProductCompositionNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldProductComposition, vs...))
}

// ProductCompositionGT applies the GT predicate on the "product_composition" field.
func ProductCompositionGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldProductComposition, v))
}

// ProductCompositionGTE applies the GTE predicate on the "product_composition" field.
func ProductCompositionGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldProductComposition, v))
}

// ProductCompositionLT applies the LT predicate on the "product_composition" field.
func ProductCompositionLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldProductComposition, v))
}

// ProductCompositionLTE applies the LTE predicate on the "product_composition" field.
func ProductCompositionLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldProductComposition, v))
}

// ProductCompositionContains applies the Contains predicate on the "product_composition" field.
func ProductCompositionContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldProductComposition, v))
}

// ProductCompositionHasPrefix applies the HasPrefix predicate on the "product_composition" field.
func ProductCompositionHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldProductComposition, v))
}

// ProductCompositionHasSuffix applies the HasSuffix predicate on the "product_composition" field.
func ProductCompositionHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldProductComposition, v))
}

// ProductCompositionIsNil applies the IsNil predicate on the "product_composition" field.
func ProductCompositionIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldProductComposition))
}

// ProductCompositionNotNil applies the NotNil predicate on the "product_composition" field.
func ProductCompositionNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldProductComposition))
}

// ProductCompositionEqualFold applies the EqualFold predicate on the "product_composition" field.
func ProductCompositionEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldProductComposition, v))
}

// ProductCompositionContainsFold applies the ContainsFold predicate on the "product_composition" field.
func ProductCompositionContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldProductComposition, v))
}

// MinStorageTempEQ applies the EQ predicate on the "min_storage_temp" field.
func MinStorageTempEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldMinStorageTemp, v))
}

// MinStorageTempNEQ applies the NEQ predicate on the "min_storage_temp" field.
func MinStorageTempNEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldMinStorageTemp, v))
}

// MinStorageTempIn applies the In predicate on the "min_storage_temp" field.
func MinStorageTempIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldMinStorageTemp, vs...))
}

// MinStorageTempNotIn applies the NotIn predicate on the "min_storage_temp" field.
func MinStorageTempNotIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldMinStorageTemp, vs...))
}

// MinStorageTempGT applies the GT predicate on the "min_storage_temp" field.
func MinStorageTempGT(v int) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldMinStorageTemp, v))
}

// MinStorageTempGTE applies the GTE predicate on the "min_storage_temp" field.
func MinStorageTempGTE(v int) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldMinStorageTemp, v))
}

// MinStorageTempLT applies the LT predicate on the "min_storage_temp" field.
func MinStorageTempLT(v int) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldMinStorageTemp, v))
}

// MinStorageTempLTE applies the LTE predicate on the "min_storage_temp" field.
func MinStorageTempLTE(v int) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldMinStorageTemp, v))
}

// MinStorageTempIsNil applies the IsNil predicate on the "min_storage_temp" field.
func MinStorageTempIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldMinStorageTemp))
}

// MinStorageTempNotNil applies the NotNil predicate on the "min_storage_temp" field.
func MinStorageTempNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldMinStorageTemp))
}

// MaxStorageTempEQ applies the EQ predicate on the "max_storage_temp" field.
func MaxStorageTempEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldMaxStorageTemp, v))
}

// MaxStorageTempNEQ applies the NEQ predicate on the "max_storage_temp" field.
func MaxStorageTempNEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldMaxStorageTemp, v))
}

// MaxStorageTempIn applies the In predicate on the "max_storage_temp" field.
func MaxStorageTempIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldMaxStorageTemp, vs...))
}

// MaxStorageTempNotIn applies the NotIn predicate on the "max_storage_temp" field.
func MaxStorageTempNotIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldMaxStorageTemp, vs...))
}

// MaxStorageTempGT applies the GT predicate on the "max_storage_temp" field.
func MaxStorageTempGT(v int) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldMaxStorageTemp, v))
}

// MaxStorageTempGTE applies the GTE predicate on the "max_storage_temp" field.
func MaxStorageTempGTE(v int) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldMaxStorageTemp, v))
}

// MaxStorageTempLT applies the LT predicate on the "max_storage_temp" field.
func MaxStorageTempLT(v int) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldMaxStorageTemp, v))
}

// MaxStorageTempLTE applies the LTE predicate on the "max_storage_temp" field.
func MaxStorageTempLTE(v int) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldMaxStorageTemp, v))
}

// MaxStorageTempIsNil applies the IsNil predicate on the "max_storage_temp" field.
func MaxStorageTempIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldMaxStorageTemp))
}

// MaxStorageTempNotNil applies the NotNil predicate on the "max_storage_temp" field.
func MaxStorageTempNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldMaxStorageTemp))
}

// ShelfLifeEQ applies the EQ predicate on the "shelf_life" field.
func ShelfLifeEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldShelfLife, v))
}

// ShelfLifeNEQ applies the NEQ predicate on the "shelf_life" field.
func ShelfLifeNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldShelfLife, v))
}

// ShelfLifeIn applies the In predicate on the "shelf_life" field.
func ShelfLifeIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldShelfLife, vs...))
}

// ShelfLifeNotIn applies the NotIn predicate on the "shelf_life" field.
func ShelfLifeNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldShelfLife, vs...))
}

// ShelfLifeGT applies the GT predicate on the "shelf_life" field.
func ShelfLifeGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldShelfLife, v))
}

// ShelfLifeGTE applies the GTE predicate on the "shelf_life" field.
func ShelfLifeGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldShelfLife, v))
}

// ShelfLifeLT applies the LT predicate on the "shelf_life" field.
func ShelfLifeLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldShelfLife, v))
}

// ShelfLifeLTE applies the LTE predicate on the "shelf_life" field.
func ShelfLifeLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldShelfLife, v))
}

// ShelfLifeContains applies the Contains predicate on the "shelf_life" field.
func ShelfLifeContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldShelfLife, v))
}

// ShelfLifeHasPrefix applies the HasPrefix predicate on the "shelf_life" field.
func ShelfLifeHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldShelfLife, v))
}

// ShelfLifeHasSuffix applies the HasSuffix predicate on the "shelf_life" field.
func ShelfLifeHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldShelfLife, v))
}

// ShelfLifeIsNil applies the IsNil predicate on the "shelf_life" field.
func ShelfLifeIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldShelfLife))
}

// ShelfLifeNotNil applies the NotNil predicate on the "shelf_life" field.
func ShelfLifeNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldShelfLife))
}

// ShelfLifeEqualFold applies the EqualFold predicate on the "shelf_life" field.
func ShelfLifeEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldShelfLife, v))
}

// ShelfLifeContainsFold applies the ContainsFold predicate on the "shelf_life" field.
func ShelfLifeContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldShelfLife, v))
}

// PictureEQ applies the EQ predicate on the "picture" field.
func PictureEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldPicture, v))
}

// PictureNEQ applies the NEQ predicate on the "picture" field.
func PictureNEQ(v string) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldPicture, v))
}

// PictureIn applies the In predicate on the "picture" field.
func PictureIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldPicture, vs...))
}

// PictureNotIn applies the NotIn predicate on the "picture" field.
func PictureNotIn(vs ...string) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldPicture, vs...))
}

// PictureGT applies the GT predicate on the "picture" field.
func PictureGT(v string) predicate.Product {
	return predicate.Product(sql.FieldGT(FieldPicture, v))
}

// PictureGTE applies the GTE predicate on the "picture" field.
func PictureGTE(v string) predicate.Product {
	return predicate.Product(sql.FieldGTE(FieldPicture, v))
}

// PictureLT applies the LT predicate on the "picture" field.
func PictureLT(v string) predicate.Product {
	return predicate.Product(sql.FieldLT(FieldPicture, v))
}

// PictureLTE applies the LTE predicate on the "picture" field.
func PictureLTE(v string) predicate.Product {
	return predicate.Product(sql.FieldLTE(FieldPicture, v))
}

// PictureContains applies the Contains predicate on the "picture" field.
func PictureContains(v string) predicate.Product {
	return predicate.Product(sql.FieldContains(FieldPicture, v))
}

// PictureHasPrefix applies the HasPrefix predicate on the "picture" field.
func PictureHasPrefix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasPrefix(FieldPicture, v))
}

// PictureHasSuffix applies the HasSuffix predicate on the "picture" field.
func PictureHasSuffix(v string) predicate.Product {
	return predicate.Product(sql.FieldHasSuffix(FieldPicture, v))
}

// PictureIsNil applies the IsNil predicate on the "picture" field.
func PictureIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldPicture))
}

// PictureNotNil applies the NotNil predicate on the "picture" field.
func PictureNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldPicture))
}

// PictureEqualFold applies the EqualFold predicate on the "picture" field.
func PictureEqualFold(v string) predicate.Product {
	return predicate.Product(sql.FieldEqualFold(FieldPicture, v))
}

// PictureContainsFold applies the ContainsFold predicate on the "picture" field.
func PictureContainsFold(v string) predicate.Product {
	return predicate.Product(sql.FieldContainsFold(FieldPicture, v))
}

// ProductCategoryIDEQ applies the EQ predicate on the "product_category_id" field.
func ProductCategoryIDEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldProductCategoryID, v))
}

// ProductCategoryIDNEQ applies the NEQ predicate on the "product_category_id" field.
func ProductCategoryIDNEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldProductCategoryID, v))
}

// ProductCategoryIDIn applies the In predicate on the "product_category_id" field.
func ProductCategoryIDIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldProductCategoryID, vs...))
}

// ProductCategoryIDNotIn applies the NotIn predicate on the "product_category_id" field.
func ProductCategoryIDNotIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldProductCategoryID, vs...))
}

// ProductCategoryIDIsNil applies the IsNil predicate on the "product_category_id" field.
func ProductCategoryIDIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldProductCategoryID))
}

// ProductCategoryIDNotNil applies the NotNil predicate on the "product_category_id" field.
func ProductCategoryIDNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldProductCategoryID))
}

// TypeOfPackagingIDEQ applies the EQ predicate on the "type_of_packaging_id" field.
func TypeOfPackagingIDEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldEQ(FieldTypeOfPackagingID, v))
}

// TypeOfPackagingIDNEQ applies the NEQ predicate on the "type_of_packaging_id" field.
func TypeOfPackagingIDNEQ(v int) predicate.Product {
	return predicate.Product(sql.FieldNEQ(FieldTypeOfPackagingID, v))
}

// TypeOfPackagingIDIn applies the In predicate on the "type_of_packaging_id" field.
func TypeOfPackagingIDIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldIn(FieldTypeOfPackagingID, vs...))
}

// TypeOfPackagingIDNotIn applies the NotIn predicate on the "type_of_packaging_id" field.
func TypeOfPackagingIDNotIn(vs ...int) predicate.Product {
	return predicate.Product(sql.FieldNotIn(FieldTypeOfPackagingID, vs...))
}

// TypeOfPackagingIDIsNil applies the IsNil predicate on the "type_of_packaging_id" field.
func TypeOfPackagingIDIsNil() predicate.Product {
	return predicate.Product(sql.FieldIsNull(FieldTypeOfPackagingID))
}

// TypeOfPackagingIDNotNil applies the NotNil predicate on the "type_of_packaging_id" field.
func TypeOfPackagingIDNotNil() predicate.Product {
	return predicate.Product(sql.FieldNotNull(FieldTypeOfPackagingID))
}

// HasOrderDetailProduct applies the HasEdge predicate on the "order_detail_product" edge.
func HasOrderDetailProduct() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderDetailProductTable, OrderDetailProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderDetailProductWith applies the HasEdge predicate on the "order_detail_product" edge with a given conditions (other predicates).
func HasOrderDetailProductWith(preds ...predicate.OrderDetail) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := newOrderDetailProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShoppingCartProduct applies the HasEdge predicate on the "shopping_cart_product" edge.
func HasShoppingCartProduct() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ShoppingCartProductTable, ShoppingCartProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShoppingCartProductWith applies the HasEdge predicate on the "shopping_cart_product" edge with a given conditions (other predicates).
func HasShoppingCartProductWith(preds ...predicate.ShoppingCart) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := newShoppingCartProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductPriceProduct applies the HasEdge predicate on the "product_price_product" edge.
func HasProductPriceProduct() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductPriceProductTable, ProductPriceProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductPriceProductWith applies the HasEdge predicate on the "product_price_product" edge with a given conditions (other predicates).
func HasProductPriceProductWith(preds ...predicate.ProductPrice) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := newProductPriceProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductCategory applies the HasEdge predicate on the "product_category" edge.
func HasProductCategory() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProductCategoryTable, ProductCategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductCategoryWith applies the HasEdge predicate on the "product_category" edge with a given conditions (other predicates).
func HasProductCategoryWith(preds ...predicate.ProductCategory) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := newProductCategoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTypeOfPackagingProduct applies the HasEdge predicate on the "type_of_packaging_product" edge.
func HasTypeOfPackagingProduct() predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TypeOfPackagingProductTable, TypeOfPackagingProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTypeOfPackagingProductWith applies the HasEdge predicate on the "type_of_packaging_product" edge with a given conditions (other predicates).
func HasTypeOfPackagingProductWith(preds ...predicate.TypeOfPackaging) predicate.Product {
	return predicate.Product(func(s *sql.Selector) {
		step := newTypeOfPackagingProductStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Product) predicate.Product {
	return predicate.Product(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Product) predicate.Product {
	return predicate.Product(sql.NotPredicates(p))
}
