// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/db/ent/predicate"
	"main/db/ent/product"
	"main/db/ent/productprice"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductPriceUpdate is the builder for updating ProductPrice entities.
type ProductPriceUpdate struct {
	config
	hooks    []Hook
	mutation *ProductPriceMutation
}

// Where appends a list predicates to the ProductPriceUpdate builder.
func (ppu *ProductPriceUpdate) Where(ps ...predicate.ProductPrice) *ProductPriceUpdate {
	ppu.mutation.Where(ps...)
	return ppu
}

// SetModificationDate sets the "modification_date" field.
func (ppu *ProductPriceUpdate) SetModificationDate(t time.Time) *ProductPriceUpdate {
	ppu.mutation.SetModificationDate(t)
	return ppu
}

// SetNillableModificationDate sets the "modification_date" field if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableModificationDate(t *time.Time) *ProductPriceUpdate {
	if t != nil {
		ppu.SetModificationDate(*t)
	}
	return ppu
}

// ClearModificationDate clears the value of the "modification_date" field.
func (ppu *ProductPriceUpdate) ClearModificationDate() *ProductPriceUpdate {
	ppu.mutation.ClearModificationDate()
	return ppu
}

// SetNewPrice sets the "new_price" field.
func (ppu *ProductPriceUpdate) SetNewPrice(f float64) *ProductPriceUpdate {
	ppu.mutation.ResetNewPrice()
	ppu.mutation.SetNewPrice(f)
	return ppu
}

// SetNillableNewPrice sets the "new_price" field if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableNewPrice(f *float64) *ProductPriceUpdate {
	if f != nil {
		ppu.SetNewPrice(*f)
	}
	return ppu
}

// AddNewPrice adds f to the "new_price" field.
func (ppu *ProductPriceUpdate) AddNewPrice(f float64) *ProductPriceUpdate {
	ppu.mutation.AddNewPrice(f)
	return ppu
}

// ClearNewPrice clears the value of the "new_price" field.
func (ppu *ProductPriceUpdate) ClearNewPrice() *ProductPriceUpdate {
	ppu.mutation.ClearNewPrice()
	return ppu
}

// SetProductID sets the "product_id" field.
func (ppu *ProductPriceUpdate) SetProductID(i int) *ProductPriceUpdate {
	ppu.mutation.SetProductID(i)
	return ppu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (ppu *ProductPriceUpdate) SetNillableProductID(i *int) *ProductPriceUpdate {
	if i != nil {
		ppu.SetProductID(*i)
	}
	return ppu
}

// ClearProductID clears the value of the "product_id" field.
func (ppu *ProductPriceUpdate) ClearProductID() *ProductPriceUpdate {
	ppu.mutation.ClearProductID()
	return ppu
}

// SetProduct sets the "product" edge to the Product entity.
func (ppu *ProductPriceUpdate) SetProduct(p *Product) *ProductPriceUpdate {
	return ppu.SetProductID(p.ID)
}

// Mutation returns the ProductPriceMutation object of the builder.
func (ppu *ProductPriceUpdate) Mutation() *ProductPriceMutation {
	return ppu.mutation
}

// ClearProduct clears the "product" edge to the Product entity.
func (ppu *ProductPriceUpdate) ClearProduct() *ProductPriceUpdate {
	ppu.mutation.ClearProduct()
	return ppu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ppu *ProductPriceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ppu.sqlSave, ppu.mutation, ppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppu *ProductPriceUpdate) SaveX(ctx context.Context) int {
	affected, err := ppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ppu *ProductPriceUpdate) Exec(ctx context.Context) error {
	_, err := ppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppu *ProductPriceUpdate) ExecX(ctx context.Context) {
	if err := ppu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ppu *ProductPriceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(productprice.Table, productprice.Columns, sqlgraph.NewFieldSpec(productprice.FieldID, field.TypeInt))
	if ps := ppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppu.mutation.ModificationDate(); ok {
		_spec.SetField(productprice.FieldModificationDate, field.TypeTime, value)
	}
	if ppu.mutation.ModificationDateCleared() {
		_spec.ClearField(productprice.FieldModificationDate, field.TypeTime)
	}
	if value, ok := ppu.mutation.NewPrice(); ok {
		_spec.SetField(productprice.FieldNewPrice, field.TypeFloat64, value)
	}
	if value, ok := ppu.mutation.AddedNewPrice(); ok {
		_spec.AddField(productprice.FieldNewPrice, field.TypeFloat64, value)
	}
	if ppu.mutation.NewPriceCleared() {
		_spec.ClearField(productprice.FieldNewPrice, field.TypeFloat64)
	}
	if ppu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductTable,
			Columns: []string{productprice.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductTable,
			Columns: []string{productprice.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productprice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ppu.mutation.done = true
	return n, nil
}

// ProductPriceUpdateOne is the builder for updating a single ProductPrice entity.
type ProductPriceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductPriceMutation
}

// SetModificationDate sets the "modification_date" field.
func (ppuo *ProductPriceUpdateOne) SetModificationDate(t time.Time) *ProductPriceUpdateOne {
	ppuo.mutation.SetModificationDate(t)
	return ppuo
}

// SetNillableModificationDate sets the "modification_date" field if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableModificationDate(t *time.Time) *ProductPriceUpdateOne {
	if t != nil {
		ppuo.SetModificationDate(*t)
	}
	return ppuo
}

// ClearModificationDate clears the value of the "modification_date" field.
func (ppuo *ProductPriceUpdateOne) ClearModificationDate() *ProductPriceUpdateOne {
	ppuo.mutation.ClearModificationDate()
	return ppuo
}

// SetNewPrice sets the "new_price" field.
func (ppuo *ProductPriceUpdateOne) SetNewPrice(f float64) *ProductPriceUpdateOne {
	ppuo.mutation.ResetNewPrice()
	ppuo.mutation.SetNewPrice(f)
	return ppuo
}

// SetNillableNewPrice sets the "new_price" field if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableNewPrice(f *float64) *ProductPriceUpdateOne {
	if f != nil {
		ppuo.SetNewPrice(*f)
	}
	return ppuo
}

// AddNewPrice adds f to the "new_price" field.
func (ppuo *ProductPriceUpdateOne) AddNewPrice(f float64) *ProductPriceUpdateOne {
	ppuo.mutation.AddNewPrice(f)
	return ppuo
}

// ClearNewPrice clears the value of the "new_price" field.
func (ppuo *ProductPriceUpdateOne) ClearNewPrice() *ProductPriceUpdateOne {
	ppuo.mutation.ClearNewPrice()
	return ppuo
}

// SetProductID sets the "product_id" field.
func (ppuo *ProductPriceUpdateOne) SetProductID(i int) *ProductPriceUpdateOne {
	ppuo.mutation.SetProductID(i)
	return ppuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (ppuo *ProductPriceUpdateOne) SetNillableProductID(i *int) *ProductPriceUpdateOne {
	if i != nil {
		ppuo.SetProductID(*i)
	}
	return ppuo
}

// ClearProductID clears the value of the "product_id" field.
func (ppuo *ProductPriceUpdateOne) ClearProductID() *ProductPriceUpdateOne {
	ppuo.mutation.ClearProductID()
	return ppuo
}

// SetProduct sets the "product" edge to the Product entity.
func (ppuo *ProductPriceUpdateOne) SetProduct(p *Product) *ProductPriceUpdateOne {
	return ppuo.SetProductID(p.ID)
}

// Mutation returns the ProductPriceMutation object of the builder.
func (ppuo *ProductPriceUpdateOne) Mutation() *ProductPriceMutation {
	return ppuo.mutation
}

// ClearProduct clears the "product" edge to the Product entity.
func (ppuo *ProductPriceUpdateOne) ClearProduct() *ProductPriceUpdateOne {
	ppuo.mutation.ClearProduct()
	return ppuo
}

// Where appends a list predicates to the ProductPriceUpdate builder.
func (ppuo *ProductPriceUpdateOne) Where(ps ...predicate.ProductPrice) *ProductPriceUpdateOne {
	ppuo.mutation.Where(ps...)
	return ppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ppuo *ProductPriceUpdateOne) Select(field string, fields ...string) *ProductPriceUpdateOne {
	ppuo.fields = append([]string{field}, fields...)
	return ppuo
}

// Save executes the query and returns the updated ProductPrice entity.
func (ppuo *ProductPriceUpdateOne) Save(ctx context.Context) (*ProductPrice, error) {
	return withHooks(ctx, ppuo.sqlSave, ppuo.mutation, ppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppuo *ProductPriceUpdateOne) SaveX(ctx context.Context) *ProductPrice {
	node, err := ppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ppuo *ProductPriceUpdateOne) Exec(ctx context.Context) error {
	_, err := ppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppuo *ProductPriceUpdateOne) ExecX(ctx context.Context) {
	if err := ppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ppuo *ProductPriceUpdateOne) sqlSave(ctx context.Context) (_node *ProductPrice, err error) {
	_spec := sqlgraph.NewUpdateSpec(productprice.Table, productprice.Columns, sqlgraph.NewFieldSpec(productprice.FieldID, field.TypeInt))
	id, ok := ppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProductPrice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, productprice.FieldID)
		for _, f := range fields {
			if !productprice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != productprice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppuo.mutation.ModificationDate(); ok {
		_spec.SetField(productprice.FieldModificationDate, field.TypeTime, value)
	}
	if ppuo.mutation.ModificationDateCleared() {
		_spec.ClearField(productprice.FieldModificationDate, field.TypeTime)
	}
	if value, ok := ppuo.mutation.NewPrice(); ok {
		_spec.SetField(productprice.FieldNewPrice, field.TypeFloat64, value)
	}
	if value, ok := ppuo.mutation.AddedNewPrice(); ok {
		_spec.AddField(productprice.FieldNewPrice, field.TypeFloat64, value)
	}
	if ppuo.mutation.NewPriceCleared() {
		_spec.ClearField(productprice.FieldNewPrice, field.TypeFloat64)
	}
	if ppuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductTable,
			Columns: []string{productprice.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   productprice.ProductTable,
			Columns: []string{productprice.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProductPrice{config: ppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{productprice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ppuo.mutation.done = true
	return _node, nil
}
