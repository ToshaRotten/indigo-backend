// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"main/db/ent/address"
	"main/db/ent/order"
	"main/db/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AddressCreate is the builder for creating a Address entity.
type AddressCreate struct {
	config
	mutation *AddressMutation
	hooks    []Hook
}

// SetCity sets the "city" field.
func (ac *AddressCreate) SetCity(s string) *AddressCreate {
	ac.mutation.SetCity(s)
	return ac
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (ac *AddressCreate) SetNillableCity(s *string) *AddressCreate {
	if s != nil {
		ac.SetCity(*s)
	}
	return ac
}

// SetStreetName sets the "street_name" field.
func (ac *AddressCreate) SetStreetName(s string) *AddressCreate {
	ac.mutation.SetStreetName(s)
	return ac
}

// SetNillableStreetName sets the "street_name" field if the given value is not nil.
func (ac *AddressCreate) SetNillableStreetName(s *string) *AddressCreate {
	if s != nil {
		ac.SetStreetName(*s)
	}
	return ac
}

// SetHouseNumber sets the "house_number" field.
func (ac *AddressCreate) SetHouseNumber(s string) *AddressCreate {
	ac.mutation.SetHouseNumber(s)
	return ac
}

// SetNillableHouseNumber sets the "house_number" field if the given value is not nil.
func (ac *AddressCreate) SetNillableHouseNumber(s *string) *AddressCreate {
	if s != nil {
		ac.SetHouseNumber(*s)
	}
	return ac
}

// SetStoreName sets the "store_name" field.
func (ac *AddressCreate) SetStoreName(s string) *AddressCreate {
	ac.mutation.SetStoreName(s)
	return ac
}

// SetNillableStoreName sets the "store_name" field if the given value is not nil.
func (ac *AddressCreate) SetNillableStoreName(s *string) *AddressCreate {
	if s != nil {
		ac.SetStoreName(*s)
	}
	return ac
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (ac *AddressCreate) AddUserIDs(ids ...int) *AddressCreate {
	ac.mutation.AddUserIDs(ids...)
	return ac
}

// AddUser adds the "user" edges to the User entity.
func (ac *AddressCreate) AddUser(u ...*User) *AddressCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ac.AddUserIDs(ids...)
}

// AddAddresIDs adds the "address" edge to the Order entity by IDs.
func (ac *AddressCreate) AddAddresIDs(ids ...int) *AddressCreate {
	ac.mutation.AddAddresIDs(ids...)
	return ac
}

// AddAddress adds the "address" edges to the Order entity.
func (ac *AddressCreate) AddAddress(o ...*Order) *AddressCreate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ac.AddAddresIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (ac *AddressCreate) Mutation() *AddressMutation {
	return ac.mutation
}

// Save creates the Address in the database.
func (ac *AddressCreate) Save(ctx context.Context) (*Address, error) {
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AddressCreate) SaveX(ctx context.Context) *Address {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AddressCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AddressCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AddressCreate) check() error {
	if v, ok := ac.mutation.City(); ok {
		if err := address.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Address.city": %w`, err)}
		}
	}
	if v, ok := ac.mutation.StreetName(); ok {
		if err := address.StreetNameValidator(v); err != nil {
			return &ValidationError{Name: "street_name", err: fmt.Errorf(`ent: validator failed for field "Address.street_name": %w`, err)}
		}
	}
	if v, ok := ac.mutation.HouseNumber(); ok {
		if err := address.HouseNumberValidator(v); err != nil {
			return &ValidationError{Name: "house_number", err: fmt.Errorf(`ent: validator failed for field "Address.house_number": %w`, err)}
		}
	}
	if v, ok := ac.mutation.StoreName(); ok {
		if err := address.StoreNameValidator(v); err != nil {
			return &ValidationError{Name: "store_name", err: fmt.Errorf(`ent: validator failed for field "Address.store_name": %w`, err)}
		}
	}
	return nil
}

func (ac *AddressCreate) sqlSave(ctx context.Context) (*Address, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AddressCreate) createSpec() (*Address, *sqlgraph.CreateSpec) {
	var (
		_node = &Address{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(address.Table, sqlgraph.NewFieldSpec(address.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.City(); ok {
		_spec.SetField(address.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := ac.mutation.StreetName(); ok {
		_spec.SetField(address.FieldStreetName, field.TypeString, value)
		_node.StreetName = value
	}
	if value, ok := ac.mutation.HouseNumber(); ok {
		_spec.SetField(address.FieldHouseNumber, field.TypeString, value)
		_node.HouseNumber = value
	}
	if value, ok := ac.mutation.StoreName(); ok {
		_spec.SetField(address.FieldStoreName, field.TypeString, value)
		_node.StoreName = value
	}
	if nodes := ac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   address.UserTable,
			Columns: address.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.AddressTable,
			Columns: []string{address.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AddressCreateBulk is the builder for creating many Address entities in bulk.
type AddressCreateBulk struct {
	config
	err      error
	builders []*AddressCreate
}

// Save creates the Address entities in the database.
func (acb *AddressCreateBulk) Save(ctx context.Context) ([]*Address, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Address, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AddressCreateBulk) SaveX(ctx context.Context) []*Address {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AddressCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AddressCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
